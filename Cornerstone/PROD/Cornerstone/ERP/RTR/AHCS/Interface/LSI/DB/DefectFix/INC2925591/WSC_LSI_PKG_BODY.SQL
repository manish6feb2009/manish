create or replace PACKAGE BODY "WSC_LSI_PKG" IS
 ------------------------------------------------------------------------------------------------------------------------------------------------------------
-- PACKAGE             WSC_LSI_PKG AS
------------------------------------------------------------------------------------------
-- COPYRIGHT (C) Wesco Inc.
--
-- Protected as an unpublished work.  All Rights Reserved.
--
-- The computer program listings, specifications, and documentation herein
-- are the property of Wesco Incorporated and shall not be
-- reproduced, copied, disclosed, or used in whole or in part for any
-- reason without the express written permission of Wesco Incorporated.
--
-- DESCRIPTION:
-- This package contains supporting procedures required for LSI Process sources data from Oracle SaaS ERP and
-- destined for AHCS.
-- 
--
-- FILE LOCATION AND VERSION
-- $Header: WSC_LSI_PKG.pkg
--
-- MODIFICATION HISTORY :
--
-- Name                              Date      Ver   Description
-- =================              ===========  ===   ====================================
-- Manish Kumar/Deloitte Consulting  MAY-22     1.0   Created
-- Manish Kumar/Deloitte Consulting  OCT-22     1.0   Tech Details for CM solution
-- Manish Kumar/Deloitte Consulting  Jul-23     1.0   User Story DP-RTR-IC-159 + Concurrency Fix 
-- Manish Kumar/Deloitte Consulting  Aug-23     1.0   User Story DP-RTR-IC-149
-- Chinthana/Deloitte Consulting  	 Sep-23     1.0   Incident INC2925591
----------------------------------------------------------------------------------------

    FUNCTION isfinalbu (
        lepr_le   VARCHAR2,
        rcv_le    VARCHAR2,
        ap_ledger VARCHAR2,
        ar_ledger VARCHAR2
    ) RETURN VARCHAR2 IS

        lv_attibute2_p VARCHAR2(10);
        lv_attibute2_r VARCHAR2(10);
        lv_pr_emea     VARCHAR2(10);
        lv_rc_emea     VARCHAR2(10);
        lv_pr_priority VARCHAR2(5);
        lv_rc_priority VARCHAR2(5);
    BEGIN
        BEGIN
            SELECT
                attribute2
            INTO lv_attibute2_p
            FROM
                wsc_ahcs_lsi_lookup_t
            WHERE
                    lookup_type = 'WSC_LSI_NETTING_RELATIONSHIPS'
                AND description = lepr_le
                AND tag = rcv_le;

        EXCEPTION
            WHEN OTHERS THEN
                lv_attibute2_p := 'No';
        END;

        BEGIN
            SELECT
                attribute2
            INTO lv_attibute2_r
            FROM
                wsc_ahcs_lsi_lookup_t
            WHERE
                    lookup_type = 'WSC_LSI_NETTING_RELATIONSHIPS'
                AND description = rcv_le
                AND tag = lepr_le;

        EXCEPTION
            WHEN OTHERS THEN
                lv_attibute2_r := 'No';
        END;

        lv_pr_emea := getemea(ar_ledger);
        lv_rc_emea := getemea(ap_ledger);
        lv_pr_priority := isprioritybu(lepr_le);
        lv_rc_priority := isprioritybu(rcv_le);
        IF lv_attibute2_p = 'Yes' OR lv_attibute2_r = 'Yes' OR (
            lv_pr_emea = 'No'
            AND lv_rc_emea = 'No'
            AND lv_pr_priority < 0
            AND lv_rc_priority < 0
        ) THEN
            RETURN 'Yes';
        ELSE
            RETURN 'No';
        END IF;

    END;

    FUNCTION getnettingle (
        le        VARCHAR2,
        ap_ledger VARCHAR2,
        ar_ledger VARCHAR2
    ) RETURN VARCHAR2 IS

        lv_netting_le VARCHAR2(50);
        lv_priority   NUMBER;
        lv_ap_emea    VARCHAR2(10);
        lv_ar_emea    VARCHAR2(10);
    BEGIN
        lv_priority := isprioritybu(le);
        lv_ap_emea := getemea(ap_ledger);
        lv_ar_emea := getemea(ar_ledger);
        IF
            lv_priority < 0
            AND lv_ap_emea = 'No'
            AND lv_ar_emea = 'No'
        THEN
            RETURN le;
        ELSE
            SELECT
                tag
            INTO lv_netting_le
            FROM
                wsc_ahcs_lsi_lookup_t
            WHERE
                    lookup_type = 'WSC_LSI_NETTING_RELATIONSHIPS'
                AND description = le;

            RETURN lv_netting_le;
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            RETURN 'NO LE';
    END;

    FUNCTION getnettingnettingle (
        le VARCHAR2
    ) RETURN VARCHAR2 IS
        lv_netting_le VARCHAR2(50);
    BEGIN
        SELECT
            tag
        INTO lv_netting_le
        FROM
            wsc_ahcs_lsi_lookup_t
        WHERE
                lookup_type = 'WSC_LSI_NETTING_RELATIONSHIPS'
            AND description = le;

        RETURN lv_netting_le;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN 'NO LE';
    END;

    FUNCTION getnettingledger (
        le VARCHAR2
    ) RETURN VARCHAR2 IS
        lv_netting_ledger VARCHAR2(50);
    BEGIN
        SELECT
            ledger_name
        INTO lv_netting_ledger
        FROM
            wsc_ahcs_lsi_lookup_t
        WHERE
                lookup_type = 'WSC_LSI_NETTING_RELATIONSHIPS'
            AND description = le;

        RETURN lv_netting_ledger;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN 'NO LEDGER';
    END;

    FUNCTION getemea (
        ledger VARCHAR2
    ) RETURN VARCHAR2 IS
        lv_emea_flag VARCHAR2(10);
    BEGIN
        SELECT
            'Yes'
        INTO lv_emea_flag
        FROM
            wsc_ahcs_lsi_lookup_t
        WHERE
                lookup_type = 'WSC_LSI_EMEA_LOOKUP'
            AND description = ledger;

        RETURN lv_emea_flag;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN 'No';
    END;

    FUNCTION getnettingfuncurr (
        le VARCHAR2
    ) RETURN VARCHAR2 IS
        lv_netting_funcurr VARCHAR2(50);
    BEGIN
        SELECT
            functional_curr
        INTO lv_netting_funcurr
        FROM
            wsc_ahcs_lsi_lookup_t
        WHERE
                lookup_type = 'WSC_LSI_NETTING_RELATIONSHIPS'
            AND description = le;

        RETURN lv_netting_funcurr;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN 'NO CURRENCY SET';
    END;

    FUNCTION isnettinglefinal (
        le        VARCHAR2,
        nett_le   VARCHAR2,
        ap_ledger VARCHAR2,
        ar_ledger VARCHAR2
    ) RETURN VARCHAR2 IS
        isfinal VARCHAR2(5);
    BEGIN
        IF getemea(ap_ledger) = 'Yes' OR getemea(ar_ledger) = 'Yes' THEN
            SELECT
                nvl(attribute1, 'No')
            INTO isfinal
            FROM
                wsc_ahcs_lsi_lookup_t
            WHERE
                    lookup_type = 'WSC_LSI_NETTING_RELATIONSHIPS'
                AND description = nett_le;

        ELSIF
            getemea(ap_ledger) = 'No'
            AND getemea(ar_ledger) = 'No'
            AND isprioritybu(le) < 0
        THEN
            isfinal := 'Yes';
        ELSE
            isfinal := 'No';
        END IF;

        RETURN isfinal;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN 'N';
    END;

    FUNCTION isprioritybu (
        le VARCHAR2
    ) RETURN NUMBER IS
        ispriority NUMBER;
    BEGIN
        SELECT
            to_number(meaning)
        INTO ispriority
        FROM
            wsc_ahcs_lsi_lookup_t
        WHERE
                lookup_type = 'WSC_LSI_PRIORITY_NETTING_LE'
            AND description = le;

        RETURN ispriority;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN 0;
    END;

    PROCEDURE lsi_sc1 (
        p_batch_id                       NUMBER,
        ar_ccid                          VARCHAR2,
        ar_ledger                        VARCHAR2,
        functional_currency_code_ar      VARCHAR2,
        accounted_invoice_amount_ar      NUMBER,
        intercompany_legal_entity_ar     VARCHAR2,
        intercompany_transaction_type_ar VARCHAR2,
        invoice_number_ar                VARCHAR2,
        ap_ccid                          VARCHAR2,
        ap_ledger                        VARCHAR2,
        functional_currency_code_ap      VARCHAR2,
        accounted_invoice_amount_ap      NUMBER,
        intercompany_transaction_type_ap VARCHAR2,
        invoice_number_ap                VARCHAR2,
        netting_ar_le                    VARCHAR2,
        netting_ar_ledger                VARCHAR2,
        ar_exchange_rate_netting         VARCHAR2,
        netting_ar_fun_curr              VARCHAR2,
        ap_exchange_rate_netting         VARCHAR2,
        netting_ap_fun_curr              VARCHAR2,
        intercompany_legal_entity_ap     VARCHAR2,
        netting_ap_le                    VARCHAR2,
        netting_ap_ledger                VARCHAR2,
        ap_exchange_rate_type            VARCHAR2,
        ar_exchange_rate_type            VARCHAR2,
        record_type                      VARCHAR2,
        ic_trx_number                    VARCHAR2,
        ap_invoice_id                    NUMBER,
        ar_invoice_id                    NUMBER,
        ap_id2                           NUMBER,
        ar_id2                           NUMBER,
        ap_id3                           NUMBER,
        ar_id3                           NUMBER,
        accounting_period                VARCHAR2,
        intercompany_batch_number_ap     VARCHAR2
    ) IS

        lv_file_name             VARCHAR2(100);
        lv_ar_netting_rate_sc4_1 NUMBER(38, 30);
        lv_ar_netting_rate_sc6_1 NUMBER(38, 30);
        lv_err_msg               VARCHAR2(200);
        lv_err_code              VARCHAR2(50);
        lv_header_id             NUMBER;
        lv_exch_rate_excep EXCEPTION;
        lv_acc_date              DATE;
    BEGIN
        BEGIN
            SELECT
                file_name,
                accounting_date
            INTO
                lv_file_name,
                lv_acc_date
            FROM
                wsc_ahcs_lsi_control_t
            WHERE
                batch_id = p_batch_id;

        END;

	---Step 3.1 Scenario 1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 1-Step 03',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            netting_ar_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ar_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

		  ---Step 3.2 Scenario 1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 1-Step 03',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ar != netting_ar_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc4_1
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ar
                    AND to_currency = netting_ar_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc4_1 := 1;
        END IF;

		  --Step 4.1 Scenario 1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 1-Step 04',
            'AHCS for Provider Netting to Provider',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc4_1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

		 --Step 4.2 Scenario 1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 1-Step 04',
            'AHCS for Provider Netting to Provider',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc4_1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            - 1 * lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar,
            intercompany_legal_entity_ar,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            intercompany_legal_entity_ar,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

		  ---Step 5.1 Scenario 1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 1-Step 05',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

		  ---Step 5.2 Scenario 1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 1-Step 05',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            netting_ap_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ap_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ap != netting_ap_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc6_1
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ap
                    AND to_currency = netting_ap_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc6_1 := 1;
        END IF;  

		  --Step 6.1 Scenario 1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 1-Step 06',
            'AHCS for Receiver Netting to Receiver',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc6_1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            lv_ar_netting_rate_sc6_1 * accounted_invoice_amount_ap,
            intercompany_legal_entity_ap,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            intercompany_legal_entity_ap,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

		 --Step 6.2 Scenario 1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 1-Step 06',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc6_1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            - 1 * lv_ar_netting_rate_sc6_1 * accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

		--Step 7.1 Scenario 1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 1-Step 07',
            'AHCS FX for Final Netting',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Other FX Acct',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS Other FX Acct-AHCS Other FX Acct',
            netting_ap_fun_curr,
            lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar - lv_ar_netting_rate_sc6_1 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar - lv_ar_netting_rate_sc6_1 * accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        ); 

		--Step 7.2 Scenario 1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 1-Step 07',
            'AHCS FX for Final Netting',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            netting_ap_fun_curr,
            - 1 * ( lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar - lv_ar_netting_rate_sc6_1 * accounted_invoice_amount_ap ),
            netting_ap_fun_curr,
            - 1 * ( lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar - lv_ar_netting_rate_sc6_1 * accounted_invoice_amount_ap ),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        COMMIT;

	  	                 ---  LV_HEADER_ID  := WSC_AHCS_LSI_HEADER_SEQ.nextval;

		/* Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'DR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;

						Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'CR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit; */

                /* INSERT INTO WSC_AHCS_INT_STATUS_T(HEADER_ID,
LINE_ID ,
APPLICATION,
FILE_NAME,
BATCH_ID ,
STATUS ,
ACCOUNTING_STATUS ,
CR_DR_INDICATOR,
CURRENCY,
VALUE ,
SOURCE_COA,
TARGET_COA,
ATTRIBUTE2,
CREATED_BY,
CREATED_DATE,
LAST_UPDATED_BY,
LAST_UPDATED_DATE,
ATTRIBUTE11,
ATTRIBUTE3)  
Select LV_HEADER_ID,
                    NET.LSI_NETTING_ENTRY_ID,---WSC_AHCS_LSI_LINE_SEQ.nextval,
                    'Oracle LSI',
                    LV_FILE_NAME,
                    P_BATCH_ID,
                    DECODE(LCT.STATUS,'MATCHED','TRANSFORM_SUCCESS','ERROR','TRANSFORM_FAILED','NEW',NULL,LCT.STATUS),
                    DECODE(LCT.STATUS,'MATCHED',NULL,'NEW',NULL,'ERROR','NULL',LCT.STATUS),
                    decode(sign(NET.ACCOUNTED_AMT),-1,'CR','DR'),
                    NET.ACCOUNTED_CURR,
                    NET.ACCOUNTED_AMT,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    'TRANSFORM_SUCCESS',
                    'FININT',
                    LV_ACC_DATE,
                    'FININT',
                    LV_ACC_DATE,
                    to_date(NET.ACCOUNTING_DATE,'YYYY-MM-DD'),
                    NET.TRANSACTION_NUMBER
            FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
            WHERE LCT.BATCH_ID = NET.BATCH_ID 
            AND LCT.FILE_NAME = NET.FILE_NAME 
            AND LCT.BATCH_ID = P_BATCH_ID 
            AND LCT.FILE_NAME = LV_FILE_NAME	
            AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap;
           --- AND NET.;
            commit */

    EXCEPTION
        WHEN lv_exch_rate_excep THEN
            ROLLBACK;
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'ERR_EXCH_NOT_ENABLED',
                'No Exchange Rate Defined for(SC1) IC :' || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;

     /*  DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

        WHEN OTHERS THEN
            lv_err_code := sqlcode;
            lv_err_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                lv_err_code,
                lv_err_msg
                || ' for(SC1) IC :'
                || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;

   /*     DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

    END;

    PROCEDURE lsi_sc2 (
        ar_ccid                          VARCHAR2,
        p_batch_id                       NUMBER,
        ar_ledger                        VARCHAR2,
        functional_currency_code_ar      VARCHAR2,
        accounted_invoice_amount_ar      NUMBER,
        intercompany_legal_entity_ar     VARCHAR2,
        intercompany_transaction_type_ar VARCHAR2,
        invoice_number_ap                VARCHAR2,
        ap_ccid                          VARCHAR2,
        ap_ledger                        VARCHAR2,
        functional_currency_code_ap      VARCHAR2,
        accounted_invoice_amount_ap      NUMBER,
        intercompany_transaction_type_ap VARCHAR2,
        intercompany_legal_entity_ap     VARCHAR2,
        netting_ar_le                    VARCHAR2,
        netting_ar_ledger                VARCHAR2,
        ar_exchange_rate_netting         VARCHAR2,
        netting_ar_fun_curr              VARCHAR2,
        netting_ap_le                    VARCHAR2,
        netting_ap_ledger                VARCHAR2,
        ap_exchange_rate_netting         VARCHAR2,
        netting_ap_fun_curr              VARCHAR2,
        ap_exchange_rate_type            VARCHAR2,
        ar_exchange_rate_type            VARCHAR2,
        record_type                      VARCHAR2,
        ic_trx_number                    VARCHAR2,
        ap_invoice_id                    NUMBER,
        ar_invoice_id                    NUMBER,
        ap_id2                           NUMBER,
        ar_id2                           NUMBER,
        ap_id3                           NUMBER,
        ar_id3                           NUMBER,
        accounting_period                VARCHAR2,
        intercompany_batch_number_ap     VARCHAR2
    ) IS

        lv_ap_netting_le         VARCHAR2(20);
        lv_ar_netting_le         VARCHAR2(20);
	  --- LV_AP_NETTING_LE_FINAL VARCHAR2(20);
	  --- LV_AR_NETTING_LE_FINAL VARCHAR2(20);
        lv_ap_is_priority_bu     NUMBER;
        lv_ar_is_priority_bu     NUMBER;
        lv_ar_netting_rate       NUMBER;
        lv_file_name             VARCHAR2(100);
        lv_ar_netting_rate_sc4_1 NUMBER(38, 30);
        lv_ar_netting_rate_sc5_1 NUMBER(38, 30);
        lv_ar_netting_rate_sc7_1 NUMBER(38, 30);
        lv_header_id             NUMBER;
        lv_err_msg               VARCHAR2(200);
        lv_err_code              VARCHAR2(50);
        lv_exch_rate_excep EXCEPTION;
        lv_acc_date              DATE;
    BEGIN
        BEGIN
            SELECT
                file_name,
                accounting_date
            INTO
                lv_file_name,
                lv_acc_date
            FROM
                wsc_ahcs_lsi_control_t
            WHERE
                batch_id = p_batch_id;

        END;
        lv_ap_netting_le := netting_ap_le;
        lv_ar_netting_le := netting_ar_le;
      --LV_AP_NETTING_LE_FINAL := WSC_LSI_PKG.ISNettingLEFinal(NETTING_AP_LE);
      --LV_AR_NETTING_LE_FINAL := WSC_LSI_PKG.ISNettingLEFinal(NETTING_AR_LE);
        lv_ap_is_priority_bu := wsc_lsi_pkg.isprioritybu(netting_ap_le);
        lv_ar_is_priority_bu := wsc_lsi_pkg.isprioritybu(netting_ar_le);
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 2-Step 03',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            netting_ar_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ar_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        );

		  ---Step 3.2 Scenario 1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 2-Step 03',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        );

        IF functional_currency_code_ar != netting_ar_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc4_1
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ar
                    AND to_currency = netting_ar_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc4_1 := 1;
        END IF;

         	  --Step 4.1 Scenario 2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 2-Step 04',
            'AHCS for Provider Netting to Provider',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc4_1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        );

		 --Step 4.2 Scenario 1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 2-Step 04',
            'AHCS for Provider Netting to Provider',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc4_1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            - 1 * lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar,
            intercompany_legal_entity_ar,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            intercompany_legal_entity_ar,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        );

        IF lv_ar_is_priority_bu <= lv_ap_is_priority_bu THEN
            lv_ar_netting_rate := 1;
        ELSIF
            lv_ar_is_priority_bu > lv_ap_is_priority_bu
            AND netting_ar_fun_curr != netting_ap_fun_curr
        THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = netting_ar_fun_curr
                    AND to_currency = CASE
                                          WHEN lv_ar_is_priority_bu <= lv_ap_is_priority_bu THEN
                                              netting_ar_fun_curr
                                          ELSE
                                              netting_ap_fun_curr
                                      END
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate'); --'Actual Rate';
            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate := 1;
        END IF;

        IF functional_currency_code_ap != netting_ap_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc7_1
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ap
                    AND to_currency = netting_ap_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc7_1 := 1;
        END IF;   

		  --Step 5.1 Scenario 2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 2-Step 05',
            'AHCS Proivder Netting to Receiver Netting',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate,
            'AHCS IC AR AP-AHCS IC AR AP',
                CASE
                    WHEN lv_ar_is_priority_bu <= lv_ap_is_priority_bu THEN
                        netting_ar_fun_curr
                    ELSE
                        netting_ap_fun_curr
                END,
                CASE
                    WHEN lv_ar_is_priority_bu <= lv_ap_is_priority_bu THEN
                        lv_ar_netting_rate_sc7_1 * accounted_invoice_amount_ap
                    WHEN lv_ar_is_priority_bu > lv_ap_is_priority_bu  THEN
                        lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar
                    ELSE
                        NULL
                END,
            netting_ar_fun_curr,
            lv_ar_netting_rate * (
                CASE
                    WHEN lv_ar_is_priority_bu <= lv_ap_is_priority_bu THEN
                        lv_ar_netting_rate_sc7_1 * accounted_invoice_amount_ap
                    WHEN lv_ar_is_priority_bu > lv_ap_is_priority_bu  THEN
                        lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar
                    ELSE
                        NULL
                END
            ),
            netting_ap_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ap_le,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN lv_ar_is_priority_bu <= lv_ap_is_priority_bu THEN
                        NULL
                    WHEN netting_ap_fun_curr = netting_ar_fun_curr    THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        );   	  

		  --Step 5.2 Scenario 2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 2-Step 05',
            'AHCS Proivder Netting to Receiver Netting',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate,
            'IC Clearing AP AR-IC Clearing AP AR',
                CASE
                    WHEN lv_ar_is_priority_bu <= lv_ap_is_priority_bu THEN
                        netting_ar_fun_curr
                    ELSE
                        netting_ap_fun_curr
                END,
                CASE
                    WHEN lv_ar_is_priority_bu <= lv_ap_is_priority_bu THEN
                        - 1 * lv_ar_netting_rate_sc7_1 * accounted_invoice_amount_ap
                    WHEN lv_ar_is_priority_bu > lv_ap_is_priority_bu  THEN
                        - 1 * lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar
                    ELSE
                        NULL
                END,
            netting_ar_fun_curr,
            lv_ar_netting_rate * (
                CASE
                    WHEN lv_ar_is_priority_bu <= lv_ap_is_priority_bu THEN
                        - 1 * lv_ar_netting_rate_sc7_1 * accounted_invoice_amount_ap
                    WHEN lv_ar_is_priority_bu > lv_ap_is_priority_bu  THEN
                        - 1 * lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar
                    ELSE
                        NULL
                END
            ),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN lv_ar_is_priority_bu <= lv_ap_is_priority_bu THEN
                        NULL
                    WHEN netting_ap_fun_curr = netting_ar_fun_curr    THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        );   	 		  

		  ---Step 6.1 Scenario 1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 2-Step 06',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        );

		  ---Step 6.2 Scenario 1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 2-Step 06',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            netting_ap_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ap_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        );

        IF functional_currency_code_ap != netting_ap_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc7_1
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ap
                    AND to_currency = netting_ap_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc7_1 := 1;
        END IF;   

		  --Step 7.1 Scenario 2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 2-Step 07',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc7_1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            lv_ar_netting_rate_sc7_1 * accounted_invoice_amount_ap,
            intercompany_legal_entity_ap,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            intercompany_legal_entity_ap,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        );

		 --Step 6.2 Scenario 1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 2-Step 07',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc7_1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            - 1 * lv_ar_netting_rate_sc7_1 * accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        );

        IF
            lv_ar_is_priority_bu <= lv_ap_is_priority_bu
            AND netting_ap_fun_curr != netting_ar_fun_curr
        THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_1
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = CASE
                                            WHEN lv_ar_is_priority_bu <= lv_ap_is_priority_bu THEN
                                                netting_ar_fun_curr
                                            ELSE
                                                netting_ap_fun_curr
                                        END
                    AND to_currency = netting_ap_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSIF lv_ar_is_priority_bu > lv_ap_is_priority_bu THEN
            lv_ar_netting_rate_sc5_1 := 1;
        ELSE
            lv_ar_netting_rate_sc5_1 := 1;
        END IF;


		  --Step 8.1 Scenario 2 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 2-Step 08',
            'AHCS Receiver Netting to Proivder Netting',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_1,
            'IC Clearing AP AR-IC Clearing AP AR',
                CASE
                    WHEN lv_ar_is_priority_bu <= lv_ap_is_priority_bu THEN
                        netting_ar_fun_curr
                    ELSE
                        netting_ap_fun_curr
                END,
		  /*LV_AR_NETTING_RATE * (Case
				WHEN LV_AR_IS_PRIORITY_BU <= LV_AP_IS_PRIORITY_BU THEN 
				  LV_AR_NETTING_RATE*accounted_invoice_amount_AP
				WHEN LV_AR_IS_PRIORITY_BU > LV_AP_IS_PRIORITY_BU THEN  
				  LV_AR_NETTING_RATE*LV_AR_NETTING_RATE_SC4_1*accounted_invoice_amount_AR
                ELSE
                 NULL  
			END)*/
                CASE
                    WHEN lv_ar_is_priority_bu <= lv_ap_is_priority_bu THEN
                        lv_ar_netting_rate_sc7_1 * accounted_invoice_amount_ap
                    WHEN lv_ar_is_priority_bu > lv_ap_is_priority_bu  THEN
                        lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar
                    ELSE
                        NULL
                END,
            netting_ap_fun_curr,
		  /*LV_AR_NETTING_RATE_SC5_1 * LV_AR_NETTING_RATE * (Case
				WHEN LV_AR_IS_PRIORITY_BU <= LV_AP_IS_PRIORITY_BU THEN 
				  LV_AR_NETTING_RATE*accounted_invoice_amount_AP
				WHEN LV_AR_IS_PRIORITY_BU > LV_AP_IS_PRIORITY_BU THEN  
				  LV_AR_NETTING_RATE*LV_AR_NETTING_RATE_SC4_1*accounted_invoice_amount_AR
                ELSE
                 NULL  
			END)*/
            lv_ar_netting_rate_sc5_1 *
            CASE
                    WHEN lv_ar_is_priority_bu <= lv_ap_is_priority_bu THEN
                        lv_ar_netting_rate_sc7_1 * accounted_invoice_amount_ap
                    WHEN lv_ar_is_priority_bu > lv_ap_is_priority_bu  THEN
                        lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar
                    ELSE
                        NULL
            END,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN lv_ar_is_priority_bu <= lv_ap_is_priority_bu
                         AND netting_ar_fun_curr = netting_ap_fun_curr THEN
                        NULL
                    WHEN lv_ar_is_priority_bu > lv_ap_is_priority_bu THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        ); 

		  --Step 9.2 Scenario 2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 2-Step 08',
            'AHCS Receiver Netting to Proivder Netting',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_1,
            'AHCS IC AR AP-AHCS IC AR AP',
                CASE
                    WHEN lv_ar_is_priority_bu <= lv_ap_is_priority_bu THEN
                        netting_ar_fun_curr
                    ELSE
                        netting_ap_fun_curr
                END,
		 /* -1 * LV_AR_NETTING_RATE * (Case
				WHEN LV_AR_IS_PRIORITY_BU <= LV_AP_IS_PRIORITY_BU THEN 
				  LV_AR_NETTING_RATE*accounted_invoice_amount_AP
				WHEN LV_AR_IS_PRIORITY_BU > LV_AP_IS_PRIORITY_BU THEN  
				  LV_AR_NETTING_RATE*LV_AR_NETTING_RATE_SC4_1*accounted_invoice_amount_AR
                ELSE
                 NULL  
			END)*/
            - 1 *
            CASE
                    WHEN lv_ar_is_priority_bu <= lv_ap_is_priority_bu THEN
                        lv_ar_netting_rate_sc7_1 * accounted_invoice_amount_ap
                    WHEN lv_ar_is_priority_bu > lv_ap_is_priority_bu  THEN
                        lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar
                    ELSE
                        NULL
            END,
            netting_ap_fun_curr,
		  /*-1 * LV_AR_NETTING_RATE_SC5_1 * LV_AR_NETTING_RATE * (Case
				WHEN LV_AR_IS_PRIORITY_BU <= LV_AP_IS_PRIORITY_BU THEN 
				  LV_AR_NETTING_RATE*accounted_invoice_amount_AP
				WHEN LV_AR_IS_PRIORITY_BU > LV_AP_IS_PRIORITY_BU THEN  
				  LV_AR_NETTING_RATE*LV_AR_NETTING_RATE_SC4_1*accounted_invoice_amount_AR
                ELSE
                 NULL  
			END)*/
            - 1 * lv_ar_netting_rate_sc5_1 *
            CASE
                    WHEN lv_ar_is_priority_bu <= lv_ap_is_priority_bu THEN
                        lv_ar_netting_rate_sc7_1 * accounted_invoice_amount_ap
                    WHEN lv_ar_is_priority_bu > lv_ap_is_priority_bu  THEN
                        lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar
                    ELSE
                        NULL
            END,
            netting_ar_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ar_le,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN lv_ar_is_priority_bu <= lv_ap_is_priority_bu
                         AND netting_ar_fun_curr = netting_ap_fun_curr THEN
                        NULL
                    WHEN lv_ar_is_priority_bu > lv_ap_is_priority_bu THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        ); 

		--Step 9.1 Scenario 1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 2-Step 09',
            'AHCS FX for Final Netting',
                CASE
                    WHEN ( lv_ap_is_priority_bu ) < ( lv_ar_is_priority_bu )  THEN
                        netting_ap_le
                    WHEN ( lv_ap_is_priority_bu ) >= ( lv_ar_is_priority_bu ) THEN
                        netting_ar_le
                END,
                CASE
                    WHEN ( lv_ap_is_priority_bu ) < ( lv_ar_is_priority_bu )  THEN
                        netting_ap_ledger
                    WHEN ( lv_ap_is_priority_bu ) >= ( lv_ar_is_priority_bu ) THEN
                        netting_ar_ledger
                END,
            'AHCS Other FX Acct',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS Other FX Acct-AHCS Other FX Acct',
                CASE
                    WHEN ( lv_ap_is_priority_bu ) < ( lv_ar_is_priority_bu )  THEN
                        netting_ap_fun_curr
                    WHEN ( lv_ap_is_priority_bu ) >= ( lv_ar_is_priority_bu ) THEN
                        netting_ar_fun_curr
                END,
                CASE
                    WHEN ( lv_ap_is_priority_bu ) < ( lv_ar_is_priority_bu )  THEN
                        lv_ar_netting_rate_sc5_1 * lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar - lv_ar_netting_rate_sc7_1 *
                        accounted_invoice_amount_ap
                    WHEN ( lv_ap_is_priority_bu ) >= ( lv_ar_is_priority_bu ) THEN
                        lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar - lv_ar_netting_rate * lv_ar_netting_rate_sc7_1 * accounted_invoice_amount_ap
                END,
          ---(AR_EXCHANGE_RATE_NETTING*accounted_invoice_amount_AR - AP_EXCHANGE_RATE_NETTING*accounted_invoice_amount_AP),
                CASE
                    WHEN ( lv_ap_is_priority_bu ) < ( lv_ar_is_priority_bu )  THEN
                        netting_ap_fun_curr
                    WHEN ( lv_ap_is_priority_bu ) >= ( lv_ar_is_priority_bu ) THEN
                        netting_ar_fun_curr
                END,
                CASE
                    WHEN ( lv_ap_is_priority_bu ) < ( lv_ar_is_priority_bu )  THEN 
            --LV_AR_NETTING_RATE_SC5_1 *LV_AR_NETTING_RATE*LV_AR_NETTING_RATE_SC4_1*accounted_invoice_amount_AR-LV_AR_NETTING_RATE_SC7_1*accounted_invoice_amount_AP
                        lv_ar_netting_rate_sc5_1 * lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar - lv_ar_netting_rate_sc7_1 *
                        accounted_invoice_amount_ap
                    WHEN ( lv_ap_is_priority_bu ) >= ( lv_ar_is_priority_bu ) THEN  
           -- LV_AR_NETTING_RATE_SC4_1*accounted_invoice_amount_AR -  LV_AR_NETTING_RATE*LV_AR_NETTING_RATE*accounted_invoice_amount_AP
                        lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar - lv_ar_netting_rate * lv_ar_netting_rate_sc7_1 * accounted_invoice_amount_ap
                END,
          --AR_EXCHANGE_RATE_NETTING*accounted_invoice_amount_AR - AP_EXCHANGE_RATE_NETTING*accounted_invoice_amount_AP,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
                CASE
                    WHEN ( lv_ap_is_priority_bu ) < ( lv_ar_is_priority_bu )  THEN
                        netting_ap_le
                    WHEN ( lv_ap_is_priority_bu ) >= ( lv_ar_is_priority_bu ) THEN
                        netting_ar_le
                END,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN ( lv_ap_is_priority_bu ) < ( lv_ar_is_priority_bu )  THEN
                        NULL
                    WHEN ( lv_ap_is_priority_bu ) >= ( lv_ar_is_priority_bu ) THEN
                        NULL
                    ELSE
                        NULL
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        );   	  

		  --Step 9.2 Scenario 1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 2-Step 09',
            'AHCS FX for Final Netting',
                CASE
                    WHEN ( lv_ap_is_priority_bu ) < ( lv_ar_is_priority_bu )  THEN
                        netting_ap_le
                    WHEN ( lv_ap_is_priority_bu ) >= ( lv_ar_is_priority_bu ) THEN
                        netting_ar_le
                END,
                CASE
                    WHEN ( lv_ap_is_priority_bu ) < ( lv_ar_is_priority_bu )  THEN
                        netting_ap_ledger
                    WHEN ( lv_ap_is_priority_bu ) >= ( lv_ar_is_priority_bu ) THEN
                        netting_ar_ledger
                END,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
                CASE
                    WHEN ( lv_ap_is_priority_bu ) < ( lv_ar_is_priority_bu )  THEN
                        netting_ap_fun_curr
                    WHEN ( lv_ap_is_priority_bu ) >= ( lv_ar_is_priority_bu ) THEN
                        netting_ar_fun_curr
                END,
                CASE
                    WHEN ( lv_ap_is_priority_bu ) < ( lv_ar_is_priority_bu )  THEN 
           -- LV_AR_NETTING_RATE_SC5_1 *LV_AR_NETTING_RATE*LV_AR_NETTING_RATE_SC4_1*accounted_invoice_amount_AR-LV_AR_NETTING_RATE_SC7_1*accounted_invoice_amount_AP
                        - 1 * ( lv_ar_netting_rate_sc5_1 * lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar - lv_ar_netting_rate_sc7_1 *
                        accounted_invoice_amount_ap )
                    WHEN ( lv_ap_is_priority_bu ) >= ( lv_ar_is_priority_bu ) THEN  
           -- LV_AR_NETTING_RATE_SC4_1*accounted_invoice_amount_AR -  LV_AR_NETTING_RATE*LV_AR_NETTING_RATE*accounted_invoice_amount_AP
                        - 1 * ( lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar - lv_ar_netting_rate * lv_ar_netting_rate_sc7_1 *
                        accounted_invoice_amount_ap )
                END,
		 --- -1*(AR_EXCHANGE_RATE_NETTING*accounted_invoice_amount_AR - AP_EXCHANGE_RATE_NETTING*accounted_invoice_amount_AP),
                CASE
                    WHEN ( lv_ap_is_priority_bu ) < ( lv_ar_is_priority_bu )  THEN
                        netting_ap_fun_curr
                    WHEN ( lv_ap_is_priority_bu ) >= ( lv_ar_is_priority_bu ) THEN
                        netting_ar_fun_curr
                END,
                CASE
                    WHEN ( lv_ap_is_priority_bu ) < ( lv_ar_is_priority_bu )  THEN 
           -- LV_AR_NETTING_RATE_SC5_1 *LV_AR_NETTING_RATE*LV_AR_NETTING_RATE_SC4_1*accounted_invoice_amount_AR-LV_AR_NETTING_RATE_SC7_1*accounted_invoice_amount_AP
                        - 1 * ( lv_ar_netting_rate_sc5_1 * lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar - lv_ar_netting_rate_sc7_1 *
                        accounted_invoice_amount_ap )
                    WHEN ( lv_ap_is_priority_bu ) >= ( lv_ar_is_priority_bu ) THEN  
            --LV_AR_NETTING_RATE_SC4_1*accounted_invoice_amount_AR -  LV_AR_NETTING_RATE*LV_AR_NETTING_RATE*accounted_invoice_amount_AP
                        - 1 * ( lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar - lv_ar_netting_rate * lv_ar_netting_rate_sc7_1 *
                        accounted_invoice_amount_ap )
                END,
		  ----1*(AR_EXCHANGE_RATE_NETTING*accounted_invoice_amount_AR - AP_EXCHANGE_RATE_NETTING*accounted_invoice_amount_AP), 
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
                CASE
                    WHEN ( lv_ap_is_priority_bu ) < ( lv_ar_is_priority_bu )  THEN
                        netting_ap_le
                    WHEN ( lv_ap_is_priority_bu ) >= ( lv_ar_is_priority_bu ) THEN
                        netting_ar_le
                END,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN ( lv_ap_is_priority_bu ) < ( lv_ar_is_priority_bu )  THEN
                        NULL
                    WHEN ( lv_ap_is_priority_bu ) >= ( lv_ar_is_priority_bu ) THEN
                        NULL
                    ELSE
                        NULL
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        );

        COMMIT;

	--LV_HEADER_ID  := WSC_AHCS_LSI_HEADER_SEQ.nextval;

	/*				   Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'DR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;

						Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'CR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;	      */

                   /*     INSERT INTO WSC_AHCS_INT_STATUS_T(HEADER_ID,
LINE_ID ,
APPLICATION,
FILE_NAME,
BATCH_ID ,
STATUS ,
ACCOUNTING_STATUS ,
CR_DR_INDICATOR,
CURRENCY,
VALUE ,
SOURCE_COA,
TARGET_COA,
ATTRIBUTE2,
CREATED_BY,
CREATED_DATE,
LAST_UPDATED_BY,
LAST_UPDATED_DATE,
ATTRIBUTE11,
ATTRIBUTE3)  
Select LV_HEADER_ID,
                    NET.LSI_NETTING_ENTRY_ID,
                    'Oracle LSI',
                    LV_FILE_NAME,
                    P_BATCH_ID,
                    DECODE(LCT.STATUS,'MATCHED','TRANSFORM_SUCCESS','ERROR','TRANSFORM_FAILED','NEW',NULL,LCT.STATUS),
                    DECODE(LCT.STATUS,'MATCHED',NULL,'NEW',NULL,'ERROR','NULL',LCT.STATUS),
                    decode(sign(NET.ACCOUNTED_AMT),-1,'CR','DR'),
                    NET.ACCOUNTED_CURR,
                    NET.ACCOUNTED_AMT,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    'TRANSFORM_SUCCESS',
                    'FININT',
                    LV_ACC_DATE,
                    'FININT',
                    LV_ACC_DATE,
                    to_date(NET.ACCOUNTING_DATE,'YYYY-MM-DD'),
                    NET.TRANSACTION_NUMBER
            FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
            WHERE LCT.BATCH_ID = NET.BATCH_ID 
            AND LCT.FILE_NAME = NET.FILE_NAME 
            AND LCT.BATCH_ID = P_BATCH_ID 
            AND LCT.FILE_NAME = LV_FILE_NAME	
            AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap;
            commit; */

    EXCEPTION
        WHEN lv_exch_rate_excep THEN
            ROLLBACK;
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'ERR_EXCH_NOT_ENABLED',
                'No Exchange Rate Defined for (SC2) IC :' || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;

     /*    DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

        WHEN OTHERS THEN
            lv_err_code := sqlcode;
            lv_err_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                lv_err_code,
                lv_err_msg
                || ' for(SC2) IC :'
                || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;	

  /* DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

    END;

    PROCEDURE lsi_sc3 (
        ar_ccid                          VARCHAR2,
        p_batch_id                       NUMBER,
        ar_ledger                        VARCHAR2,
        functional_currency_code_ar      VARCHAR2,
        accounted_invoice_amount_ar      NUMBER,
        intercompany_legal_entity_ar     VARCHAR2,
        intercompany_transaction_type_ar VARCHAR2,
        invoice_number_ap                VARCHAR2,
        ap_ccid                          VARCHAR2,
        ap_ledger                        VARCHAR2,
        functional_currency_code_ap      VARCHAR2,
        accounted_invoice_amount_ap      NUMBER,
        intercompany_transaction_type_ap VARCHAR2,
        intercompany_legal_entity_ap     VARCHAR2,
        netting_ar_le                    VARCHAR2,
        netting_ar_ledger                VARCHAR2,
        ar_exchange_rate_netting         VARCHAR2,
        netting_ar_fun_curr              VARCHAR2,
        netting_ap_le                    VARCHAR2,
        netting_ap_ledger                VARCHAR2,
        ap_exchange_rate_netting         VARCHAR2,
        netting_ap_fun_curr              VARCHAR2,
        ap_exchange_rate_type            VARCHAR2,
        ar_exchange_rate_type            VARCHAR2,
        record_type                      VARCHAR2,
        ic_trx_number                    VARCHAR2,
        ap_invoice_id                    NUMBER,
        ar_invoice_id                    NUMBER,
        ap_id2                           NUMBER,
        ar_id2                           NUMBER,
        ap_id3                           NUMBER,
        ar_id3                           NUMBER,
        accounting_period                VARCHAR2,
        intercompany_batch_number_ap     VARCHAR2
    ) IS

        lv_ap_netting_le         VARCHAR2(20);
        lv_ar_netting_le         VARCHAR2(20);
	   --LV_AP_NETTING_LE_FINAL VARCHAR2(20);
	   --LV_AR_NETTING_LE_FINAL VARCHAR2(20);
        lv_ap_is_priority_bu     NUMBER;
        lv_ar_is_priority_bu     NUMBER;
        lv_ar_netting_rate       NUMBER;
        lv_file_name             VARCHAR2(100);
        lv_ar_netting_rate_sc4_1 NUMBER(38, 30);
        lv_err_msg               VARCHAR2(200);
        lv_err_code              VARCHAR2(50);
        lv_header_id             NUMBER;
        lv_exch_rate_excep EXCEPTION;
        lv_acc_date              DATE;
    BEGIN
        BEGIN
            SELECT
                file_name,
                accounting_date
            INTO
                lv_file_name,
                lv_acc_date
            FROM
                wsc_ahcs_lsi_control_t
            WHERE
                batch_id = p_batch_id;

        END;
        lv_ap_netting_le := netting_ap_le;
        lv_ar_netting_le := netting_ar_le;
      --LV_AP_NETTING_LE_FINAL := WSC_LSI_PKG.ISNettingLEFinal(NETTING_AP_LE);
      --LV_AR_NETTING_LE_FINAL := WSC_LSI_PKG.ISNettingLEFinal(NETTING_AR_LE);
        lv_ap_is_priority_bu := wsc_lsi_pkg.isprioritybu(substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1));

        lv_ar_is_priority_bu := wsc_lsi_pkg.isprioritybu(substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1));

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT1', intercompany_batch_number_ap,
                      lv_acc_date);
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 3-Step 03',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        'AHCS Receiver to Provider'
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        'AHCS Provider to Receiver'
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1)
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1)
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        ar_ledger
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        ap_ledger
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        'AHCS IC AP'
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        'AHCS IC AR'
                    ELSE
                        NULL
                END,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        functional_currency_code_ar
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        functional_currency_code_ap
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        - 1 * accounted_invoice_amount_ap
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        accounted_invoice_amount_ar
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        functional_currency_code_ar
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        functional_currency_code_ap
                    ELSE
                        NULL
                END,
            1 *
            CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        - 1 * accounted_invoice_amount_ap
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        accounted_invoice_amount_ar
                    ELSE
                        NULL
            END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1)
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1)
                    ELSE
                        NULL
                END,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1)
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1)
                END,
            '4120',
            'XXX',
            '0000',
            '00000',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1)
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1)
                    ELSE
                        NULL
                END,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        NULL
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        NULL
                    ELSE
                        NULL
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'INSERT2', intercompany_batch_number_ap,
                      lv_acc_date);
		  ---Step 3.2 Scenario 3
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 3-Step 03',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        'AHCS Receiver to Provider'
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        'AHCS Provider to Receiver'
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1)
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1)
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        ar_ledger
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        ap_ledger
                    ELSE
                        NULL
                END,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        functional_currency_code_ar
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        functional_currency_code_ap
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        accounted_invoice_amount_ap
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        - 1 * accounted_invoice_amount_ar
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        functional_currency_code_ar
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        functional_currency_code_ap
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        accounted_invoice_amount_ap
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        - 1 * accounted_invoice_amount_ar
                    ELSE
                        NULL
                END,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1)
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1)
                END,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        );

        IF functional_currency_code_ar != functional_currency_code_ap THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc4_1
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = CASE
                            WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                                functional_currency_code_ar
                            WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                                functional_currency_code_ap
                            ELSE
                                NULL
                                        END
                    AND to_currency = CASE
                        WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                            functional_currency_code_ar
                        WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                            functional_currency_code_ap
                        ELSE
                            NULL
                                      END
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = CASE
                        WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                            nvl(ap_exchange_rate_type, 'Actual Rate')
                        WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                            nvl(ar_exchange_rate_type, 'Actual Rate')
                                               END;

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc4_1 := 1;
        END IF;

        logging_insert('Oracle LSI', p_batch_id, 1, 'INSERT3', intercompany_batch_number_ap,
                      lv_acc_date);
		  ---Scenario 3 Step 4.1 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 3-Step 04',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        'AHCS Provider to Receiver'
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        'AHCS Receiver to Provider'
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1)
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1)
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        ar_ledger
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        ap_ledger
                    ELSE
                        NULL
                END,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc4_1,
            'IC Clearing AP AR-IC Clearing AP AR',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        functional_currency_code_ar
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        functional_currency_code_ap
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        - 1 * accounted_invoice_amount_ap
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        accounted_invoice_amount_ar
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        functional_currency_code_ar
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        functional_currency_code_ap
                    ELSE
                        NULL
                END,
            lv_ar_netting_rate_sc4_1 *
            CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        - 1 * accounted_invoice_amount_ap
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        accounted_invoice_amount_ar
                    ELSE
                        NULL
            END,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1)
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1)
                    ELSE
                        NULL
                END,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = functional_currency_code_ar THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'INSERT4', intercompany_batch_number_ap,
                      lv_acc_date);
		  ---Step 4.2 Scenario 1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 3-Step 04',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        'AHCS Provider to Receiver'
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        'AHCS Receiver to Provider'
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1)
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1)
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        ar_ledger
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        ap_ledger
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        'AHCS IC AR'
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        'AHCS IC AP'
                    ELSE
                        NULL
                END,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc4_1,
            'AHCS IC AR AP-AHCS IC AR AP',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        functional_currency_code_ar
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        functional_currency_code_ap
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        accounted_invoice_amount_ap
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        - 1 * accounted_invoice_amount_ar
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        functional_currency_code_ar
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        functional_currency_code_ap
                    ELSE
                        NULL
                END,
            lv_ar_netting_rate_sc4_1 *
            CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        accounted_invoice_amount_ap
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        - 1 * accounted_invoice_amount_ar
                    ELSE
                        NULL
            END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1)
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1)
                    ELSE
                        NULL
                END,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1)
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1)
                    ELSE
                        NULL
                END,
            '4120',
            'XXX',
            '0000',
            '00000',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1)
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1)
                    ELSE
                        NULL
                END,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = functional_currency_code_ar THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'INSERT5', intercompany_batch_number_ap,
                      lv_acc_date);
		  ---Scenario 3 Step 5.1 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 3-Step 05',
            'AHCS FX for Provider',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1)
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1)
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        ar_ledger
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        ap_ledger
                    ELSE
                        NULL
                END,
            'AHCS Other FX Acct',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS Other FX Acct-AHCS Other FX Acct',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        functional_currency_code_ar
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        functional_currency_code_ap
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        accounted_invoice_amount_ar - lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ap
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar - accounted_invoice_amount_ap
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        functional_currency_code_ar
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        functional_currency_code_ap
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        accounted_invoice_amount_ar - lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ap
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar - accounted_invoice_amount_ap
                    ELSE
                        NULL
                END,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1)
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1)
                    ELSE
                        NULL
                END,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        NULL
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        NULL
                    ELSE
                        NULL
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'INSERT6', intercompany_batch_number_ap,
                      lv_acc_date);
		  ---Step 5.2 Scenario 3
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            accounting_date,
            event_class
        ) VALUES (
            'Scenario 3-Step 05',
            'AHCS FX for Provider',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1)
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1)
                    ELSE
                        NULL
                END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        ar_ledger
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        ap_ledger
                    ELSE
                        NULL
                END,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        functional_currency_code_ar
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        functional_currency_code_ap
                    ELSE
                        NULL
                END,
            - 1 *
            CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        ( accounted_invoice_amount_ar - lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ap )
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        ( lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar - accounted_invoice_amount_ap )
                    ELSE
                        NULL
            END,
                CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        functional_currency_code_ar
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        functional_currency_code_ap
                    ELSE
                        NULL
                END,
            - 1 *
            CASE
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        ( accounted_invoice_amount_ar - lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ap )
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        ( lv_ar_netting_rate_sc4_1 * accounted_invoice_amount_ar - accounted_invoice_amount_ap )
                    ELSE
                        NULL
            END,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1)
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1)
                END,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN abs(lv_ar_is_priority_bu) > abs(lv_ap_is_priority_bu)  THEN
                        NULL
                    WHEN abs(lv_ar_is_priority_bu) <= abs(lv_ap_is_priority_bu) THEN
                        NULL
                    ELSE
                        NULL
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'ORACLE_LSI'
        );

        COMMIT;
        logging_insert('Oracle LSI', p_batch_id, 1, 'merge1', intercompany_batch_number_ap,
                      lv_acc_date);
	   	--	 LV_HEADER_ID  := WSC_AHCS_LSI_HEADER_SEQ.nextval;

	/*				   Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'DR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;

 logging_insert('Oracle LSI',P_BATCH_ID ,1, 'MERGE2',intercompany_batch_number_ap,LV_ACC_DATE );

						Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'CR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;        */

        /*                INSERT INTO WSC_AHCS_INT_STATUS_T(HEADER_ID,
                                                        LINE_ID ,
                                                        APPLICATION,
                                                        FILE_NAME,
                                                        BATCH_ID ,
                                                        STATUS ,
                                                        ACCOUNTING_STATUS ,
                                                        CR_DR_INDICATOR,
                                                        CURRENCY,
                                                        VALUE ,
                                                        SOURCE_COA,
                                                        TARGET_COA,
                                                        ATTRIBUTE2,
                                                        CREATED_BY,
                                                        CREATED_DATE,
                                                        LAST_UPDATED_BY,
                                                        LAST_UPDATED_DATE,
                                                        ATTRIBUTE11,
                                                        ATTRIBUTE3)  
Select LV_HEADER_ID,
                    NET.LSI_NETTING_ENTRY_ID,
                    'Oracle LSI',
                    LV_FILE_NAME,
                    P_BATCH_ID,
                    DECODE(LCT.STATUS,'MATCHED','TRANSFORM_SUCCESS','ERROR','TRANSFORM_FAILED','NEW',NULL,LCT.STATUS),
                    DECODE(LCT.STATUS,'MATCHED',NULL,'NEW',NULL,'ERROR','NULL',LCT.STATUS),
                    decode(sign(NET.ACCOUNTED_AMT),-1,'CR','DR'),
                    NET.ACCOUNTED_CURR,
                    NET.ACCOUNTED_AMT,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    'TRANSFORM_SUCCESS',
                    'FININT',
                    LV_ACC_DATE,
                    'FININT',
                    LV_ACC_DATE,
                    to_date(NET.ACCOUNTING_DATE,'YYYY-MM-DD'),
                    NET.TRANSACTION_NUMBER
            FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
            WHERE LCT.BATCH_ID = NET.BATCH_ID 
            AND LCT.FILE_NAME = NET.FILE_NAME 
            AND LCT.BATCH_ID = P_BATCH_ID 
            AND LCT.FILE_NAME = LV_FILE_NAME	
            AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap;
            commit; */

    EXCEPTION
        WHEN lv_exch_rate_excep THEN
            dbms_output.put_line(dbms_utility.format_error_backtrace);
            ROLLBACK;
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'ERR_EXCH_NOT_ENABLED',
                'No Exchange Rate Defined for (SC3) IC :' || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;

     /*   DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

        WHEN OTHERS THEN
            lv_err_code := sqlcode;
            lv_err_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                lv_err_code,
                lv_err_msg
                || ' for(SC3) IC :'
                || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT; 

 /* DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

    END;

    PROCEDURE lsi_sc4_1 (
        ar_ccid                          VARCHAR2,
        p_batch_id                       VARCHAR2,
        ar_ledger                        VARCHAR2,
        functional_currency_code_ar      VARCHAR2,
        accounted_invoice_amount_ar      VARCHAR2,
        intercompany_legal_entity_ar     VARCHAR2,
        intercompany_transaction_type_ar VARCHAR2,
        invoice_number_ap                VARCHAR2,
        ap_ccid                          VARCHAR2,
        ap_ledger                        VARCHAR2,
        functional_currency_code_ap      VARCHAR2,
        accounted_invoice_amount_ap      NUMBER,
        intercompany_transaction_type_ap VARCHAR2,
        intercompany_legal_entity_ap     VARCHAR2,
        netting_ar_le                    VARCHAR2,
        netting_ar_ledger                VARCHAR2,
        ar_exchange_rate_netting         VARCHAR2,
        netting_ar_fun_curr              VARCHAR2,
        netting_ap_le                    VARCHAR2,
        netting_ap_ledger                VARCHAR2,
        ap_exchange_rate_netting         VARCHAR2,
        netting_ap_fun_curr              VARCHAR2,
        entered_invoice_amount_ap        NUMBER,
        ap_exchange_rate_type            VARCHAR2,
        ar_exchange_rate_type            VARCHAR2,
        record_type                      VARCHAR2,
        ic_trx_number                    VARCHAR2,
        ap_invoice_id                    NUMBER,
        ar_invoice_id                    NUMBER,
        ap_id2                           NUMBER,
        ar_id2                           NUMBER,
        ap_id3                           NUMBER,
        ar_id3                           NUMBER,
        accounting_period                VARCHAR2,
        intercompany_batch_number_ap     VARCHAR2
    ) IS

        lv_ap_netting_le         VARCHAR2(20);
        lv_ar_netting_le         VARCHAR2(20);
	   --LV_AP_NETTING_LE_FINAL VARCHAR2(20);
	   --LV_AR_NETTING_LE_FINAL VARCHAR2(20);
        lv_ap_is_priority_bu     NUMBER;
        lv_ar_is_priority_bu     NUMBER;
        lv_ar_netting_rate       NUMBER(38, 30);
        lv_ar_netting_rate_sc4_1 NUMBER(38, 30);
        lv_file_name             VARCHAR2(100);
        lv_err_msg               VARCHAR2(200);
        lv_err_code              VARCHAR2(50);
        lv_header_id             NUMBER;
        lv_exch_rate_excep EXCEPTION;
        lv_acc_date              DATE;
    BEGIN
        BEGIN
            SELECT
                file_name,
                accounting_date
            INTO
                lv_file_name,
                lv_acc_date
            FROM
                wsc_ahcs_lsi_control_t
            WHERE
                batch_id = p_batch_id;

        END;
        lv_ap_netting_le := netting_ap_le;
        lv_ar_netting_le := netting_ar_le;
      --LV_AP_NETTING_LE_FINAL := WSC_LSI_PKG.ISNettingLEFinal(NETTING_AP_LE);
      --LV_AR_NETTING_LE_FINAL := WSC_LSI_PKG.ISNettingLEFinal(NETTING_AR_LE);
        lv_ap_is_priority_bu := wsc_lsi_pkg.isprioritybu(substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1));

        lv_ar_is_priority_bu := wsc_lsi_pkg.isprioritybu(substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1));

        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class,
            accounting_date
        ) VALUES (
            'Scenario 4.1-Step 03',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI',
            to_char(lv_acc_date, 'YYYY-MM-DD')
        );

	---Scenario 4.1 Step 3.2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class,
            accounting_date
        ) VALUES (
            'Scenario 4.1-Step 03',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI',
            to_char(lv_acc_date, 'YYYY-MM-DD')
        );

        IF functional_currency_code_ap != functional_currency_code_ar THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc4_1
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ap
                    AND to_currency = functional_currency_code_ar
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate'); --'Actual Rate';
            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc4_1 := 1;
        END IF;		  

	---Scenario 4.1 Step 4.1 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class,
            accounting_date
        ) VALUES (
            'Scenario 4.1-Step 04',
            'AHCS for Receiver Netting to Receiver',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc4_1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            functional_currency_code_ar,
            accounted_invoice_amount_ap * lv_ar_netting_rate_sc4_1,
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = functional_currency_code_ar THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI',
            to_char(lv_acc_date, 'YYYY-MM-DD')
        );

	---Scenario 4.1 Step 4.2 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class,
            accounting_date
        ) VALUES (
            'Scenario 4.1-Step 04',
            'AHCS for Receiver Netting to Receiver',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc4_1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ap * lv_ar_netting_rate_sc4_1,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = functional_currency_code_ar THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI',
            to_char(lv_acc_date, 'YYYY-MM-DD')
        );

 	---Scenario 4.1 Step 5.1 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class,
            accounting_date
        ) VALUES (
            'Scenario 4.1-Step 05',
            'AHCS FX for Provider',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS Other FX Acct',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS Other FX Acct-AHCS Other FX Acct',
            functional_currency_code_ar,
            accounted_invoice_amount_ar - ( accounted_invoice_amount_ap * lv_ar_netting_rate_sc4_1 ),
            functional_currency_code_ar,
            accounted_invoice_amount_ar - ( accounted_invoice_amount_ap * lv_ar_netting_rate_sc4_1 ),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI',
            to_char(lv_acc_date, 'YYYY-MM-DD')
        );

	---Scenario 4.1 Step 5.2 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class,
            accounting_date
        ) VALUES (
            'Scenario 4.1-Step 05',
            'AHCS FX for Provider',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            ( accounted_invoice_amount_ap * lv_ar_netting_rate_sc4_1 - accounted_invoice_amount_ar ),
            functional_currency_code_ar,
            ( accounted_invoice_amount_ap * lv_ar_netting_rate_sc4_1 - accounted_invoice_amount_ar ),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI',
            to_char(lv_acc_date, 'YYYY-MM-DD')
        );

        COMMIT;  

	-- LV_HEADER_ID  := WSC_AHCS_LSI_HEADER_SEQ.nextval;

	/*				   Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'DR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;

						Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'CR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;   */

     /*                   INSERT INTO WSC_AHCS_INT_STATUS_T(HEADER_ID,
LINE_ID ,
APPLICATION,
FILE_NAME,
BATCH_ID ,
STATUS ,
ACCOUNTING_STATUS ,
CR_DR_INDICATOR,
CURRENCY,
VALUE ,
SOURCE_COA,
TARGET_COA,
ATTRIBUTE2,
CREATED_BY,
CREATED_DATE,
LAST_UPDATED_BY,
LAST_UPDATED_DATE,
ATTRIBUTE11,
ATTRIBUTE3)  
Select LV_HEADER_ID,
                    NET.LSI_NETTING_ENTRY_ID,
                    'Oracle LSI',
                    LV_FILE_NAME,
                    P_BATCH_ID,
                    DECODE(LCT.STATUS,'MATCHED','TRANSFORM_SUCCESS','ERROR','TRANSFORM_FAILED','NEW',NULL,LCT.STATUS),
                    DECODE(LCT.STATUS,'MATCHED',NULL,'NEW',NULL,'ERROR','NULL',LCT.STATUS),
                    decode(sign(NET.ACCOUNTED_AMT),-1,'CR','DR'),
                    NET.ACCOUNTED_CURR,
                    NET.ACCOUNTED_AMT,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    'TRANSFORM_SUCCESS',
                    'FININT',
                    LV_ACC_DATE,
                    'FININT',
                    LV_ACC_DATE,
                    to_date(NET.ACCOUNTING_DATE,'YYYY-MM-DD'),
                    NET.TRANSACTION_NUMBER
            FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
            WHERE LCT.BATCH_ID = NET.BATCH_ID 
            AND LCT.FILE_NAME = NET.FILE_NAME 
            AND LCT.BATCH_ID = P_BATCH_ID 
            AND LCT.FILE_NAME = LV_FILE_NAME	
            AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap;
            commit; */


    EXCEPTION
        WHEN lv_exch_rate_excep THEN
            ROLLBACK;
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'ERR_EXCH_NOT_ENABLED',
                'No Exchange Rate Defined for (SC4.1) IC :' || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;

     /*   DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

        WHEN OTHERS THEN
            lv_err_code := sqlcode;
            lv_err_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                lv_err_code,
                lv_err_msg
                || ' for(SC4.1) IC :'
                || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;   

 /* DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

    END;

    PROCEDURE lsi_sc4_2 (
        ar_ccid                          VARCHAR2,
        p_batch_id                       VARCHAR2,
        ar_ledger                        VARCHAR2,
        functional_currency_code_ar      VARCHAR2,
        accounted_invoice_amount_ar      NUMBER,
        intercompany_legal_entity_ar     VARCHAR2,
        intercompany_transaction_type_ar VARCHAR2,
        invoice_number_ap                VARCHAR2,
        ap_ccid                          VARCHAR2,
        ap_ledger                        VARCHAR2,
        functional_currency_code_ap      VARCHAR2,
        accounted_invoice_amount_ap      NUMBER,
        intercompany_transaction_type_ap VARCHAR2,
        intercompany_legal_entity_ap     VARCHAR2,
        netting_ar_le                    VARCHAR2,
        netting_ar_ledger                VARCHAR2,
        ar_exchange_rate_netting         VARCHAR2,
        netting_ar_fun_curr              VARCHAR2,
        netting_ap_le                    VARCHAR2,
        netting_ap_ledger                VARCHAR2,
        ap_exchange_rate_netting         VARCHAR2,
        netting_ap_fun_curr              VARCHAR2,
        ap_exchange_rate_type            VARCHAR2,
        ar_exchange_rate_type            VARCHAR2,
        record_type                      VARCHAR2,
        ic_trx_number                    VARCHAR2,
        ap_invoice_id                    NUMBER,
        ar_invoice_id                    NUMBER,
        ap_id2                           NUMBER,
        ar_id2                           NUMBER,
        ap_id3                           NUMBER,
        ar_id3                           NUMBER,
        accounting_period                VARCHAR2,
        intercompany_batch_number_ap     VARCHAR2
    ) IS

        lv_ap_netting_le         VARCHAR2(20);
        lv_ar_netting_le         VARCHAR2(20);
	   --LV_AP_NETTING_LE_FINAL VARCHAR2(20);
	   --LV_AR_NETTING_LE_FINAL VARCHAR2(20);
        lv_ap_is_priority_bu     NUMBER;
        lv_ar_is_priority_bu     NUMBER;
        lv_ar_netting_rate       NUMBER(38, 30);
        lv_ar_netting_rate_sc4_2 NUMBER(38, 30);
        lv_file_name             VARCHAR2(100);
        lv_err_msg               VARCHAR2(200);
        lv_err_code              VARCHAR2(50);
        lv_header_id             NUMBER;
        lv_exch_rate_excep EXCEPTION;
        lv_acc_date              DATE;
    BEGIN
        BEGIN
            SELECT
                file_name,
                accounting_date
            INTO
                lv_file_name,
                lv_acc_date
            FROM
                wsc_ahcs_lsi_control_t
            WHERE
                batch_id = p_batch_id;

        END;
        lv_ap_netting_le := netting_ap_le;
        lv_ar_netting_le := netting_ar_le;
      --LV_AP_NETTING_LE_FINAL := WSC_LSI_PKG.ISNettingLEFinal(NETTING_AP_LE);
      ---LV_AR_NETTING_LE_FINAL := WSC_LSI_PKG.ISNettingLEFinal(NETTING_AR_LE);
        lv_ap_is_priority_bu := wsc_lsi_pkg.isprioritybu(substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1));

        lv_ar_is_priority_bu := wsc_lsi_pkg.isprioritybu(substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1));

        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class,
            accounting_date
        ) VALUES (
            'Scenario 4.2-Step 03',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI',
            to_char(lv_acc_date, 'YYYY-MM-DD')
        ); 

	---Scenario 4.2 Step 3.2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class,
            accounting_date
        ) VALUES (
            'Scenario 4.2-Step 03',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI',
            to_char(lv_acc_date, 'YYYY-MM-DD')
        );

        IF functional_currency_code_ar != functional_currency_code_ap THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc4_2
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ar
                    AND to_currency = functional_currency_code_ap
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate'); --'Actual Rate';
            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc4_2 := 1;
        END IF;
	 ---Scenario 4.2 Step 4.1 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class,
            accounting_date
        ) VALUES (
            'Scenario 4.2-Step 04',
            'AHCS for Provider Netting to Provider',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc4_2,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            functional_currency_code_ap,
            accounted_invoice_amount_ar * lv_ar_netting_rate_sc4_2,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = functional_currency_code_ap THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI',
            to_char(lv_acc_date, 'YYYY-MM-DD')
        );

	---Scenario 4.2 Step 4.2 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class,
            accounting_date
        ) VALUES (
            'Scenario 4.2-Step 04',
            'AHCS for Provider Netting to Provider',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc4_2,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ar * lv_ar_netting_rate_sc4_2,
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = functional_currency_code_ap THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI',
            to_char(lv_acc_date, 'YYYY-MM-DD')
        );			  

	 ---Scenario 4.2 Step 5.1 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class,
            accounting_date
        ) VALUES (
            'Scenario 4.2-Step 05',
            'AHCS FX for Receiver',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS Other FX Acct',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS Other FX Acct-AHCS Other FX Acct',
            functional_currency_code_ap,
            ( accounted_invoice_amount_ar * lv_ar_netting_rate_sc4_2 ) - accounted_invoice_amount_ap,
            functional_currency_code_ap,
            ( accounted_invoice_amount_ar * lv_ar_netting_rate_sc4_2 ) - accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI',
            to_char(lv_acc_date, 'YYYY-MM-DD')
        );

	---Scenario 4.2 Step 5.2 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class,
            accounting_date
        ) VALUES (
            'Scenario 4.2-Step 05',
            'AHCS FX for Receiver',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            accounted_invoice_amount_ap - ( lv_ar_netting_rate_sc4_2 * accounted_invoice_amount_ar ),
            functional_currency_code_ap,
            accounted_invoice_amount_ap - ( lv_ar_netting_rate_sc4_2 * accounted_invoice_amount_ar ),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI',
            to_char(lv_acc_date, 'YYYY-MM-DD')
        );

        COMMIT;

      --   LV_HEADER_ID  := WSC_AHCS_LSI_HEADER_SEQ.nextval;

/*				   Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'||  NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'DR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;

						Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'CR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;  */

        /*                INSERT INTO WSC_AHCS_INT_STATUS_T(HEADER_ID,
LINE_ID ,
APPLICATION,
FILE_NAME,
BATCH_ID ,
STATUS ,
ACCOUNTING_STATUS ,
CR_DR_INDICATOR,
CURRENCY,
VALUE ,
SOURCE_COA,
TARGET_COA,
ATTRIBUTE2,
CREATED_BY,
CREATED_DATE,
LAST_UPDATED_BY,
LAST_UPDATED_DATE,
ATTRIBUTE11,
ATTRIBUTE3)  
Select LV_HEADER_ID,
                    NET.LSI_NETTING_ENTRY_ID,
                    'Oracle LSI',
                    LV_FILE_NAME,
                    P_BATCH_ID,
                    DECODE(LCT.STATUS,'MATCHED','TRANSFORM_SUCCESS','ERROR','TRANSFORM_FAILED','NEW',NULL,LCT.STATUS),
                    DECODE(LCT.STATUS,'MATCHED',NULL,'NEW',NULL,'ERROR','NULL',LCT.STATUS),
                    decode(sign(NET.ACCOUNTED_AMT),-1,'CR','DR'),
                    NET.ACCOUNTED_CURR,
                    NET.ACCOUNTED_AMT,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    'TRANSFORM_SUCCESS',
                    'FININT',
                    LV_ACC_DATE,
                    'FININT',
                    LV_ACC_DATE,
                    to_date(NET.ACCOUNTING_DATE,'YYYY-MM-DD'),
                    NET.TRANSACTION_NUMBER
            FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
            WHERE LCT.BATCH_ID = NET.BATCH_ID 
            AND LCT.FILE_NAME = NET.FILE_NAME 
            AND LCT.BATCH_ID = P_BATCH_ID 
            AND LCT.FILE_NAME = LV_FILE_NAME	
            AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap;
            commit; */


    EXCEPTION
        WHEN lv_exch_rate_excep THEN
            ROLLBACK;
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'ERR_EXCH_NOT_ENABLED',
                'No Exchange Rate Defined for (SC4.2) IC :' || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;

     /*   DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

        WHEN OTHERS THEN
            lv_err_code := sqlcode;
            lv_err_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                lv_err_code,
                lv_err_msg
                || ' for(SC4.2) IC :'
                || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;  

 /* DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

    END;

    PROCEDURE lsi_sc5_1 (
        p_batch_id                       NUMBER,
        ar_ccid                          VARCHAR2,
        ar_ledger                        VARCHAR2,
        functional_currency_code_ar      VARCHAR2,
        accounted_invoice_amount_ar      NUMBER,
        intercompany_batch_number_ap     VARCHAR2,
        intercompany_legal_entity_ar     VARCHAR2,
        intercompany_transaction_type_ar VARCHAR2,
        invoice_number_ap                VARCHAR2,
        invoice_number_ar                VARCHAR2,
        ap_ccid                          VARCHAR2,
        ap_ledger                        VARCHAR2,
        functional_currency_code_ap      VARCHAR2,
        accounted_invoice_amount_ap      VARCHAR2,
        intercompany_transaction_type_ap VARCHAR2,
        intercompany_legal_entity_ap     VARCHAR2,
        netting_ar_le                    VARCHAR2,
        netting_ar_ledger                VARCHAR2,
        ar_exchange_rate_netting         VARCHAR2,
        netting_ar_fun_curr              VARCHAR2,
        netting_ap_le                    VARCHAR2,
        netting_ap_ledger                VARCHAR2,
        ap_exchange_rate_netting         VARCHAR2,
        netting_ap_fun_curr              VARCHAR2,
        ap_exchange_rate_type            VARCHAR2,
        ar_exchange_rate_type            VARCHAR2,
        record_type                      VARCHAR2,
        ic_trx_number                    VARCHAR2,
        ap_invoice_id                    NUMBER,
        ar_invoice_id                    NUMBER,
        ap_id2                           NUMBER,
        ar_id2                           NUMBER,
        ap_id3                           NUMBER,
        ar_id3                           NUMBER,
        accounting_period                VARCHAR2
    ) IS

        lv_ap_netting_le             VARCHAR2(20);
        lv_ar_netting_le             VARCHAR2(20);
	  -- LV_AP_NETTING_LE_FINAL VARCHAR2(20);
	   --LV_AR_NETTING_LE_FINAL VARCHAR2(20);
        lv_ap_is_priority_bu         NUMBER;
        lv_ar_is_priority_bu         NUMBER;
        lv_ar_netting_rate           NUMBER(38, 30);
        lv_ar_netting_rate_51        NUMBER(38, 30);
        lv_ar_netting_rate_sc5_2     NUMBER(38, 30);
        lv_ap_netting_is_priority_bu NUMBER;
        lv_ar_netting_is_priority_bu NUMBER;
        lv_file_name                 VARCHAR2(100);
        lv_err_msg                   VARCHAR2(200);
        lv_err_code                  VARCHAR2(50);
        lv_header_id                 NUMBER;
        lv_exch_rate_excep EXCEPTION;
        lv_acc_date                  DATE;
    BEGIN
        BEGIN
            SELECT
                file_name,
                accounting_date
            INTO
                lv_file_name,
                lv_acc_date
            FROM
                wsc_ahcs_lsi_control_t
            WHERE
                batch_id = p_batch_id;

        END;
        lv_ap_netting_le := netting_ap_le;
        lv_ar_netting_le := netting_ar_le;
      --LV_AP_NETTING_LE_FINAL := WSC_LSI_PKG.ISNettingLEFinal(NETTING_AP_LE);
      --LV_AR_NETTING_LE_FINAL := WSC_LSI_PKG.ISNettingLEFinal(NETTING_AR_LE);
        lv_ap_is_priority_bu := wsc_lsi_pkg.isprioritybu(substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1));

        lv_ar_is_priority_bu := wsc_lsi_pkg.isprioritybu(substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1));

        lv_ap_netting_is_priority_bu := wsc_lsi_pkg.isprioritybu(netting_ap_le);
        lv_ar_netting_is_priority_bu := wsc_lsi_pkg.isprioritybu(netting_ar_le);
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.1-Step 03',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        ); 

	---Scenario 5.1 Step 3.2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.1-Step 03',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            netting_ap_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ap_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ap != netting_ap_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_2
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ap
                    AND to_currency = netting_ap_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate'); --'Actual Rate';
            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_2 := 1;
        END IF;

	 ---Scenario 5.1 Step 4.1 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.1-Step 04',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_2,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap,
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

	---Scenario 5.1 Step 4.2 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.1-Step 04',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_2,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF (
            netting_ap_fun_curr != functional_currency_code_ar
            AND abs(lv_ar_netting_is_priority_bu) <= abs(lv_ap_netting_is_priority_bu)
        ) OR (
            netting_ar_fun_curr != functional_currency_code_ar
            AND abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu)
        ) THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_51
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = CASE
                                            WHEN abs(lv_ar_netting_is_priority_bu) <= abs(lv_ap_netting_is_priority_bu) THEN
                                                netting_ap_fun_curr
                                            ELSE
                                                netting_ar_fun_curr
                                        END
                    AND to_currency = functional_currency_code_ar
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate'); --'Actual Rate';
            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_51 := 1;
        END IF;

	 ---Scenario 5.1 Step 5.1 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.1-Step 05',
            'AHCS for Provider Netting to Receiver Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_51,
            'AHCS IC AR AP-AHCS IC AR AP',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ap_fun_curr
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ar_fun_curr
                END,
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        accounted_invoice_amount_ar
                END,
            functional_currency_code_ar,
            lv_ar_netting_rate_51 *
            CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        accounted_invoice_amount_ar
            END,
            netting_ap_le,
            invoice_number_ar,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ap_le,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu)
                         AND netting_ap_fun_curr = functional_currency_code_ar THEN
                        NULL
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu)
                         AND netting_ar_fun_curr = functional_currency_code_ar THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

	---Scenario 5.1 Step 5.2 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.1-Step 05',
            'AHCS for Provider Netting to Receiver Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_51,
            'IC Clearing AP AR-IC Clearing AP AR',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ap_fun_curr
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ar_fun_curr
                END,
            - 1 *
            CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        accounted_invoice_amount_ar
            END,
            functional_currency_code_ar,
            - 1 * lv_ar_netting_rate_51 *
            CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        accounted_invoice_amount_ar
            END,
            '0000',
            invoice_number_ar,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu)
                         AND netting_ap_fun_curr = functional_currency_code_ar THEN
                        NULL
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu)
                         AND netting_ar_fun_curr = functional_currency_code_ar THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );  

       	 ---Scenario 5.1 Step 6.1 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.1-Step 06',
            'AHCS for Receiver Netting to Provider Netting',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            netting_ap_fun_curr,
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        accounted_invoice_amount_ar
                END,
            netting_ap_fun_curr,  --Manish
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        accounted_invoice_amount_ar
                END,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

	---Scenario 5.1 Step 6.2 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.1-Step 06',
            'AHCS for Receiver Netting to Provider Netting',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            netting_ap_fun_curr,
            - 1 *
            CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        accounted_invoice_amount_ar
            END,
            netting_ap_fun_curr,
            - 1 *
            CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        accounted_invoice_amount_ar
            END,
            netting_ar_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ar_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );  

		--Scenario 5.1 Step 7.1 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.1-Step 07',
            'AHCS FX for Provider Netting',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ar_netting_le
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ap_netting_le
                END,
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ar_ledger
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ap_ledger
                END,
            'AHCS Other FX Acct',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS Other FX Acct-AHCS Other FX Acct',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ar_fun_curr
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ap_fun_curr
                END,
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        accounted_invoice_amount_ar - lv_ar_netting_rate_51 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        accounted_invoice_amount_ar - lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap
                END,
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ar_fun_curr
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ap_fun_curr
                END,
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        accounted_invoice_amount_ar - lv_ar_netting_rate_51 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        accounted_invoice_amount_ar - lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap
                END,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ar_netting_le
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ap_netting_le
                END,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        NULL
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        NULL
                    ELSE
                        NULL
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        ); 

		--Step 7.2 Scenario 1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.1-Step 07',
            'AHCS FX for Provider Netting',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ar_netting_le
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ap_netting_le
                END,
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ar_ledger
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ap_ledger
                END,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ar_fun_curr
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ap_fun_curr
                END,
            - 1 *
            CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        accounted_invoice_amount_ar - lv_ar_netting_rate_51 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        accounted_invoice_amount_ar - lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap
            END,
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ar_fun_curr
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ap_fun_curr
                END,
            - 1 *
            CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        accounted_invoice_amount_ar - lv_ar_netting_rate_51 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        accounted_invoice_amount_ar - lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap
            END,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ar_netting_le
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ap_netting_le
                END,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu) THEN
                        NULL
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu) THEN
                        NULL
                    ELSE
                        NULL
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        COMMIT;

--LV_HEADER_ID  := WSC_AHCS_LSI_HEADER_SEQ.nextval;

/*				   Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'DR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;

						Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'CR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;   */

    /*                    INSERT INTO WSC_AHCS_INT_STATUS_T(HEADER_ID,
LINE_ID ,
APPLICATION,
FILE_NAME,
BATCH_ID ,
STATUS ,
ACCOUNTING_STATUS ,
CR_DR_INDICATOR,
CURRENCY,
VALUE ,
SOURCE_COA,
TARGET_COA,
ATTRIBUTE2,
CREATED_BY,
CREATED_DATE,
LAST_UPDATED_BY,
LAST_UPDATED_DATE,
ATTRIBUTE11,
ATTRIBUTE3)  
Select LV_HEADER_ID,
                    NET.LSI_NETTING_ENTRY_ID,
                    'Oracle LSI',
                    LV_FILE_NAME,
                    P_BATCH_ID,
                    DECODE(LCT.STATUS,'MATCHED','TRANSFORM_SUCCESS','ERROR','TRANSFORM_FAILED','NEW',NULL,LCT.STATUS),
                    DECODE(LCT.STATUS,'MATCHED',NULL,'NEW',NULL,'ERROR','NULL',LCT.STATUS),
                    decode(sign(NET.ACCOUNTED_AMT),-1,'CR','DR'),
                    NET.ACCOUNTED_CURR,
                    NET.ACCOUNTED_AMT,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    'TRANSFORM_SUCCESS',
                    'FININT',
                    LV_ACC_DATE,
                    'FININT',
                    LV_ACC_DATE,
                    to_date(NET.ACCOUNTING_DATE,'YYYY-MM-DD'),
                    NET.TRANSACTION_NUMBER
            FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
            WHERE LCT.BATCH_ID = NET.BATCH_ID 
            AND LCT.FILE_NAME = NET.FILE_NAME 
            AND LCT.BATCH_ID = P_BATCH_ID 
            AND LCT.FILE_NAME = LV_FILE_NAME	
            AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap;
            commit;*/


    EXCEPTION
        WHEN lv_exch_rate_excep THEN
            ROLLBACK;
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'ERR_EXCH_NOT_ENABLED',
                'No Exchange Rate Defined for (SC5.1) IC :' || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;

      /*  DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

        WHEN OTHERS THEN
            lv_err_code := sqlcode;
            lv_err_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                lv_err_code,
                lv_err_msg
                || ' for(SC5.1) IC :'
                || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;  

 /* DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

    END;

    PROCEDURE lsi_sc5_2 (
        p_batch_id                       NUMBER,
        ar_ccid                          VARCHAR2,
        ar_ledger                        VARCHAR2,
        functional_currency_code_ar      VARCHAR2,
        accounted_invoice_amount_ar      NUMBER,
        intercompany_batch_number_ap     VARCHAR2,
        intercompany_legal_entity_ar     VARCHAR2,
        intercompany_transaction_type_ar VARCHAR2,
        invoice_number_ap                VARCHAR2,
        invoice_number_ar                VARCHAR2,
        ap_ccid                          VARCHAR2,
        ap_ledger                        VARCHAR2,
        functional_currency_code_ap      VARCHAR2,
        accounted_invoice_amount_ap      NUMBER,
        intercompany_transaction_type_ap VARCHAR2,
        intercompany_legal_entity_ap     VARCHAR2,
        netting_ar_le                    VARCHAR2,
        netting_ar_ledger                VARCHAR2,
        ar_exchange_rate_netting         VARCHAR2,
        netting_ar_fun_curr              VARCHAR2,
        netting_ap_le                    VARCHAR2,
        netting_ap_ledger                VARCHAR2,
        ap_exchange_rate_netting         VARCHAR2,
        netting_ap_fun_curr              VARCHAR2,
        ap_exchange_rate_type            VARCHAR2,
        ar_exchange_rate_type            VARCHAR2,
        record_type                      VARCHAR2,
        ic_trx_number                    VARCHAR2,
        ap_invoice_id                    NUMBER,
        ar_invoice_id                    NUMBER,
        ap_id2                           NUMBER,
        ar_id2                           NUMBER,
        ap_id3                           NUMBER,
        ar_id3                           NUMBER,
        accounting_period                VARCHAR2
    ) IS

        lv_ap_netting_le             VARCHAR2(20);
        lv_ar_netting_le             VARCHAR2(20);
	  -- LV_AP_NETTING_LE_FINAL VARCHAR2(20);
	  -- LV_AR_NETTING_LE_FINAL VARCHAR2(20);
        lv_ap_is_priority_bu         NUMBER;
        lv_ar_is_priority_bu         NUMBER;
        lv_ar_netting_rate           NUMBER(38, 30);
        lv_ar_netting_rate_51        NUMBER(38, 30);
        lv_ar_netting_rate_sc5_2     NUMBER(38, 30);
        lv_ap_netting_is_priority_bu NUMBER;
        lv_ar_netting_is_priority_bu NUMBER;
        lv_file_name                 VARCHAR2(100);
        lv_err_msg                   VARCHAR2(200);
        lv_err_code                  VARCHAR2(50);
        lv_header_id                 NUMBER;
        lv_exch_rate_excep EXCEPTION;
        lv_acc_date                  DATE;
    BEGIN
        BEGIN
            SELECT
                file_name,
                accounting_date
            INTO
                lv_file_name,
                lv_acc_date
            FROM
                wsc_ahcs_lsi_control_t
            WHERE
                batch_id = p_batch_id;

        END;
        lv_ap_netting_le := netting_ap_le;
        lv_ar_netting_le := netting_ar_le;
--      LV_AP_NETTING_LE_FINAL := WSC_LSI_PKG.ISNettingLEFinal(NETTING_AP_LE);
--      LV_AR_NETTING_LE_FINAL := WSC_LSI_PKG.ISNettingLEFinal(NETTING_AR_LE);
        lv_ap_is_priority_bu := wsc_lsi_pkg.isprioritybu(substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1));

        lv_ar_is_priority_bu := wsc_lsi_pkg.isprioritybu(substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1));

        lv_ap_netting_is_priority_bu := wsc_lsi_pkg.isprioritybu(netting_ap_le);
        lv_ar_netting_is_priority_bu := wsc_lsi_pkg.isprioritybu(netting_ar_le);
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.2-Step 03',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            netting_ar_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ar_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        ); 

	---Scenario 5.2 Step 3.2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.2-Step 03',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ar != netting_ar_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_2
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ar
                    AND to_currency = netting_ar_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate'); --'Actual Rate';
            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_2 := 1;
        END IF;

	 ---Scenario 5.2 Step 4.1 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.2-Step 04',
            'AHCS for Provider Netting to Provider',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_2,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            accounted_invoice_amount_ar * lv_ar_netting_rate_sc5_2,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

	---Scenario 5.2 Step 4.2 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.2-Step 04',
            'AHCS for Provider Netting to Provider',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_2,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            - 1 * accounted_invoice_amount_ar * lv_ar_netting_rate_sc5_2,
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF (
            netting_ar_fun_curr != functional_currency_code_ap
            AND abs(lv_ap_netting_is_priority_bu) <= abs(lv_ar_netting_is_priority_bu)
        ) OR (
            netting_ap_fun_curr != functional_currency_code_ap
            AND abs(lv_ap_netting_is_priority_bu) > abs(lv_ar_netting_is_priority_bu)
        ) THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_51
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = CASE
                            WHEN abs(lv_ap_netting_is_priority_bu) <= abs(lv_ar_netting_is_priority_bu) THEN
                                netting_ar_fun_curr
                            WHEN abs(lv_ap_netting_is_priority_bu) > abs(lv_ar_netting_is_priority_bu)  THEN
                                netting_ap_fun_curr
                                        END
                    AND to_currency = functional_currency_code_ap
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_51 := 1;
        END IF;

     	---Scenario 5.2 Step 5.1 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.2-Step 05',
            'AHCS for Receiver Netting to Provider Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_51,
            'IC Clearing AP AR-IC Clearing AP AR',
                CASE
                    WHEN abs(lv_ap_netting_is_priority_bu) <= abs(lv_ar_netting_is_priority_bu) THEN
                        netting_ar_fun_curr
                    WHEN abs(lv_ap_netting_is_priority_bu) > abs(lv_ar_netting_is_priority_bu)  THEN
                        netting_ap_fun_curr
                END,
                CASE
                    WHEN abs(lv_ap_netting_is_priority_bu) <= abs(lv_ar_netting_is_priority_bu) THEN
                        accounted_invoice_amount_ar * lv_ar_netting_rate_sc5_2
                    WHEN abs(lv_ap_netting_is_priority_bu) > abs(lv_ar_netting_is_priority_bu)  THEN
                        accounted_invoice_amount_ap
                END,
            functional_currency_code_ap,
            lv_ar_netting_rate_51 *
            CASE
                    WHEN abs(lv_ap_netting_is_priority_bu) <= abs(lv_ar_netting_is_priority_bu) THEN
                        lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar
                    WHEN abs(lv_ap_netting_is_priority_bu) > abs(lv_ar_netting_is_priority_bu)  THEN
                        accounted_invoice_amount_ap
            END,
            '0000',
            invoice_number_ar,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN abs(lv_ap_netting_is_priority_bu) <= abs(lv_ar_netting_is_priority_bu)
                         AND netting_ar_fun_curr = functional_currency_code_ap THEN
                        NULL
                    WHEN abs(lv_ap_netting_is_priority_bu) > abs(lv_ar_netting_is_priority_bu)
                         AND netting_ap_fun_curr = functional_currency_code_ap THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );  	

       ---Scenario 5.2 Step 5.2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.2-Step 05',
            'AHCS for Receiver Netting to Provider Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_51,
            'AHCS IC AR AP-AHCS IC AR AP',
                CASE
                    WHEN abs(lv_ap_netting_is_priority_bu) <= abs(lv_ar_netting_is_priority_bu) THEN
                        netting_ar_fun_curr
                    WHEN abs(lv_ap_netting_is_priority_bu) > abs(lv_ar_netting_is_priority_bu)  THEN
                        netting_ap_fun_curr
                END,
            - 1 *
            CASE
                    WHEN abs(lv_ap_netting_is_priority_bu) <= abs(lv_ar_netting_is_priority_bu) THEN
                        accounted_invoice_amount_ar * lv_ar_netting_rate_sc5_2
                    WHEN abs(lv_ap_netting_is_priority_bu) > abs(lv_ar_netting_is_priority_bu)  THEN
                        accounted_invoice_amount_ap
            END,
            functional_currency_code_ap,
            - 1 * lv_ar_netting_rate_51 *
            CASE
                    WHEN abs(lv_ap_netting_is_priority_bu) <= abs(lv_ar_netting_is_priority_bu) THEN
                        lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar
                    WHEN abs(lv_ap_netting_is_priority_bu) > abs(lv_ar_netting_is_priority_bu)  THEN
                        accounted_invoice_amount_ap
            END,
            netting_ar_le,
            invoice_number_ar,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ar_le,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN abs(lv_ap_netting_is_priority_bu) <= abs(lv_ar_netting_is_priority_bu)
                         AND netting_ar_fun_curr = functional_currency_code_ap THEN
                        NULL
                    WHEN abs(lv_ap_netting_is_priority_bu) > abs(lv_ar_netting_is_priority_bu)
                         AND netting_ap_fun_curr = functional_currency_code_ap THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );	

		---Scenario 5.2 Step 6.1 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.2-Step 06',
            'AHCS for Provider Netting to Receiver Netting',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            netting_ar_fun_curr,
                CASE
                    WHEN abs(lv_ap_netting_is_priority_bu) <= abs(lv_ar_netting_is_priority_bu) THEN
                        lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar
                    WHEN abs(lv_ap_netting_is_priority_bu) > abs(lv_ar_netting_is_priority_bu)  THEN
                        accounted_invoice_amount_ap
                END,
            netting_ar_fun_curr,
                CASE
                    WHEN abs(lv_ap_netting_is_priority_bu) <= abs(lv_ar_netting_is_priority_bu) THEN
                        lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar
                    WHEN abs(lv_ap_netting_is_priority_bu) > abs(lv_ar_netting_is_priority_bu)  THEN
                        accounted_invoice_amount_ap
                END,
            netting_ap_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ap_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        ); 	

       	 ---Scenario 5.2 Step 6.2 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.2-Step 06',
            'AHCS for Provider Netting to Receiver Netting',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            netting_ar_fun_curr,
            - 1 *
            CASE
                    WHEN abs(lv_ap_netting_is_priority_bu) <= abs(lv_ar_netting_is_priority_bu) THEN
                        lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar
                    WHEN abs(lv_ap_netting_is_priority_bu) > abs(lv_ar_netting_is_priority_bu)  THEN
                        accounted_invoice_amount_ap
            END,
            netting_ar_fun_curr,
            - 1 *
            CASE
                    WHEN abs(lv_ap_netting_is_priority_bu) < abs(lv_ar_netting_is_priority_bu)  THEN
                        lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar
                    WHEN abs(lv_ap_netting_is_priority_bu) >= abs(lv_ar_netting_is_priority_bu) THEN
                        accounted_invoice_amount_ap
            END,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        ); 		  

	 --Scenario 5.2 Step 7.1 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.2-Step 07',
            'AHCS FX for Receiver Netting',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) <= abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ar_netting_le
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu)  THEN
                        lv_ap_netting_le
                END,
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) <= abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ar_ledger
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu)  THEN
                        netting_ap_ledger
                END,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu)  THEN
                        netting_ar_fun_curr
                    WHEN abs(lv_ar_netting_is_priority_bu) >= abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ap_fun_curr
                END,
                CASE
                    WHEN abs(lv_ap_netting_is_priority_bu) < abs(lv_ar_netting_is_priority_bu)  THEN
                        ( accounted_invoice_amount_ap - lv_ar_netting_rate_51 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar )
                    WHEN abs(lv_ap_netting_is_priority_bu) >= abs(lv_ar_netting_is_priority_bu) THEN
                        - 1 * ( lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar - accounted_invoice_amount_ap * lv_ar_netting_rate_51 )
                END,
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) < abs(lv_ap_netting_is_priority_bu)  THEN
                        netting_ar_fun_curr
                    WHEN abs(lv_ar_netting_is_priority_bu) >= abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ap_fun_curr
                END,
                CASE
                    WHEN abs(lv_ap_netting_is_priority_bu) < abs(lv_ar_netting_is_priority_bu)  THEN
                        ( accounted_invoice_amount_ap - lv_ar_netting_rate_51 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar )
                    WHEN abs(lv_ap_netting_is_priority_bu) >= abs(lv_ar_netting_is_priority_bu) THEN
                        - 1 * ( lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar - accounted_invoice_amount_ap * lv_ar_netting_rate_51 )
                END,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) <= abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ar_netting_le
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu)  THEN
                        lv_ap_netting_le
                END,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) <= abs(lv_ap_netting_is_priority_bu) THEN
                        NULL
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu)  THEN
                        NULL
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

	 --Scenario 5.2 Step 7.2 
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 5.2-Step 07',
            'AHCS FX for Receiver Netting',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) <= abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ar_netting_le
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu)  THEN
                        lv_ap_netting_le
                END,
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) <= abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ar_ledger
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu)  THEN
                        netting_ap_ledger
                END,
            'AHCS Other FX Acct',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS Other FX Acct-AHCS Other FX Acct',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) <= abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ar_fun_curr
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu)  THEN
                        netting_ap_fun_curr
                END,
                CASE
                    WHEN abs(lv_ap_netting_is_priority_bu) < abs(lv_ar_netting_is_priority_bu)  THEN
                        - 1 * ( accounted_invoice_amount_ap - lv_ar_netting_rate_51 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar )
                    WHEN abs(lv_ap_netting_is_priority_bu) >= abs(lv_ar_netting_is_priority_bu) THEN
                        lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar - accounted_invoice_amount_ap * lv_ar_netting_rate_51
                END,
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) <= abs(lv_ap_netting_is_priority_bu) THEN
                        netting_ar_fun_curr
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu)  THEN
                        netting_ap_fun_curr
                END,
                CASE
                    WHEN abs(lv_ap_netting_is_priority_bu) < abs(lv_ar_netting_is_priority_bu)  THEN
                        - 1 * ( accounted_invoice_amount_ap - lv_ar_netting_rate_51 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar )
                    WHEN abs(lv_ap_netting_is_priority_bu) >= abs(lv_ar_netting_is_priority_bu) THEN
                        lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar - accounted_invoice_amount_ap * lv_ar_netting_rate_51
                END,
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) <= abs(lv_ap_netting_is_priority_bu) THEN
                        lv_ar_netting_le
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu)  THEN
                        lv_ap_netting_le
                END,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN abs(lv_ar_netting_is_priority_bu) <= abs(lv_ap_netting_is_priority_bu) THEN
                        NULL
                    WHEN abs(lv_ar_netting_is_priority_bu) > abs(lv_ap_netting_is_priority_bu)  THEN
                        NULL
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        COMMIT; 

	                --     LV_HEADER_ID  := WSC_AHCS_LSI_HEADER_SEQ.nextval;

	/*				   Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'DR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;

						Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'CR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;    */

  /*                      INSERT INTO WSC_AHCS_INT_STATUS_T(HEADER_ID,
LINE_ID ,
APPLICATION,
FILE_NAME,
BATCH_ID ,
STATUS ,
ACCOUNTING_STATUS ,
CR_DR_INDICATOR,
CURRENCY,
VALUE ,
SOURCE_COA,
TARGET_COA,
ATTRIBUTE2,
CREATED_BY,
CREATED_DATE,
LAST_UPDATED_BY,
LAST_UPDATED_DATE,
ATTRIBUTE11,
ATTRIBUTE3)  
Select LV_HEADER_ID,
                    NET.LSI_NETTING_ENTRY_ID,
                    'Oracle LSI',
                    LV_FILE_NAME,
                    P_BATCH_ID,
                    DECODE(LCT.STATUS,'MATCHED','TRANSFORM_SUCCESS','ERROR','TRANSFORM_FAILED','NEW',NULL,LCT.STATUS),
                    DECODE(LCT.STATUS,'MATCHED',NULL,'NEW',NULL,'ERROR','NULL',LCT.STATUS),
                    decode(sign(NET.ACCOUNTED_AMT),-1,'CR','DR'),
                    NET.ACCOUNTED_CURR,
                    NET.ACCOUNTED_AMT,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    'TRANSFORM_SUCCESS',
                    'FININT',
                    LV_ACC_DATE,
                    'FININT',
                    LV_ACC_DATE,
                    to_date(NET.ACCOUNTING_DATE,'YYYY-MM-DD'),
                    NET.TRANSACTION_NUMBER
            FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
            WHERE LCT.BATCH_ID = NET.BATCH_ID 
            AND LCT.FILE_NAME = NET.FILE_NAME 
            AND LCT.BATCH_ID = P_BATCH_ID 
            AND LCT.FILE_NAME = LV_FILE_NAME	
            AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap;
            commit;
*/

    EXCEPTION
        WHEN lv_exch_rate_excep THEN
            ROLLBACK;
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'ERR_EXCH_NOT_ENABLED',
                'No Exchange Rate Defined for (SC5.2) IC :' || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;

   /*     DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

        WHEN OTHERS THEN
            lv_err_code := sqlcode;
            lv_err_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                lv_err_code,
                lv_err_msg
                || ' for(SC5.2) IC :'
                || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;  

 /* DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

    END;

    PROCEDURE lsi_sc6a1 (
        p_batch_id                       NUMBER,
        ar_ccid                          VARCHAR2,
        ar_ledger                        VARCHAR2,
        functional_currency_code_ar      VARCHAR2,
        accounted_invoice_amount_ar      NUMBER,
        intercompany_legal_entity_ar     VARCHAR2,
        intercompany_transaction_type_ar VARCHAR2,
        invoice_number_ar                VARCHAR2,
        ap_ccid                          VARCHAR2,
        ap_ledger                        VARCHAR2,
        functional_currency_code_ap      VARCHAR2,
        accounted_invoice_amount_ap      NUMBER,
        intercompany_transaction_type_ap VARCHAR2,
        invoice_number_ap                VARCHAR2,
        netting_ar_le                    VARCHAR2,
        netting_ar_ledger                VARCHAR2,
        ar_exchange_rate_netting         VARCHAR2,
        netting_ar_fun_curr              VARCHAR2,
        ap_exchange_rate_netting         VARCHAR2,
        netting_ap_fun_curr              VARCHAR2,
        intercompany_legal_entity_ap     VARCHAR2,
        netting_ap_le                    VARCHAR2,
        netting_ap_ledger                VARCHAR2,
        ap_exchange_rate_type            VARCHAR2,
        ar_exchange_rate_type            VARCHAR2,
        record_type                      VARCHAR2,
        ic_trx_number                    VARCHAR2,
        ap_invoice_id                    NUMBER,
        ar_invoice_id                    NUMBER,
        ap_id2                           NUMBER,
        ar_id2                           NUMBER,
        ap_id3                           NUMBER,
        ar_id3                           NUMBER,
        accounting_period                VARCHAR2,
        icom_batch_number                VARCHAR2
    ) IS

        lv_file_name                   VARCHAR2(100);
        lv_ar_netting_rate_sc5_2       NUMBER(38, 30) := 0;
        lv_ap_netting_netting_le       VARCHAR2(50) := getnettingnettingle(netting_ap_le);
        lv_ar_netting_netting_le       VARCHAR2(50) := getnettingnettingle(netting_ar_le);
        lv_ap_netting_netting_ledger   VARCHAR2(50) := getnettingledger(lv_ap_netting_netting_le);
        lv_ar_netting_netting_ledger   VARCHAR2(50) := getnettingledger(lv_ar_netting_netting_le);
        lv_ap_netting_netting_fun_curr VARCHAR2(50) := getnettingfuncurr(lv_ap_netting_netting_le);
        lv_ar_netting_netting_fun_curr VARCHAR2(50) := getnettingfuncurr(lv_ar_netting_netting_le);
        lv_ar_netting_rate_sc5_3       NUMBER(38, 30) := 0;
        lv_ar_netting_rate_sc5_4       NUMBER(38, 30) := 0;
        lv_ar_netting_rate_sc5_5       NUMBER(38, 30) := 0;
        lv_err_msg                     VARCHAR2(200);
        lv_err_code                    VARCHAR2(50);
        lv_header_id                   NUMBER;
        lv_exch_rate_excep EXCEPTION;
        lv_acc_date                    DATE;
    BEGIN
        BEGIN
            SELECT
                file_name,
                accounting_date
            INTO
                lv_file_name,
                lv_acc_date
            FROM
                wsc_ahcs_lsi_control_t
            WHERE
                batch_id = p_batch_id;

        END;
        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT1', icom_batch_number,
                      lv_acc_date);
              ---Step 3.1 Scenario 6A1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 6A1-Step 03',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            netting_ar_le,
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ar_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT2', icom_batch_number,
                      lv_acc_date);
                               ---Step 3.2 Scenario 6A1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A1-Step 03',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ar != netting_ar_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_2
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ar
                    AND to_currency = netting_ar_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_2 := 1;
        END IF;

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT3', icom_batch_number,
                      lv_acc_date);
                               ---Step 4.1 Scenario 6A1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A1-Step 04',
            'AHCS for Receiver to Receiver Netting',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_2,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT4', icom_batch_number,
                      lv_acc_date);
                               ---Step 4.2 Scenario 6A1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A1-Step 04',
            'AHCS for Receiver to Receiver Netting',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_2,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar,
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT5', icom_batch_number,
                      lv_acc_date);
                               --Step 5.1 Scenario 6A1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A1-Step 05',
            'AHCS for Provider Netting to Receiver Netting Netting',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            netting_ar_fun_curr,
            lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar,
            lv_ap_netting_netting_le,
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            lv_ap_netting_netting_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT6', icom_batch_number,
                      lv_acc_date);
                             --Step 5.2 Scenario 6A1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A1-Step 05',
            'AHCS for Provider Netting to Receiver Netting Netting',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            netting_ar_fun_curr,
            lv_ar_netting_rate_sc5_2 * - 1 * accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            lv_ar_netting_rate_sc5_2 * - 1 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT7', icom_batch_number,
                      lv_acc_date);
                               --Step 6.1 Scenario 6A1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A1-Step 06',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            '0000',
            invoice_number_ar,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT8', icom_batch_number,
                      lv_acc_date);
                             --Step 6.2 Scenario 6A1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A1-Step 06',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            ( - 1 ) * accounted_invoice_amount_ap,
            functional_currency_code_ap,
            ( - 1 ) * accounted_invoice_amount_ap,
            netting_ap_le,
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ap_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

				/*		  Begin
						  select conversion_rate
						  into LV_AR_NETTING_RATE_SC5_4
						  from WSC_AHCS_LSI_EXCHANGE_RATE_T
						  Where From_Currency = functional_Currency_Code_AR
						  AND To_currency= NETTING_AR_FUN_CURR
						  AND conversion_date=to_char(LV_ACC_DATE,'YYYY-MM-DD')
						  AND conversion_rate_type=NVL(AP_EXCHANGE_RATE_TYPE,'Actual Rate');
						  Exception
						  WHEN OTHERS THEN
						  LV_AR_NETTING_RATE_SC5_4 :=1;
						  End; */

        IF functional_currency_code_ap != netting_ap_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_4
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ap
                    AND to_currency = netting_ap_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate'); --'Actual Rate';
            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_4 := 1;
        END IF;

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT9', icom_batch_number,
                      lv_acc_date);
                             --Step 7.1 Scenario 6A1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A1-Step 07',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_4,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT10', icom_batch_number,
                      lv_acc_date);
                             --Step 7.2 Scenario 6A1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A1-Step 07',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_4,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT11', icom_batch_number,
                      lv_acc_date);
                              --Step 8.1 Scenario 6A1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A1-Step 08',
            'AHCS for Receiver Netting to Receiver Netting Netting',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            netting_ap_fun_curr,
            lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT12', icom_batch_number,
                      lv_acc_date);
                             --Step 8.2 Scenario 6A1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A1-Step 08',
            'AHCS for Receiver Netting to Receiver Netting Netting',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            netting_ap_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            lv_ap_netting_netting_le,
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            lv_ap_netting_netting_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ap != lv_ap_netting_netting_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_3
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ap
                    AND to_currency = lv_ap_netting_netting_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_3 := 1;
        END IF;

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT13', icom_batch_number,
                      lv_acc_date);
                            --Step 9.1 Scenario 6A1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A1-Step 09',
            'AHCS for Receiver Netting Netting to Receiver Netting',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_3,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            lv_ap_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ap,
            netting_ap_le,
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ap_le,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = lv_ap_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT14', icom_batch_number,
                      lv_acc_date);
                             --Step 9.2 Scenario 6A1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A1-Step 09',
            'AHCS for Receiver Netting Netting to Receiver Netting',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_3,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            lv_ap_netting_netting_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = lv_ap_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF netting_ar_fun_curr != lv_ap_netting_netting_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_5
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = netting_ar_fun_curr
                    AND to_currency = lv_ap_netting_netting_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_5 := 1;
        END IF;

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT15', icom_batch_number,
                      lv_acc_date);

							--Step 10.1 Scenario 6A1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A1-Step 10',
            'AHCS for Receiver Netting Netting to Provider Netting',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_5,
            'IC Clearing AP AR-IC Clearing AP AR',
            netting_ar_fun_curr,
            lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar,
            lv_ap_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_5 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN netting_ar_fun_curr = lv_ap_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT16', icom_batch_number,
                      lv_acc_date);
                             --Step 10.2 Scenario 6A1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A1-Step 10',
            'AHCS for Receiver Netting Netting to Provider Netting',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_5,
            'AHCS IC AR AP-AHCS IC AR AP',
            netting_ar_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar,
            lv_ap_netting_netting_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_5 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar,
            lv_ar_netting_netting_le,
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            lv_ar_netting_netting_le,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN netting_ar_fun_curr = lv_ap_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT17', icom_batch_number,
                      lv_acc_date);
                           --Step 11.1 Scenario 6A1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A1-Step 11',
            'AHCS FX for Receiver Netting Netting',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            lv_ap_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ap - lv_ar_netting_rate_sc5_5 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar,
            lv_ap_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ap - lv_ar_netting_rate_sc5_5 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT18', icom_batch_number,
                      lv_acc_date);
                             --Step 11.2 Scenario 6A1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A1-Step 11',
            'AHCS FX for Receiver Netting Netting',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS Other FX Acct',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS Other FX Acct-AHCS Other FX Acct',
            lv_ap_netting_netting_fun_curr,
            - 1 * ( lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ap - lv_ar_netting_rate_sc5_5 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar ),
            lv_ap_netting_netting_fun_curr,
            - 1 * ( lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ap - lv_ar_netting_rate_sc5_5 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar ),
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        COMMIT;

	-- LV_HEADER_ID  := WSC_AHCS_LSI_HEADER_SEQ.nextval;

        logging_insert('Oracle LSI', p_batch_id, 1, 'MERGE1', icom_batch_number,
                      lv_acc_date);

 /*                       INSERT INTO WSC_AHCS_INT_STATUS_T(HEADER_ID,
                                                        LINE_ID ,
                                                        APPLICATION,
                                                        FILE_NAME,
                                                        BATCH_ID ,
                                                        STATUS ,
                                                        ACCOUNTING_STATUS ,
                                                        CR_DR_INDICATOR,
                                                        CURRENCY,
                                                        VALUE ,
                                                        SOURCE_COA,
                                                        TARGET_COA,
                                                        ATTRIBUTE2,
                                                        CREATED_BY,
                                                        CREATED_DATE,
                                                        LAST_UPDATED_BY,
                                                        LAST_UPDATED_DATE,
                                                        ATTRIBUTE11,
                                                        ATTRIBUTE3)  
            Select LV_HEADER_ID,
                    NET.LSI_NETTING_ENTRY_ID, --WSC_AHCS_LSI_LINE_SEQ.nextval,
                    'Oracle LSI',
                    LV_FILE_NAME,
                    P_BATCH_ID,
                    DECODE(LCT.STATUS,'MATCHED','TRANSFORM_SUCCESS','ERROR','TRANSFORM_FAILED','NEW',NULL,LCT.STATUS),
                    DECODE(LCT.STATUS,'MATCHED',NULL,'NEW',NULL,'ERROR','NULL',LCT.STATUS),
                    decode(sign(NET.ACCOUNTED_AMT),-1,'CR','DR'),
                    NET.ACCOUNTED_CURR,
                    NET.ACCOUNTED_AMT,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    'TRANSFORM_SUCCESS',
                    'FININT',
                    LV_ACC_DATE,
                    'FININT',
                    LV_ACC_DATE,
                    to_date(NET.ACCOUNTING_DATE,'YYYY-MM-DD'),
                    NET.TRANSACTION_NUMBER
            FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
            WHERE LCT.BATCH_ID = NET.BATCH_ID 
            AND LCT.FILE_NAME = NET.FILE_NAME 
            AND LCT.BATCH_ID = P_BATCH_ID 
            AND LCT.FILE_NAME = LV_FILE_NAME	
            AND NET.IC_BATCH_NUMBER = ICOM_BATCH_NUMBER;
            commit; */

    EXCEPTION
        WHEN lv_exch_rate_excep THEN
            ROLLBACK;
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'ERR_EXCH_NOT_ENABLED',
                'No Exchange Rate Defined for (SC6A1) IC :' || icom_batch_number,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;

      /*  DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=ICOM_BATCH_NUMBER;

       Commit; */

        WHEN OTHERS THEN
            lv_err_code := sqlcode;
            lv_err_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                lv_err_code,
                lv_err_msg
                || ' for(SC6A1) IC :'
                || icom_batch_number,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT; 

 /* DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=ICOM_BATCH_NUMBER;

       Commit; */

    END;

    PROCEDURE lsi_sc6a2 (
        p_batch_id                       NUMBER,
        ar_ccid                          VARCHAR2,
        ar_ledger                        VARCHAR2,
        functional_currency_code_ar      VARCHAR2,
        accounted_invoice_amount_ar      NUMBER,
        intercompany_legal_entity_ar     VARCHAR2,
        intercompany_transaction_type_ar VARCHAR2,
        invoice_number_ar                VARCHAR2,
        ap_ccid                          VARCHAR2,
        ap_ledger                        VARCHAR2,
        functional_currency_code_ap      VARCHAR2,
        accounted_invoice_amount_ap      NUMBER,
        intercompany_transaction_type_ap VARCHAR2,
        invoice_number_ap                VARCHAR2,
        netting_ar_le                    VARCHAR2,
        netting_ar_ledger                VARCHAR2,
        ar_exchange_rate_netting         VARCHAR2,
        netting_ar_fun_curr              VARCHAR2,
        ap_exchange_rate_netting         VARCHAR2,
        netting_ap_fun_curr              VARCHAR2,
        intercompany_legal_entity_ap     VARCHAR2,
        netting_ap_le                    VARCHAR2,
        netting_ap_ledger                VARCHAR2,
        ap_exchange_rate_type            VARCHAR2,
        ar_exchange_rate_type            VARCHAR2,
        record_type                      VARCHAR2,
        ic_trx_number                    VARCHAR2,
        ap_invoice_id                    NUMBER,
        ar_invoice_id                    NUMBER,
        ap_id2                           NUMBER,
        ar_id2                           NUMBER,
        ap_id3                           NUMBER,
        ar_id3                           NUMBER,
        accounting_period                VARCHAR2,
        gl_ic_batch_number               VARCHAR2
    ) IS

        lv_file_name                   VARCHAR2(100);
        lv_ap_netting_rate_sc5_2       NUMBER(38, 30);
        lv_ap_netting_netting_le       VARCHAR2(50) := getnettingnettingle(netting_ap_le);
        lv_ar_netting_netting_le       VARCHAR2(50) := getnettingnettingle(netting_ar_le);
        lv_ap_netting_netting_ledger   VARCHAR2(50) := getnettingledger(lv_ap_netting_netting_le);
        lv_ar_netting_netting_ledger   VARCHAR2(50) := getnettingledger(lv_ar_netting_netting_le);
        lv_ap_netting_netting_fun_curr VARCHAR2(50) := getnettingfuncurr(lv_ap_netting_netting_le);
        lv_ar_netting_netting_fun_curr VARCHAR2(50) := getnettingfuncurr(lv_ar_netting_netting_le);
        lv_ar_netting_rate_sc5_3       NUMBER(38, 30);
        lv_ar_netting_rate_sc5_4       NUMBER(38, 30);
        lv_ar_netting_rate_sc5_5       NUMBER(38, 30);
        lv_err_msg                     VARCHAR2(200);
        lv_err_code                    VARCHAR2(50);
        lv_header_id                   NUMBER;
        lv_exch_rate_excep EXCEPTION;
        lv_acc_date                    DATE;
        temp                           NUMBER;
    BEGIN
        BEGIN
            SELECT
                file_name,
                accounting_date
            INTO
                lv_file_name,
                lv_acc_date
            FROM
                wsc_ahcs_lsi_control_t
            WHERE
                batch_id = p_batch_id;

        END;
        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT1', gl_ic_batch_number,
                      lv_acc_date);
              ---Step 3.1 Scenario 6A2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 6A2-Step 03',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            gl_ic_batch_number,
            p_batch_id,
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT2', gl_ic_batch_number,
                      lv_acc_date);
                               ---Step 3.2 Scenario 6A2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A2-Step 03',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            netting_ap_le,
            invoice_number_ap,
            gl_ic_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ap_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ap != netting_ap_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ap_netting_rate_sc5_2
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ap
                    AND to_currency = netting_ap_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ap_netting_rate_sc5_2 := 1;
        END IF;

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT3', gl_ic_batch_number,
                      lv_acc_date);
                               ---Step 4.1 Scenario 6A2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A2-Step 04',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ap_netting_rate_sc5_2,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            lv_ap_netting_rate_sc5_2 * accounted_invoice_amount_ap,
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            invoice_number_ap,
            gl_ic_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT4', gl_ic_batch_number,
                      lv_acc_date);
                               ---Step 4.2 Scenario 6A2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A2-Step 04',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ap_netting_rate_sc5_2,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            - 1 * lv_ap_netting_rate_sc5_2 * accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            gl_ic_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT5', gl_ic_batch_number,
                      lv_acc_date);
                               --Step 5.1 Scenario 6A2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A2-Step 05',
            'AHCS for Provider Netting to Receiver Netting Netting',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            netting_ap_fun_curr,
            lv_ap_netting_rate_sc5_2 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            lv_ap_netting_rate_sc5_2 * accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            gl_ic_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT6', gl_ic_batch_number,
                      lv_acc_date);
                             --Step 5.2 Scenario 6A2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A2-Step 05',
            'AHCS for Provider Netting to Receiver Netting Netting',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            netting_ap_fun_curr,
            lv_ap_netting_rate_sc5_2 * - 1 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            lv_ap_netting_rate_sc5_2 * - 1 * accounted_invoice_amount_ap,
            lv_ar_netting_netting_le,
            invoice_number_ap,
            gl_ic_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            lv_ar_netting_netting_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT7', gl_ic_batch_number,
                      lv_acc_date);
                               --Step 6.1 Scenario 6A2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A2-Step 06',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            netting_ar_le,
            invoice_number_ar,
            gl_ic_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ar_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT8', gl_ic_batch_number,
                      lv_acc_date);
                             --Step 6.2 Scenario 6A2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A2-Step 06',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            ( - 1 ) * accounted_invoice_amount_ar,
            functional_currency_code_ar,
            ( - 1 ) * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ar,
            gl_ic_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ar != netting_ar_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_4
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ar
                    AND to_currency = netting_ar_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_4 := 1;
        END IF;

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT9', gl_ic_batch_number,
                      lv_acc_date);
                             --Step 7.1 Scenario 6A2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A2-Step 07',
            'AHCS for Provider Netting to Provider',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_4,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ap,
            gl_ic_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT10', gl_ic_batch_number,
                      lv_acc_date);
                             --Step 7.2 Scenario 6A2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A2-Step 07',
            'AHCS for Provider Netting to Provider',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_4,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ar,
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            invoice_number_ap,
            gl_ic_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT11', gl_ic_batch_number,
                      lv_acc_date);
                                --Step 8.1 Scenario 6A2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A2-Step 08',
            'AHCS for Provider Netting to Provider Netting Netting',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            netting_ar_fun_curr,
            lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ar,
            lv_ar_netting_netting_le,
            invoice_number_ap,
            gl_ic_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            lv_ar_netting_netting_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT12', gl_ic_batch_number,
                      lv_acc_date);
                             --Step 8.2 Scenario 6A2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A2-Step 08',
            'AHCS for Provider Netting to Provider Netting Netting',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            netting_ar_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ap,
            gl_ic_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ar != lv_ar_netting_netting_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_3
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ar
                    AND to_currency = lv_ar_netting_netting_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_3 := 1;
        END IF;

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT13', gl_ic_batch_number,
                      lv_acc_date);
                              --Step 9.1 Scenario 6A2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A2-Step 09',
            'AHCS for Provider Netting Netting to Provider Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_3,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            lv_ar_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ap,
            gl_ic_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = lv_ar_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT14', gl_ic_batch_number,
                      lv_acc_date);
                             --Step 9.2 Scenario 6A2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A2-Step 09',
            'AHCS for Provider Netting Netting to Provider Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_3,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            lv_ar_netting_netting_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ar,
            netting_ar_le,
            invoice_number_ap,
            gl_ic_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ar_le,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = lv_ar_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF netting_ap_fun_curr != lv_ar_netting_netting_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_5
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = netting_ap_fun_curr
                    AND to_currency = lv_ar_netting_netting_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_5 := 1;
        END IF;

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT15', gl_ic_batch_number,
                      lv_acc_date);
                                            --Step 10.1 Scenario 6A2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A2-Step 10',
            'AHCS for Provider Netting Netting to Receiver Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_5,
            'AHCS IC AR AP-AHCS IC AR AP',
            netting_ap_fun_curr,
            lv_ap_netting_rate_sc5_2 * accounted_invoice_amount_ap,
            lv_ar_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_5 * lv_ap_netting_rate_sc5_2 * accounted_invoice_amount_ap,
            lv_ap_netting_netting_le,
            invoice_number_ap,
            gl_ic_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            lv_ap_netting_netting_le,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN netting_ap_fun_curr = lv_ar_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT16', gl_ic_batch_number,
                      lv_acc_date);
                             --Step 10.2 Scenario 6A2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A2-Step 10',
            'AHCS for Provider Netting Netting to Receiver Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_5,
            'IC Clearing AP AR-IC Clearing AP AR',
            netting_ap_fun_curr,
            - 1 * lv_ap_netting_rate_sc5_2 * accounted_invoice_amount_ap,
            lv_ar_netting_netting_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_5 * lv_ap_netting_rate_sc5_2 * accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            gl_ic_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN netting_ap_fun_curr = lv_ar_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT17', gl_ic_batch_number,
                      lv_acc_date);
                            --Step 11.1 Scenario 6A2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A2-Step 11',
            'AHCS FX for Provider Netting Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            lv_ar_netting_netting_fun_curr,
            - 1 * ( lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ar - lv_ar_netting_rate_sc5_5 * lv_ap_netting_rate_sc5_2 * accounted_invoice_amount_ap ),
            lv_ar_netting_netting_fun_curr,
            - 1 * ( lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ar - lv_ar_netting_rate_sc5_5 * lv_ap_netting_rate_sc5_2 * accounted_invoice_amount_ap ),
            '0000',
            invoice_number_ap,
            gl_ic_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'iNSERT18', gl_ic_batch_number,
                      lv_acc_date);
                             --Step 11.2 Scenario 6A2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6A2-Step 11',
            'AHCS FX for Provider Netting Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS Other FX Acct',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS Other FX Acct-AHCS Other FX Acct',
            lv_ar_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ar - lv_ar_netting_rate_sc5_5 * lv_ap_netting_rate_sc5_2 * accounted_invoice_amount_ap,
            lv_ar_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ar - lv_ar_netting_rate_sc5_5 * lv_ap_netting_rate_sc5_2 * accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            gl_ic_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        COMMIT;

 --LV_HEADER_ID  := WSC_AHCS_LSI_HEADER_SEQ.nextval;

        logging_insert('Oracle LSI', p_batch_id, 1, 'MERGE1', gl_ic_batch_number,
                      lv_acc_date);
	/*				   Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = IC_BATCH_NUMBER ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'DR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;

                     logging_insert('Oracle LSI',P_BATCH_ID ,1, 'MERGE2',IC_BATCH_NUMBER,LV_ACC_DATE );   

						Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = IC_BATCH_NUMBER ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'CR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;  */
                    /*    SELECT COUNT(*) INTO TEMP FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
            WHERE LCT.BATCH_ID = NET.BATCH_ID 
            AND NET.IC_BATCH_NUMBER = GL_IC_BATCH_NUMBER
            AND LCT.FILE_NAME = NET.FILE_NAME 
            AND LCT.BATCH_ID = P_BATCH_ID 
            AND LCT.FILE_NAME = LV_FILE_NAME; */

   /*                     INSERT INTO WSC_AHCS_INT_STATUS_T(HEADER_ID,
LINE_ID ,
APPLICATION,
FILE_NAME,
BATCH_ID ,
STATUS ,
ACCOUNTING_STATUS ,
CR_DR_INDICATOR,
CURRENCY,
VALUE ,
SOURCE_COA,
TARGET_COA,
ATTRIBUTE2,
CREATED_BY,
CREATED_DATE,
LAST_UPDATED_BY,
LAST_UPDATED_DATE,
ATTRIBUTE11,
ATTRIBUTE3)  
Select LV_HEADER_ID,
                    NET.LSI_NETTING_ENTRY_ID,
                    'Oracle LSI',
                    LV_FILE_NAME,
                    P_BATCH_ID,
                    DECODE(LCT.STATUS,'MATCHED','TRANSFORM_SUCCESS','ERROR','TRANSFORM_FAILED','NEW',NULL,LCT.STATUS),
                    DECODE(LCT.STATUS,'MATCHED',NULL,'NEW',NULL,'ERROR','NULL',LCT.STATUS),
                    decode(sign(NET.ACCOUNTED_AMT),-1,'CR','DR'),
                    NET.ACCOUNTED_CURR,
                    NET.ACCOUNTED_AMT,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    'TRANSFORM_SUCCESS',
                    'FININT',
                    LV_ACC_DATE,
                    'FININT',
                    LV_ACC_DATE,
                    to_date(NET.ACCOUNTING_DATE,'YYYY-MM-DD'),
                    NET.TRANSACTION_NUMBER
            FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
            WHERE LCT.BATCH_ID = NET.BATCH_ID 
            AND LCT.FILE_NAME = NET.FILE_NAME 
            AND LCT.BATCH_ID = P_BATCH_ID 
            AND LCT.FILE_NAME = LV_FILE_NAME	
            AND NET.IC_BATCH_NUMBER = GL_IC_BATCH_NUMBER;

            --logging_insert('Oracle LSI',P_BATCH_ID ,SQl%rowcount, 'HARMAN',IC_BATCH_NUMBER,LV_ACC_DATE );
            commit; */

    EXCEPTION
        WHEN lv_exch_rate_excep THEN
            ROLLBACK;
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'ERR_EXCH_NOT_ENABLED',
                'No Exchange Rate Defined for (SC6A2) IC ' || gl_ic_batch_number,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;

    /*  DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=GL_IC_BATCH_NUMBER;

       Commit;   */

        WHEN OTHERS THEN
            lv_err_code := sqlcode;
            lv_err_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                lv_err_code,
                lv_err_msg
                || ' for(SC6A2) IC :'
                || gl_ic_batch_number,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT; 

  /* DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=GL_IC_BATCH_NUMBER;

       Commit; */

    END;

    PROCEDURE lsi_sc6b1 (
        p_batch_id                       NUMBER,
        ar_ccid                          VARCHAR2,
        ar_ledger                        VARCHAR2,
        functional_currency_code_ar      VARCHAR2,
        accounted_invoice_amount_ar      NUMBER,
        intercompany_legal_entity_ar     VARCHAR2,
        intercompany_transaction_type_ar VARCHAR2,
        invoice_number_ar                VARCHAR2,
        ap_ccid                          VARCHAR2,
        ap_ledger                        VARCHAR2,
        functional_currency_code_ap      VARCHAR2,
        accounted_invoice_amount_ap      NUMBER,
        intercompany_transaction_type_ap VARCHAR2,
        invoice_number_ap                VARCHAR2,
        netting_ar_le                    VARCHAR2,
        netting_ar_ledger                VARCHAR2,
        ar_exchange_rate_netting         VARCHAR2,
        netting_ar_fun_curr              VARCHAR2,
        ap_exchange_rate_netting         VARCHAR2,
        netting_ap_fun_curr              VARCHAR2,
        intercompany_legal_entity_ap     VARCHAR2,
        netting_ap_le                    VARCHAR2,
        netting_ap_ledger                VARCHAR2,
        ap_exchange_rate_type            VARCHAR2,
        ar_exchange_rate_type            VARCHAR2,
        record_type                      VARCHAR2,
        ic_trx_number                    VARCHAR2,
        ap_invoice_id                    NUMBER,
        ar_invoice_id                    NUMBER,
        ap_id2                           NUMBER,
        ar_id2                           NUMBER,
        ap_id3                           NUMBER,
        ar_id3                           NUMBER,
        accounting_period                VARCHAR2,
        icom_batch_number                VARCHAR2
    ) IS

        lv_file_name                   VARCHAR2(100);
        lv_ar_netting_rate_sc5_2       NUMBER(38, 30);
        lv_ap_netting_netting_le       VARCHAR2(50) := getnettingnettingle(netting_ap_le);
        lv_ar_netting_netting_le       VARCHAR2(50) := getnettingnettingle(netting_ar_le);
        lv_ap_netting_netting_ledger   VARCHAR2(50) := getnettingledger(lv_ap_netting_netting_le);
        lv_ar_netting_netting_ledger   VARCHAR2(50) := getnettingledger(lv_ar_netting_netting_le);
        lv_ap_netting_netting_fun_curr VARCHAR2(50) := getnettingfuncurr(lv_ap_netting_netting_le);
        lv_ar_netting_netting_fun_curr VARCHAR2(50) := getnettingfuncurr(lv_ar_netting_netting_le);
        lv_ar_netting_rate_sc5_3       NUMBER(38, 30);
        lv_ar_netting_rate_sc5_4       NUMBER(38, 30);
        lv_ar_netting_rate_sc5_5       NUMBER(38, 30);
        lv_err_msg                     VARCHAR2(200);
        lv_err_code                    VARCHAR2(50);
        lv_header_id                   NUMBER;
        lv_exch_rate_excep EXCEPTION;
        lv_acc_date                    DATE;
    BEGIN
        BEGIN
            SELECT
                file_name,
                accounting_date
            INTO
                lv_file_name,
                lv_acc_date
            FROM
                wsc_ahcs_lsi_control_t
            WHERE
                batch_id = p_batch_id;

        END;

              ---Step 3.1 Scenario 6B1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 6B1-Step 03',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            netting_ar_le,
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ar_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               ---Step 3.2 Scenario 6B1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B1-Step 03',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ar != netting_ar_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_2
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ar
                    AND to_currency = netting_ar_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_2 := 1;
        END IF;
                               ---Step 4.1 Scenario 6B1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B1-Step 04',
            'AHCS for Provider Netting to Provider',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_2,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               ---Step 4.2 Scenario 6B1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B1-Step 04',
            'AHCS for Provider Netting to Provider',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_2,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar,
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               --Step 5.1 Scenario 6B1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B1-Step 05',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            '0000',
            invoice_number_ar,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 5.2 Scenario 6B1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B1-Step 05',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            netting_ap_le,
            invoice_number_ar,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ap_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ap != netting_ap_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_4
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ap
                    AND to_currency = netting_ap_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_4 := 1;
        END IF;


                               --Step 6.1 Scenario 6B1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B1-Step 06',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_4,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            invoice_number_ar,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 6.2 Scenario 6B1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B1-Step 06',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_4,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            ( - 1 ) * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            ( - 1 ) * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 7.1 Scenario 6B1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B1-Step 07',
            'AHCS for Receiver Netting to Receiver Netting Netting',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            netting_ap_fun_curr,
            lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 7.2 Scenario 6B1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B1-Step 07',
            'AHCS for Receiver Netting to Receiver Netting Netting',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            netting_ap_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            lv_ap_netting_netting_le,
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            lv_ap_netting_netting_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ap != lv_ap_netting_netting_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_3
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ap
                    AND to_currency = lv_ap_netting_netting_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_3 := 1;
        END IF;
                              --Step 8.1 Scenario 6B1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B1-Step 08',
            'AHCS for Receiver Netting Netting to Receiver Netting',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_3,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            lv_ap_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_3 * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            netting_ap_le,
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ap_le,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = lv_ap_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 8.2 Scenario 6B1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B1-Step 08',
            'AHCS for Receiver Netting Netting to Receiver Netting',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_3,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            - 1 * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            lv_ap_netting_netting_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_3 * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = lv_ap_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );



                               --Step 9.1 Scenario 6B1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B1-Step 09',
            'AHCS FX for Receiver Netting Netting',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            lv_ap_netting_netting_fun_curr,
            ( - 1 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar + lv_ar_netting_rate_sc5_3 * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap ),
            lv_ap_netting_netting_fun_curr,
            ( - 1 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar + lv_ar_netting_rate_sc5_3 * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap ),
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 9.2 Scenario 6B1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B1-Step 09',
            'AHCS FX for Receiver Netting Netting',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS Other FX Acct',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS Other FX Acct-AHCS Other FX Acct',
            lv_ap_netting_netting_fun_curr,
            - 1 * ( - 1 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar + lv_ar_netting_rate_sc5_3 * lv_ar_netting_rate_sc5_4 *
            accounted_invoice_amount_ap ),
            lv_ap_netting_netting_fun_curr,
            - 1 * ( - 1 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar + lv_ar_netting_rate_sc5_3 * lv_ar_netting_rate_sc5_4 *
            accounted_invoice_amount_ap ),
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        COMMIT;

	              --    LV_HEADER_ID  := WSC_AHCS_LSI_HEADER_SEQ.nextval;

/*					   Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = IC_BATCH_NUMBER ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'DR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit; */

			/*			Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = IC_BATCH_NUMBER ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'CR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;  
  /*                      INSERT INTO WSC_AHCS_INT_STATUS_T(HEADER_ID,
LINE_ID ,
APPLICATION,
FILE_NAME,
BATCH_ID ,
STATUS ,
ACCOUNTING_STATUS ,
CR_DR_INDICATOR,
CURRENCY,
VALUE ,
SOURCE_COA,
TARGET_COA,
ATTRIBUTE2,
CREATED_BY,
CREATED_DATE,
LAST_UPDATED_BY,
LAST_UPDATED_DATE,
ATTRIBUTE11,
ATTRIBUTE3)  
Select LV_HEADER_ID,
                    NET.LSI_NETTING_ENTRY_ID,
                    'Oracle LSI',
                    LV_FILE_NAME,
                    P_BATCH_ID,
                    DECODE(LCT.STATUS,'MATCHED','TRANSFORM_SUCCESS','ERROR','TRANSFORM_FAILED','NEW',NULL,LCT.STATUS),
                    DECODE(LCT.STATUS,'MATCHED',NULL,'NEW',NULL,'ERROR','NULL',LCT.STATUS),
                    decode(sign(NET.ACCOUNTED_AMT),-1,'CR','DR'),
                    NET.ACCOUNTED_CURR,
                    NET.ACCOUNTED_AMT,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    'TRANSFORM_SUCCESS',
                    'FININT',
                    LV_ACC_DATE,
                    'FININT',
                    LV_ACC_DATE,
                    to_date(NET.ACCOUNTING_DATE,'YYYY-MM-DD'),
                    NET.TRANSACTION_NUMBER
            FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
            WHERE LCT.BATCH_ID = NET.BATCH_ID 
            AND LCT.FILE_NAME = NET.FILE_NAME 
            AND LCT.BATCH_ID = P_BATCH_ID 
            AND LCT.FILE_NAME = LV_FILE_NAME	
            AND NET.IC_BATCH_NUMBER = ICOM_BATCH_NUMBER;
            commit; */


    EXCEPTION
        WHEN lv_exch_rate_excep THEN
            ROLLBACK;
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'ERR_EXCH_NOT_ENABLED',
                'No Exchange Rate Defined for (SC6B1) IC :' || icom_batch_number,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;

     /*   DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=ICOM_BATCH_NUMBER;

       Commit; */

        WHEN OTHERS THEN
            lv_err_code := sqlcode;
            lv_err_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                lv_err_code,
                lv_err_msg
                || ' for(SC6B1) IC :'
                || icom_batch_number,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;   

 /* DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=ICOM_BATCH_NUMBER;

       Commit; */

    END;

    PROCEDURE lsi_sc6b2 (
        p_batch_id                       NUMBER,
        ar_ccid                          VARCHAR2,
        ar_ledger                        VARCHAR2,
        functional_currency_code_ar      VARCHAR2,
        accounted_invoice_amount_ar      NUMBER,
        intercompany_legal_entity_ar     VARCHAR2,
        intercompany_transaction_type_ar VARCHAR2,
        invoice_number_ar                VARCHAR2,
        ap_ccid                          VARCHAR2,
        ap_ledger                        VARCHAR2,
        functional_currency_code_ap      VARCHAR2,
        accounted_invoice_amount_ap      NUMBER,
        intercompany_transaction_type_ap VARCHAR2,
        invoice_number_ap                VARCHAR2,
        netting_ar_le                    VARCHAR2,
        netting_ar_ledger                VARCHAR2,
        ar_exchange_rate_netting         VARCHAR2,
        netting_ar_fun_curr              VARCHAR2,
        ap_exchange_rate_netting         VARCHAR2,
        netting_ap_fun_curr              VARCHAR2,
        intercompany_legal_entity_ap     VARCHAR2,
        netting_ap_le                    VARCHAR2,
        netting_ap_ledger                VARCHAR2,
        ap_exchange_rate_type            VARCHAR2,
        ar_exchange_rate_type            VARCHAR2,
        record_type                      VARCHAR2,
        ic_trx_number                    VARCHAR2,
        ap_invoice_id                    NUMBER,
        ar_invoice_id                    NUMBER,
        ap_id2                           NUMBER,
        ar_id2                           NUMBER,
        ap_id3                           NUMBER,
        ar_id3                           NUMBER,
        accounting_period                VARCHAR2,
        icom_batch_number                VARCHAR2
    ) IS

        lv_file_name                   VARCHAR2(100);
        lv_ap_netting_rate_sc5_2       NUMBER(38, 30);
        lv_ap_netting_netting_le       VARCHAR2(50) := getnettingnettingle(netting_ap_le);
        lv_ar_netting_netting_le       VARCHAR2(50) := getnettingnettingle(netting_ar_le);
        lv_ap_netting_netting_ledger   VARCHAR2(50) := getnettingledger(lv_ap_netting_netting_le);
        lv_ar_netting_netting_ledger   VARCHAR2(50) := getnettingledger(lv_ar_netting_netting_le);
        lv_ap_netting_netting_fun_curr VARCHAR2(50) := getnettingfuncurr(lv_ap_netting_netting_le);
        lv_ar_netting_netting_fun_curr VARCHAR2(50) := getnettingfuncurr(lv_ar_netting_netting_le);
        lv_ar_netting_rate_sc5_3       NUMBER(38, 30);
        lv_ar_netting_rate_sc5_4       NUMBER(38, 30);
        lv_ar_netting_rate_sc5_5       NUMBER(38, 30);
        lv_err_msg                     VARCHAR2(200);
        lv_err_code                    VARCHAR2(50);
        lv_header_id                   NUMBER;
        lv_exch_rate_excep EXCEPTION;
        lv_acc_date                    DATE;
    BEGIN
        BEGIN
            SELECT
                file_name,
                accounting_date
            INTO
                lv_file_name,
                lv_acc_date
            FROM
                wsc_ahcs_lsi_control_t
            WHERE
                batch_id = p_batch_id;

        END;

              ---Step 3.1 Scenario 6B2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 6B2-Step 03',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               ---Step 3.2 Scenario 6B2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B2-Step 03',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            netting_ap_le,
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ap_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ap != netting_ap_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ap_netting_rate_sc5_2
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ap
                    AND to_currency = netting_ap_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ap_netting_rate_sc5_2 := 1;
        END IF;

                               ---Step 4.1 Scenario 6B2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B2-Step 04',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ap_netting_rate_sc5_2,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            lv_ap_netting_rate_sc5_2 * accounted_invoice_amount_ap,
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               ---Step 4.2 Scenario 6B2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B2-Step 04',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ap_netting_rate_sc5_2,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            - 1 * lv_ap_netting_rate_sc5_2 * accounted_invoice_amount_ap,
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               --Step 5.1 Scenario 6B2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B2-Step 05',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            netting_ar_le,
            invoice_number_ar,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ar_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 5.2 Scenario 6B2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B2-Step 05',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ar,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ar != netting_ar_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_4
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ar
                    AND to_currency = netting_ar_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_4 := 1;
        END IF;

                               --Step 6.1 Scenario 6B2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B2-Step 06',
            'AHCS for Provider Netting to Provider',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_4,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ar,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 6.2 Scenario 6B2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B2-Step 06',
            'AHCS for Provider Netting to Provider',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_4,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            ( - 1 ) * accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            ( - 1 ) * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ar,
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );


                             --Step 7.1 Scenario 6B2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B2-Step 07',
            'AHCS for Provider Netting to Provider Netting Netting',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            netting_ar_fun_curr,
            accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ar,
            lv_ar_netting_netting_le,
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            lv_ar_netting_netting_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 7.2 Scenario 6B2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B2-Step 07',
            'AHCS for Provider Netting to Provider Netting Netting',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            netting_ar_fun_curr,
            - 1 * accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ar != lv_ar_netting_netting_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_3
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ar
                    AND to_currency = lv_ar_netting_netting_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_3 := 1;
        END IF;

                                --Step 8.1 Scenario 6B2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B2-Step 08',
            'AHCS for Provider Netting Netting to Provider Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_3,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ar,
            lv_ar_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_3 * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ar,
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = lv_ar_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 8.2 Scenario 6B2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B2-Step 08',
            'AHCS for Provider Netting Netting to Provider Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_3,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            - 1 * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ar,
            lv_ar_netting_netting_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_4 * lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ar,
            netting_ar_le,
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ar_le,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = lv_ar_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );


                              --Step 9.1 Scenario 6B2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B2-Step 09',
            'AHCS for Provider Netting Netting to Provider Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            lv_ar_netting_netting_fun_curr,
            ( - 1 * lv_ar_netting_rate_sc5_4 * lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ar + lv_ap_netting_rate_sc5_2 * accounted_invoice_amount_ap ),
            lv_ar_netting_netting_fun_curr,
            ( - 1 * lv_ar_netting_rate_sc5_4 * lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ar + lv_ap_netting_rate_sc5_2 * accounted_invoice_amount_ap ),
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 9.2 Scenario 6B2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            scenario,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            lsi_netting_entry_id,
            accounting_date,
            event_type,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            'Scenario 6B2-Step 09',
            'AHCS FX for Provider Netting Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS Other FX Acct',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS Other FX Acct-AHCS Other FX Acct',
            lv_ar_netting_netting_fun_curr,
            - 1 * ( - 1 * lv_ar_netting_rate_sc5_4 * lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ar + lv_ap_netting_rate_sc5_2 *
            accounted_invoice_amount_ap ),
            lv_ar_netting_netting_fun_curr,
            - 1 * ( - 1 * lv_ar_netting_rate_sc5_4 * lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ar + lv_ap_netting_rate_sc5_2 *
            accounted_invoice_amount_ap ),
            '0000',
            invoice_number_ap,
            icom_batch_number,
            p_batch_id,
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            'LSI_LIABILITY_SWITCH',
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        COMMIT;
        lv_header_id := wsc_ahcs_lsi_header_seq.nextval;

	/*				   Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = IC_BATCH_NUMBER ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'DR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;

						Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = IC_BATCH_NUMBER ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'CR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;     */

/*INSERT INTO WSC_AHCS_INT_STATUS_T(HEADER_ID,
LINE_ID ,
APPLICATION,
FILE_NAME,
BATCH_ID ,
STATUS ,
ACCOUNTING_STATUS ,
CR_DR_INDICATOR,
CURRENCY,
VALUE ,
SOURCE_COA,
TARGET_COA,
ATTRIBUTE2,
CREATED_BY,
CREATED_DATE,
LAST_UPDATED_BY,
LAST_UPDATED_DATE,
ATTRIBUTE11,
ATTRIBUTE3)  
Select LV_HEADER_ID,
                    NET.LSI_NETTING_ENTRY_ID,
                    'Oracle LSI',
                    LV_FILE_NAME,
                    P_BATCH_ID,
                    DECODE(LCT.STATUS,'MATCHED','TRANSFORM_SUCCESS','ERROR','TRANSFORM_FAILED','NEW',NULL,LCT.STATUS),
                    DECODE(LCT.STATUS,'MATCHED',NULL,'NEW',NULL,'ERROR','NULL',LCT.STATUS),
                    decode(sign(NET.ACCOUNTED_AMT),-1,'CR','DR'),
                    NET.ACCOUNTED_CURR,
                    NET.ACCOUNTED_AMT,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    'TRANSFORM_SUCCESS',
                    'FININT',
                    LV_ACC_DATE,
                    'FININT',
                    LV_ACC_DATE,
                    to_date(NET.ACCOUNTING_DATE,'YYYY-MM-DD'),
                    NET.TRANSACTION_NUMBER
            FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
            WHERE LCT.BATCH_ID = NET.BATCH_ID 
            AND LCT.FILE_NAME = NET.FILE_NAME 
            AND LCT.BATCH_ID = P_BATCH_ID 
            AND LCT.FILE_NAME = LV_FILE_NAME	
            AND NET.IC_BATCH_NUMBER = ICOM_BATCH_NUMBER;
            commit; */

    EXCEPTION
        WHEN lv_exch_rate_excep THEN
            ROLLBACK;
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'ERR_EXCH_NOT_ENABLED',
                'No Exchange Rate Defined for (SC6B2) IC :' || icom_batch_number,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;

   /*     DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=ICOM_BATCH_NUMBER;

       Commit; */

        WHEN OTHERS THEN
            lv_err_code := sqlcode;
            lv_err_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                lv_err_code,
                lv_err_msg
                || ' for(SC6B2) IC :'
                || icom_batch_number,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;    

 /* DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=ICOM_BATCH_NUMBER;

       Commit; */

    END;

    PROCEDURE lsi_sc7a1 (
        p_batch_id                       NUMBER,
        ar_ccid                          VARCHAR2,
        ar_ledger                        VARCHAR2,
        functional_currency_code_ar      VARCHAR2,
        accounted_invoice_amount_ar      NUMBER,
        intercompany_batch_number_ap     VARCHAR2,
        intercompany_legal_entity_ar     VARCHAR2,
        intercompany_transaction_type_ar VARCHAR2,
        invoice_number_ar                VARCHAR2,
        ap_ccid                          VARCHAR2,
        ap_ledger                        VARCHAR2,
        functional_currency_code_ap      VARCHAR2,
        accounted_invoice_amount_ap      NUMBER,
        intercompany_transaction_type_ap VARCHAR2,
        invoice_number_ap                VARCHAR2,
        netting_ar_le                    VARCHAR2,
        netting_ar_ledger                VARCHAR2,
        ar_exchange_rate_netting         VARCHAR2,
        netting_ar_fun_curr              VARCHAR2,
        ap_exchange_rate_netting         VARCHAR2,
        netting_ap_fun_curr              VARCHAR2,
        intercompany_legal_entity_ap     VARCHAR2,
        netting_ap_le                    VARCHAR2,
        netting_ap_ledger                VARCHAR2,
        ap_exchange_rate_type            VARCHAR2,
        ar_exchange_rate_type            VARCHAR2,
        record_type                      VARCHAR2,
        ic_trx_number                    VARCHAR2,
        ap_invoice_id                    NUMBER,
        ar_invoice_id                    NUMBER,
        ap_id2                           NUMBER,
        ar_id2                           NUMBER,
        ap_id3                           NUMBER,
        ar_id3                           NUMBER,
        accounting_period                VARCHAR2
    ) IS

        lv_file_name                   VARCHAR2(100);
        lv_ar_netting_rate_sc5_2       NUMBER(38, 30);
        lv_ar_netting_rate_sc5_4       NUMBER(38, 30);
        lv_ar_netting_rate_sc5_1       NUMBER(38, 30);
        lv_ap_netting_netting_le       VARCHAR2(50) := getnettingnettingle(netting_ap_le);
        lv_ar_netting_netting_le       VARCHAR2(50) := getnettingnettingle(netting_ar_le);
        lv_ap_netting_netting_ledger   VARCHAR2(50) := getnettingledger(lv_ap_netting_netting_le);
        lv_ar_netting_netting_ledger   VARCHAR2(50) := getnettingledger(lv_ar_netting_netting_le);
        lv_ap_netting_netting_fun_curr VARCHAR2(50) := getnettingfuncurr(lv_ap_netting_netting_le);
        lv_ar_netting_netting_fun_curr VARCHAR2(50) := getnettingfuncurr(lv_ar_netting_netting_le);
        lv_ar_netting_rate_sc5_6       NUMBER(38, 30);
        lv_err_msg                     VARCHAR2(200);
        lv_err_code                    VARCHAR2(50);
        lv_header_id                   NUMBER;
        lv_exch_rate_excep EXCEPTION;
        lv_acc_date                    DATE;
    BEGIN
        BEGIN
            SELECT
                file_name,
                accounting_date
            INTO
                lv_file_name,
                lv_acc_date
            FROM
                wsc_ahcs_lsi_control_t
            WHERE
                batch_id = p_batch_id;

        END;

              ---Step 3.1 Scenario 7A_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_1-Step 03',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ar,
            intercompany_batch_number_ap,
            p_batch_id,
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               ---Step 3.2 Scenario 7A_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_1-Step 03',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            netting_ap_le,
            invoice_number_ar,
            intercompany_batch_number_ap,
            p_batch_id,
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ap_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ap != netting_ap_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_2
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ap
                    AND to_currency = netting_ap_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_2 := 1;
        END IF;
                               ---Step 4.1 Scenario 7A_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_1-Step 04',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_2,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               ---Step 4.2 Scenario 7A_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_1-Step 04',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_2,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               --Step 5.1 Scenario 7A_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_1-Step 05',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting to Receiver Netting Netting',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            netting_ap_fun_curr,
            accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 5.2 Scenario 7A_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_1-Step 05',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting to Receiver Netting Netting',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            netting_ap_fun_curr,
            - 1 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            - 1 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ap_netting_netting_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            lv_ap_netting_netting_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ap != lv_ap_netting_netting_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_6
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ap
                    AND to_currency = lv_ap_netting_netting_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_6 := 1;
        END IF;
                               --Step 6.1 Scenario 7A_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_1-Step 06',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting Netting to Receiver Netting',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_6,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            lv_ap_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_6 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            netting_ap_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ap_le,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = lv_ap_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 6.2 Scenario 7A_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_1-Step 06',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting Netting to Receiver Netting',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_6,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            lv_ap_netting_netting_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_6 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = lv_ap_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 7.1 Scenario 7A_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_1-Step 07',
            'LSI_LIABILITY_SWITCH',
            'AHCS FX for Receiver Netting Netting',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            lv_ap_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_6 * accounted_invoice_amount_ap - accounted_invoice_amount_ar,
            lv_ap_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_6 * accounted_invoice_amount_ap - accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        ); 

                             --Step 7.2 Scenario 7A_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_1-Step 07',
            'LSI_LIABILITY_SWITCH',
            'AHCS FX for Receiver Netting Netting',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS Other FX Acct',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS Other FX Acct-AHCS Other FX Acct',
            lv_ap_netting_netting_fun_curr,
            ( accounted_invoice_amount_ar - lv_ar_netting_rate_sc5_6 * accounted_invoice_amount_ap ),
            lv_ap_netting_netting_fun_curr,
            ( accounted_invoice_amount_ar - lv_ar_netting_rate_sc5_6 * accounted_invoice_amount_ap ),
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        COMMIT;

	                   --       LV_HEADER_ID  := WSC_AHCS_LSI_HEADER_SEQ.nextval;

/*				   Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'DR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;

						Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'CR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;  */

      /*                  INSERT INTO WSC_AHCS_INT_STATUS_T(HEADER_ID,
LINE_ID ,
APPLICATION,
FILE_NAME,
BATCH_ID ,
STATUS ,
ACCOUNTING_STATUS ,
CR_DR_INDICATOR,
CURRENCY,
VALUE ,
SOURCE_COA,
TARGET_COA,
ATTRIBUTE2,
CREATED_BY,
CREATED_DATE,
LAST_UPDATED_BY,
LAST_UPDATED_DATE,
ATTRIBUTE11,
ATTRIBUTE3)  
Select LV_HEADER_ID,
                    NET.LSI_NETTING_ENTRY_ID,
                    'Oracle LSI',
                    LV_FILE_NAME,
                    P_BATCH_ID,
                    DECODE(LCT.STATUS,'MATCHED','TRANSFORM_SUCCESS','ERROR','TRANSFORM_FAILED','NEW',NULL,LCT.STATUS),
                    DECODE(LCT.STATUS,'MATCHED',NULL,'NEW',NULL,'ERROR','NULL',LCT.STATUS),
                    decode(sign(NET.ACCOUNTED_AMT),-1,'CR','DR'),
                    NET.ACCOUNTED_CURR,
                    NET.ACCOUNTED_AMT,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    'TRANSFORM_SUCCESS',
                    'FININT',
                    LV_ACC_DATE,
                    'FININT',
                    LV_ACC_DATE,
                    to_date(NET.ACCOUNTING_DATE,'YYYY-MM-DD'),
                    NET.TRANSACTION_NUMBER
            FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
            WHERE LCT.BATCH_ID = NET.BATCH_ID 
            AND LCT.FILE_NAME = NET.FILE_NAME 
            AND LCT.BATCH_ID = P_BATCH_ID 
            AND LCT.FILE_NAME = LV_FILE_NAME	
            AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap;
            commit; */

    EXCEPTION
        WHEN lv_exch_rate_excep THEN
            ROLLBACK;
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'ERR_EXCH_NOT_ENABLED',
                'No Exchange Rate Defined for (SC7A1) IC :' || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;

      /*   DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

        WHEN OTHERS THEN
            lv_err_code := sqlcode;
            lv_err_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                lv_err_code,
                lv_err_msg
                || ' (SC7A1) IC :'
                || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;  

 /*   DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

    END;

    PROCEDURE lsi_sc7a2 (
        p_batch_id                       NUMBER,
        ar_ccid                          VARCHAR2,
        ar_ledger                        VARCHAR2,
        functional_currency_code_ar      VARCHAR2,
        accounted_invoice_amount_ar      NUMBER,
        intercompany_batch_number_ap     VARCHAR2,
        intercompany_legal_entity_ar     VARCHAR2,
        intercompany_transaction_type_ar VARCHAR2,
        invoice_number_ar                VARCHAR2,
        ap_ccid                          VARCHAR2,
        ap_ledger                        VARCHAR2,
        functional_currency_code_ap      VARCHAR2,
        accounted_invoice_amount_ap      NUMBER,
        intercompany_transaction_type_ap VARCHAR2,
        invoice_number_ap                VARCHAR2,
        netting_ar_le                    VARCHAR2,
        netting_ar_ledger                VARCHAR2,
        ar_exchange_rate_netting         VARCHAR2,
        netting_ar_fun_curr              VARCHAR2,
        ap_exchange_rate_netting         VARCHAR2,
        netting_ap_fun_curr              VARCHAR2,
        intercompany_legal_entity_ap     VARCHAR2,
        netting_ap_le                    VARCHAR2,
        netting_ap_ledger                VARCHAR2,
        ap_exchange_rate_type            VARCHAR2,
        ar_exchange_rate_type            VARCHAR2,
        record_type                      VARCHAR2,
        ic_trx_number                    VARCHAR2,
        ap_invoice_id                    NUMBER,
        ar_invoice_id                    NUMBER,
        ap_id2                           NUMBER,
        ar_id2                           NUMBER,
        ap_id3                           NUMBER,
        ar_id3                           NUMBER,
        accounting_period                VARCHAR2
    ) IS

        lv_file_name                   VARCHAR2(100);
        lv_ar_netting_rate_sc5_2       NUMBER(38, 30);
        lv_ap_netting_netting_le       VARCHAR2(50) := getnettingnettingle(netting_ap_le);
        lv_ar_netting_netting_le       VARCHAR2(50) := getnettingnettingle(netting_ar_le);
        lv_ap_netting_netting_ledger   VARCHAR2(50) := getnettingledger(lv_ap_netting_netting_le);
        lv_ar_netting_netting_ledger   VARCHAR2(50) := getnettingledger(lv_ar_netting_netting_le);
        lv_ap_netting_netting_fun_curr VARCHAR2(50) := getnettingfuncurr(lv_ap_netting_netting_le);
        lv_ar_netting_netting_fun_curr VARCHAR2(50) := getnettingfuncurr(lv_ar_netting_netting_le);
        lv_ar_netting_rate_sc5_1       NUMBER(38, 30);
        lv_err_msg                     VARCHAR2(200);
        lv_err_code                    VARCHAR2(50);
        lv_header_id                   NUMBER;
        lv_exch_rate_excep EXCEPTION;
        lv_acc_date                    DATE;
    BEGIN
        BEGIN
            SELECT
                file_name,
                accounting_date
            INTO
                lv_file_name,
                lv_acc_date
            FROM
                wsc_ahcs_lsi_control_t
            WHERE
                batch_id = p_batch_id;

        END;

              ---Step 3.1 Scenario 7A_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_2-Step 03',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            netting_ar_le,
            invoice_number_ar,
            intercompany_batch_number_ap,
            p_batch_id,
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ar_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               ---Step 3.2 Scenario 7A_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_2-Step 03',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ar,
            intercompany_batch_number_ap,
            p_batch_id,
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

              /*       Begin
                              select conversion_rate
                              into LV_AR_NETTING_RATE_SC5_2
                              from WSC_AHCS_LSI_EXCHANGE_RATE_T
                              Where From_Currency = functional_Currency_Code_AR
                              AND To_currency= NETTING_AR_FUN_CURR
                              AND conversion_date=to_char(LV_ACC_DATE,'YYYY-MM-DD')
                              AND conversion_rate_type=NVL(AR_EXCHANGE_RATE_TYPE,'Actual Rate');
                              Exception
                              WHEN OTHERS THEN
                              LV_AR_NETTING_RATE_SC5_2 :=1;
                       End;  */

        IF functional_currency_code_ar != netting_ar_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_2
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ar
                    AND to_currency = netting_ar_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate'); --'Actual Rate';
            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_2 := 1;
        END IF;            

                               ---Step 4.1 Scenario 7A_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_2-Step 04',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting to Provider',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_2,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ar,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               ---Step 4.2 Scenario 7A_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_2-Step 04',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting to Provider',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_2,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            lv_ar_netting_rate_sc5_2 * - 1 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               --Step 5.1 Scenario 7A_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_2-Step 05',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting to Provider Netting Netting',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            netting_ar_fun_curr,
            accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_netting_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            lv_ar_netting_netting_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 5.2 Scenario 7A_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_2-Step 05',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting to Provider Netting Netting',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            netting_ar_fun_curr,
            - 1 * accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            - 1 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

              /*      Begin
                      select conversion_rate
                      into LV_AR_NETTING_RATE_SC5_1
                      from WSC_AHCS_LSI_EXCHANGE_RATE_T
                      Where From_Currency = functional_Currency_Code_AR
                      AND To_currency= LV_AP_NETTING_NETTING_FUN_CURR
                      AND conversion_date=to_char(LV_ACC_DATE,'YYYY-MM-DD')
                      AND conversion_rate_type=NVL(AP_EXCHANGE_RATE_TYPE,'Actual Rate');
                      Exception
                      WHEN OTHERS THEN
                      LV_AR_NETTING_RATE_SC5_1 :=1;
                    End;   */

        IF functional_currency_code_ar != lv_ap_netting_netting_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_1
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ar
                    AND to_currency = lv_ap_netting_netting_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate'); --'Actual Rate';
            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_1 := 1;
        END IF;


                               --Step 6.1 Scenario 7A_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_2-Step 06',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting Netting to Provider Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            lv_ap_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_1 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = lv_ap_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 6.2 Scenario 7A_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_2-Step 06',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting Netting to Provider Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            lv_ar_netting_netting_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_1 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            netting_ar_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ar_le,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = lv_ar_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 7.1 Scenario 7A_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_2-Step 07',
            'LSI_LIABILITY_SWITCH',
            'AHCS FX for Provider Netting Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            lv_ar_netting_netting_fun_curr,
            accounted_invoice_amount_ap - lv_ar_netting_rate_sc5_1 * accounted_invoice_amount_ar,
            lv_ar_netting_netting_fun_curr,
            accounted_invoice_amount_ap - lv_ar_netting_rate_sc5_1 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        ); 

                             --Step 7.2 Scenario 7A_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7A_2-Step 07',
            'LSI_LIABILITY_SWITCH',
            'AHCS FX for Provider Netting Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS Other FX Acct',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS Other FX Acct-AHCS Other FX Acct',
            lv_ar_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_1 * accounted_invoice_amount_ar - accounted_invoice_amount_ap,
            lv_ar_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_1 * accounted_invoice_amount_ar - accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        COMMIT; 

                     -- LV_HEADER_ID  := WSC_AHCS_LSI_HEADER_SEQ.nextval;

/*					   Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'DR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;

						Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'CR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit; */
  /*                      INSERT INTO WSC_AHCS_INT_STATUS_T(HEADER_ID,
LINE_ID ,
APPLICATION,
FILE_NAME,
BATCH_ID ,
STATUS ,
ACCOUNTING_STATUS ,
CR_DR_INDICATOR,
CURRENCY,
VALUE ,
SOURCE_COA,
TARGET_COA,
ATTRIBUTE2,
CREATED_BY,
CREATED_DATE,
LAST_UPDATED_BY,
LAST_UPDATED_DATE,
ATTRIBUTE11,
ATTRIBUTE3)  
Select LV_HEADER_ID,
                    NET.LSI_NETTING_ENTRY_ID,
                    'Oracle LSI',
                    LV_FILE_NAME,
                    P_BATCH_ID,
                    DECODE(LCT.STATUS,'MATCHED','TRANSFORM_SUCCESS','ERROR','TRANSFORM_FAILED','NEW',NULL,LCT.STATUS),
                    DECODE(LCT.STATUS,'MATCHED',NULL,'NEW',NULL,'ERROR','NULL',LCT.STATUS),
                    decode(sign(NET.ACCOUNTED_AMT),-1,'CR','DR'),
                    NET.ACCOUNTED_CURR,
                    NET.ACCOUNTED_AMT,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    'TRANSFORM_SUCCESS',
                    'FININT',
                    LV_ACC_DATE,
                    'FININT',
                    LV_ACC_DATE,
                    to_date(NET.ACCOUNTING_DATE,'YYYY-MM-DD'),
                    NET.TRANSACTION_NUMBER
            FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
            WHERE LCT.BATCH_ID = NET.BATCH_ID 
            AND LCT.FILE_NAME = NET.FILE_NAME 
            AND LCT.BATCH_ID = P_BATCH_ID 
            AND LCT.FILE_NAME = LV_FILE_NAME	
            AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap;
            commit; */


    EXCEPTION
        WHEN lv_exch_rate_excep THEN
            ROLLBACK;
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'ERR_EXCH_NOT_ENABLED',
                'No Exchange Rate Defined for (SC7A2) IC :' || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;

        /*  DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

        WHEN OTHERS THEN
            lv_err_code := sqlcode;
            lv_err_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                lv_err_code,
                lv_err_msg
                || ' (SC7A2) IC :'
                || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT; 

   /* DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

    END;

    PROCEDURE lsi_sc7b1 (
        p_batch_id                       NUMBER,
        ar_ccid                          VARCHAR2,
        ar_ledger                        VARCHAR2,
        functional_currency_code_ar      VARCHAR2,
        accounted_invoice_amount_ar      NUMBER,
        intercompany_batch_number_ap     VARCHAR2,
        intercompany_legal_entity_ar     VARCHAR2,
        intercompany_transaction_type_ar VARCHAR2,
        invoice_number_ar                VARCHAR2,
        ap_ccid                          VARCHAR2,
        ap_ledger                        VARCHAR2,
        functional_currency_code_ap      VARCHAR2,
        accounted_invoice_amount_ap      NUMBER,
        intercompany_transaction_type_ap VARCHAR2,
        invoice_number_ap                VARCHAR2,
        netting_ar_le                    VARCHAR2,
        netting_ar_ledger                VARCHAR2,
        ar_exchange_rate_netting         VARCHAR2,
        netting_ar_fun_curr              VARCHAR2,
        ap_exchange_rate_netting         VARCHAR2,
        netting_ap_fun_curr              VARCHAR2,
        intercompany_legal_entity_ap     VARCHAR2,
        netting_ap_le                    VARCHAR2,
        netting_ap_ledger                VARCHAR2,
        ap_exchange_rate_type            VARCHAR2,
        ar_exchange_rate_type            VARCHAR2,
        record_type                      VARCHAR2,
        ic_trx_number                    VARCHAR2,
        ap_invoice_id                    NUMBER,
        ar_invoice_id                    NUMBER,
        ap_id2                           NUMBER,
        ar_id2                           NUMBER,
        ap_id3                           NUMBER,
        ar_id3                           NUMBER,
        accounting_period                VARCHAR2
    ) IS

        lv_file_name                   VARCHAR2(100);
        lv_ar_netting_rate_sc5_2       NUMBER(38, 30);
        lv_ap_netting_netting_le       VARCHAR2(50) := getnettingnettingle(netting_ap_le);
        lv_ar_netting_netting_le       VARCHAR2(50) := getnettingnettingle(netting_ar_le);
        lv_ap_netting_netting_ledger   VARCHAR2(50) := getnettingledger(lv_ap_netting_netting_le);
        lv_ar_netting_netting_ledger   VARCHAR2(50) := getnettingledger(lv_ar_netting_netting_le);
        lv_ap_netting_netting_fun_curr VARCHAR2(50) := getnettingfuncurr(lv_ap_netting_netting_le);
        lv_ar_netting_netting_fun_curr VARCHAR2(50) := getnettingfuncurr(lv_ar_netting_netting_le);
        lv_ar_netting_rate_sc5_3       NUMBER(38, 30);
        lv_ar_netting_rate_sc5_4       NUMBER(38, 30);
        lv_ar_netting_rate_sc5_5       NUMBER(38, 30);
        lv_err_msg                     VARCHAR2(200);
        lv_err_code                    VARCHAR2(50);
        lv_header_id                   NUMBER;
        lv_exch_rate_excep EXCEPTION;
        lv_acc_date                    DATE;
    BEGIN
        BEGIN
            SELECT
                file_name,
                accounting_date
            INTO
                lv_file_name,
                lv_acc_date
            FROM
                wsc_ahcs_lsi_control_t
            WHERE
                batch_id = p_batch_id;

        END;

              ---Step 3.1 Scenario 7B_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_1-Step 03',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'INSERT1', intercompany_batch_number_ap,
                      lv_acc_date);  
                               ---Step 3.2 Scenario 7B_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_1-Step 03',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            netting_ap_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ap_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'INSERT2', intercompany_batch_number_ap,
                      lv_acc_date);
        IF functional_currency_code_ap != netting_ap_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_2
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ap
                    AND to_currency = netting_ap_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_2 := 1;
        END IF;
                               ---Step 4.1 Scenario 7B_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_1-Step 04',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_2,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'INSERT3', intercompany_batch_number_ap,
                      lv_acc_date);            

                               ---Step 4.2 Scenario 7B_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_1-Step 04',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_2,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'INSERT4', intercompany_batch_number_ap,
                      lv_acc_date); 
                               --Step 5.1 Scenario 7B_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_1-Step 05',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting to Receiver Netting Netting',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            netting_ap_fun_curr,
            accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'INSERT5', intercompany_batch_number_ap,
                      lv_acc_date);                 

                             --Step 5.2 Scenario 7B_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_1-Step 05',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting to Receiver Netting Netting',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            netting_ap_fun_curr,
            - 1 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            - 1 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ap_netting_netting_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            lv_ap_netting_netting_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'INSERT6', intercompany_batch_number_ap,
                      lv_acc_date); 

                               --Step 6.1 Scenario 7B_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_1-Step 06',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider to Receiver Netting Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ap_netting_netting_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            lv_ap_netting_netting_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'INSERT7', intercompany_batch_number_ap,
                      lv_acc_date); 

                             --Step 6.2 Scenario 7B_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_1-Step 06',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider to Receiver Netting Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'INSERT8', intercompany_batch_number_ap,
                      lv_acc_date);
        IF functional_currency_code_ar != netting_ar_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_4
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ar
                    AND to_currency = netting_ar_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_4 := 1;
        END IF;

        logging_insert('Oracle LSI', p_batch_id, 1, 'INSERT8', intercompany_batch_number_ap,
                      lv_acc_date); 
                             --Step 7.1 Scenario 7B_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_1-Step 07',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting Netting to Provider',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_4,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'INSERT9', intercompany_batch_number_ap,
                      lv_acc_date); 
                             --Step 7.2 Scenario 7B_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_1-Step 07',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting Netting to Provider',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_4,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'INSERT10', intercompany_batch_number_ap,
                      lv_acc_date);
        IF functional_currency_code_ap != lv_ap_netting_netting_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_5
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ap
                    AND to_currency = lv_ap_netting_netting_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_5 := 1;
        END IF;				  

                  --Step 8.1 Scenario 7B_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_1-Step 08',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting Netting to Receiver Netting',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_5,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            lv_ap_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_5 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            netting_ap_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ap_le,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = lv_ap_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 1, 'INSERT11', intercompany_batch_number_ap,
                      lv_acc_date); 

                             --Step 8.2 Scenario 7B_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_1-Step 08',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting Netting to Receiver Netting',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_5,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            lv_ap_netting_netting_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_5 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = lv_ap_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 12, 'INSERT1', intercompany_batch_number_ap,
                      lv_acc_date);
        IF functional_currency_code_ar != lv_ar_netting_netting_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_3
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ar
                    AND to_currency = lv_ar_netting_netting_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_3 := 1;
        END IF;						 

                                                                                      --Step 9.1 Scenario 7B_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_1-Step 09',
            'LSI_LIABILITY_SWITCH',
            'AHCS FX for Receiver Netting Netting',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_3,
            'IC Clearing AP AR-IC Clearing AP AR',
            lv_ar_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_5 * accounted_invoice_amount_ap - lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ar,
            lv_ar_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_3 * lv_ar_netting_rate_sc5_5 * accounted_invoice_amount_ap - lv_ar_netting_rate_sc5_3 * lv_ar_netting_rate_sc5_4 *
            accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN lv_ar_netting_netting_fun_curr = lv_ar_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        logging_insert('Oracle LSI', p_batch_id, 13, 'INSERT1', intercompany_batch_number_ap,
                      lv_acc_date); 
                             --Step 9.2 Scenario 7B_1
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_1-Step 09',
            'LSI_LIABILITY_SWITCH',
            'AHCS FX for Receiver Netting Netting',
            lv_ap_netting_netting_le,
            lv_ap_netting_netting_ledger,
            'AHCS Other FX Acct',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_3,
            'AHCS Other FX Acct-AHCS Other FX Acct',
            lv_ar_netting_netting_fun_curr,
            - 1 * ( lv_ar_netting_rate_sc5_5 * accounted_invoice_amount_ap - lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ar ),
            lv_ar_netting_netting_fun_curr,
            - 1 * ( lv_ar_netting_rate_sc5_3 * lv_ar_netting_rate_sc5_5 * accounted_invoice_amount_ap - lv_ar_netting_rate_sc5_3 * lv_ar_netting_rate_sc5_4 *
            accounted_invoice_amount_ar ),
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ap_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN lv_ar_netting_netting_fun_curr = lv_ar_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        COMMIT;  

	                 --   LV_HEADER_ID  := WSC_AHCS_LSI_HEADER_SEQ.nextval;

/*					   Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'DR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;

						Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'CR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;		*/
           /*             INSERT INTO WSC_AHCS_INT_STATUS_T(HEADER_ID,
LINE_ID ,
APPLICATION,
FILE_NAME,
BATCH_ID ,
STATUS ,
ACCOUNTING_STATUS ,
CR_DR_INDICATOR,
CURRENCY,
VALUE ,
SOURCE_COA,
TARGET_COA,
ATTRIBUTE2,
CREATED_BY,
CREATED_DATE,
LAST_UPDATED_BY,
LAST_UPDATED_DATE,
ATTRIBUTE11,
ATTRIBUTE3)  
Select LV_HEADER_ID,
                    NET.LSI_NETTING_ENTRY_ID,
                    'Oracle LSI',
                    LV_FILE_NAME,
                    P_BATCH_ID,
                    DECODE(LCT.STATUS,'MATCHED','TRANSFORM_SUCCESS','ERROR','TRANSFORM_FAILED','NEW',NULL,LCT.STATUS),
                    DECODE(LCT.STATUS,'MATCHED',NULL,'NEW',NULL,'ERROR','NULL',LCT.STATUS),
                    decode(sign(NET.ACCOUNTED_AMT),-1,'CR','DR'),
                    NET.ACCOUNTED_CURR,
                    NET.ACCOUNTED_AMT,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    'TRANSFORM_SUCCESS',
                    'FININT',
                    LV_ACC_DATE,
                    'FININT',
                    LV_ACC_DATE,
                    to_date(NET.ACCOUNTING_DATE,'YYYY-MM-DD'),
                    NET.TRANSACTION_NUMBER
            FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
            WHERE LCT.BATCH_ID = NET.BATCH_ID 
            AND LCT.FILE_NAME = NET.FILE_NAME 
            AND LCT.BATCH_ID = P_BATCH_ID 
            AND LCT.FILE_NAME = LV_FILE_NAME	
            AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap;
            commit;
*/

    EXCEPTION
        WHEN lv_exch_rate_excep THEN
            ROLLBACK;
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'ERR_EXCH_NOT_ENABLED',
                'No Exchange Rate Defined for (SC7B1) IC :' || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;

     /*     DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

        WHEN OTHERS THEN
            lv_err_code := sqlcode;
            lv_err_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                lv_err_code,
                lv_err_msg
                || ' (SC7B1) IC :'
                || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT; 

   /* DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

    END;

    PROCEDURE lsi_sc7b2 (
        p_batch_id                       NUMBER,
        ar_ccid                          VARCHAR2,
        ar_ledger                        VARCHAR2,
        functional_currency_code_ar      VARCHAR2,
        accounted_invoice_amount_ar      NUMBER,
        intercompany_batch_number_ap     VARCHAR2,
        intercompany_legal_entity_ar     VARCHAR2,
        intercompany_transaction_type_ar VARCHAR2,
        invoice_number_ar                VARCHAR2,
        ap_ccid                          VARCHAR2,
        ap_ledger                        VARCHAR2,
        functional_currency_code_ap      VARCHAR2,
        accounted_invoice_amount_ap      NUMBER,
        intercompany_transaction_type_ap VARCHAR2,
        invoice_number_ap                VARCHAR2,
        netting_ar_le                    VARCHAR2,
        netting_ar_ledger                VARCHAR2,
        ar_exchange_rate_netting         VARCHAR2,
        netting_ar_fun_curr              VARCHAR2,
        ap_exchange_rate_netting         VARCHAR2,
        netting_ap_fun_curr              VARCHAR2,
        intercompany_legal_entity_ap     VARCHAR2,
        netting_ap_le                    VARCHAR2,
        netting_ap_ledger                VARCHAR2,
        ap_exchange_rate_type            VARCHAR2,
        ar_exchange_rate_type            VARCHAR2,
        record_type                      VARCHAR2,
        ic_trx_number                    VARCHAR2,
        ap_invoice_id                    NUMBER,
        ar_invoice_id                    NUMBER,
        ap_id2                           NUMBER,
        ar_id2                           NUMBER,
        ap_id3                           NUMBER,
        ar_id3                           NUMBER,
        accounting_period                VARCHAR2
    ) IS

        lv_file_name                   VARCHAR2(100);
        lv_ar_netting_rate_sc5_2       NUMBER(38, 30);
        lv_ap_netting_netting_le       VARCHAR2(50) := getnettingnettingle(netting_ap_le);
        lv_ar_netting_netting_le       VARCHAR2(50) := getnettingnettingle(netting_ar_le);
        lv_ap_netting_netting_ledger   VARCHAR2(50) := getnettingledger(lv_ap_netting_netting_le);
        lv_ar_netting_netting_ledger   VARCHAR2(50) := getnettingledger(lv_ar_netting_netting_le);
        lv_ap_netting_netting_fun_curr VARCHAR2(50) := getnettingfuncurr(lv_ap_netting_netting_le);
        lv_ar_netting_netting_fun_curr VARCHAR2(50) := getnettingfuncurr(lv_ar_netting_netting_le);
        lv_ar_netting_rate_sc5_3       NUMBER(38, 30);
        lv_ar_netting_rate_sc5_4       NUMBER(38, 30);
        lv_ar_netting_rate_sc5_5       NUMBER(38, 30);
        lv_err_msg                     VARCHAR2(200);
        lv_err_code                    VARCHAR2(50);
        lv_header_id                   NUMBER;
        lv_exch_rate_excep EXCEPTION;
        lv_acc_date                    DATE;
    BEGIN
        BEGIN
            SELECT
                file_name,
                accounting_date
            INTO
                lv_file_name,
                lv_acc_date
            FROM
                wsc_ahcs_lsi_control_t
            WHERE
                batch_id = p_batch_id;

        END;

              ---Step 3.1 Scenario 7B_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_2-Step 03',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            netting_ar_le,
            invoice_number_ar,
            intercompany_batch_number_ap,
            p_batch_id,
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ar_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               ---Step 3.2 Scenario 7B_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_2-Step 03',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ar,
            intercompany_batch_number_ap,
            p_batch_id,
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ar != netting_ar_fun_curr THEN
            BEGIN
                SELECT
                    to_number(conversion_rate)
                INTO lv_ar_netting_rate_sc5_2
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ar
                    AND to_currency = netting_ar_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_2 := 1;
        END IF;
                               ---Step 4.1 Scenario 7B_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_2-Step 04',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting to Provider',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_2,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               ---Step 4.2 Scenario 7B_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_2-Step 04',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting to Provider',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_2,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               --Step 5.1 Scenario 7B_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_2-Step 05',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting to Provider Netting Netting',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            netting_ar_fun_curr,
            accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_netting_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            lv_ar_netting_netting_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 5.2 Scenario 7B_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_2-Step 05',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting to Provider Netting Netting',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            netting_ar_fun_curr,
            - 1 * accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            - 1 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               --Step 6.1 Scenario 7B_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_2-Step 06',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 6.2 Scenario 7B_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_2-Step 06',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_netting_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            lv_ar_netting_netting_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ap != netting_ap_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_4
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ap
                    AND to_currency = netting_ap_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_4 := 1;
        END IF;

                             --Step 7.1 Scenario 7B_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_2-Step 07',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting Netting to Receiver Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_4,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        ); 

                             --Step 7.2 Scenario 7B_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_2-Step 07',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting Netting to Receiver Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_4,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            lv_ar_netting_rate_sc5_4 * - 1 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ar != lv_ar_netting_netting_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_5
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ar
                    AND to_currency = lv_ar_netting_netting_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_5 := 1;
        END IF;
  --Step 8.1 Scenario 7B_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_2-Step 08',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting Netting to Provider Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_5,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            lv_ar_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_5 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = lv_ar_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        ); 

                             --Step 8.2 Scenario 7B_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_2-Step 08',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting Netting to Provider Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_5,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            lv_ar_netting_netting_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_5 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            netting_ar_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ar_le,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = lv_ar_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        ); 


                                                                                      --Step 9.1 Scenario 7B_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_2-Step 09',
            'LSI_LIABILITY_SWITCH',
            'AHCS FX for Provider Netting Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            lv_ar_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap - lv_ar_netting_rate_sc5_5 * accounted_invoice_amount_ar,
            lv_ar_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap - lv_ar_netting_rate_sc5_5 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        ); 

                             --Step 9.2 Scenario 7B_2
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 7B_2-Step 09',
            'LSI_LIABILITY_SWITCH',
            'AHCS FX for Provider Netting Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS Other FX Acct',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS Other FX Acct-AHCS Other FX Acct',
            lv_ar_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_5 * accounted_invoice_amount_ar - lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            lv_ar_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_5 * accounted_invoice_amount_ar - lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        COMMIT;  

	                        --     LV_HEADER_ID  := WSC_AHCS_LSI_HEADER_SEQ.nextval;

/*					   Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'DR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;

						Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'CR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;
*/
/*INSERT INTO WSC_AHCS_INT_STATUS_T(HEADER_ID,
LINE_ID ,
APPLICATION,
FILE_NAME,
BATCH_ID ,
STATUS ,
ACCOUNTING_STATUS ,
CR_DR_INDICATOR,
CURRENCY,
VALUE ,
SOURCE_COA,
TARGET_COA,
ATTRIBUTE2,
CREATED_BY,
CREATED_DATE,
LAST_UPDATED_BY,
LAST_UPDATED_DATE,
ATTRIBUTE11,
ATTRIBUTE3)  
Select LV_HEADER_ID,
                    NET.LSI_NETTING_ENTRY_ID,
                    'Oracle LSI',
                    LV_FILE_NAME,
                    P_BATCH_ID,
                    DECODE(LCT.STATUS,'MATCHED','TRANSFORM_SUCCESS','ERROR','TRANSFORM_FAILED','NEW',NULL,LCT.STATUS),
                    DECODE(LCT.STATUS,'MATCHED',NULL,'NEW',NULL,'ERROR','NULL',LCT.STATUS),
                    decode(sign(NET.ACCOUNTED_AMT),-1,'CR','DR'),
                    NET.ACCOUNTED_CURR,
                    NET.ACCOUNTED_AMT,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    'TRANSFORM_SUCCESS',
                    'FININT',
                    LV_ACC_DATE,
                    'FININT',
                    LV_ACC_DATE,
                    to_date(NET.ACCOUNTING_DATE,'YYYY-MM-DD'),
                    NET.TRANSACTION_NUMBER
            FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
            WHERE LCT.BATCH_ID = NET.BATCH_ID 
            AND LCT.FILE_NAME = NET.FILE_NAME 
            AND LCT.BATCH_ID = P_BATCH_ID 
            AND LCT.FILE_NAME = LV_FILE_NAME	
            AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap;
            commit; */

    EXCEPTION
        WHEN lv_exch_rate_excep THEN
            ROLLBACK;
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'ERR_EXCH_NOT_ENABLED',
                'No Exchange Rate Defined for (SC7B2) IC :' || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;

       /*   DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

        WHEN OTHERS THEN
            lv_err_code := sqlcode;
            lv_err_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                lv_err_code,
                lv_err_msg
                || ' (SC7B2) IC :'
                || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;

  /*  DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

    END;

    PROCEDURE lsi_sc8 (
        p_batch_id                       NUMBER,
        ar_ccid                          VARCHAR2,
        ar_ledger                        VARCHAR2,
        functional_currency_code_ar      VARCHAR2,
        accounted_invoice_amount_ar      NUMBER,
        intercompany_batch_number_ap     VARCHAR2,
        intercompany_legal_entity_ar     VARCHAR2,
        intercompany_transaction_type_ar VARCHAR2,
        invoice_number_ar                VARCHAR2,
        ap_ccid                          VARCHAR2,
        ap_ledger                        VARCHAR2,
        functional_currency_code_ap      VARCHAR2,
        accounted_invoice_amount_ap      NUMBER,
        intercompany_transaction_type_ap VARCHAR2,
        invoice_number_ap                VARCHAR2,
        netting_ar_le                    VARCHAR2,
        netting_ar_ledger                VARCHAR2,
        ar_exchange_rate_netting         VARCHAR2,
        netting_ar_fun_curr              VARCHAR2,
        ap_exchange_rate_netting         VARCHAR2,
        netting_ap_fun_curr              VARCHAR2,
        intercompany_legal_entity_ap     VARCHAR2,
        netting_ap_le                    VARCHAR2,
        netting_ap_ledger                VARCHAR2,
        ap_exchange_rate_type            VARCHAR2,
        ar_exchange_rate_type            VARCHAR2,
        record_type                      VARCHAR2,
        ic_trx_number                    VARCHAR2,
        ap_invoice_id                    NUMBER,
        ar_invoice_id                    NUMBER,
        ap_id2                           NUMBER,
        ar_id2                           NUMBER,
        ap_id3                           NUMBER,
        ar_id3                           NUMBER,
        accounting_period                VARCHAR2
    ) IS

        lv_file_name                   VARCHAR2(100);
        lv_ar_netting_rate_sc5_2       NUMBER(38, 30);
        lv_ap_netting_netting_le       VARCHAR2(50) := getnettingnettingle(netting_ap_le);
        lv_ar_netting_netting_le       VARCHAR2(50) := getnettingnettingle(netting_ar_le);
        lv_ap_netting_netting_ledger   VARCHAR2(50) := getnettingledger(lv_ap_netting_netting_le);
        lv_ar_netting_netting_ledger   VARCHAR2(50) := getnettingledger(lv_ar_netting_netting_le);
        lv_ap_netting_netting_fun_curr VARCHAR2(50) := getnettingfuncurr(lv_ap_netting_netting_le);
        lv_ar_netting_netting_fun_curr VARCHAR2(50) := getnettingfuncurr(lv_ar_netting_netting_le);
        lv_ar_netting_rate_sc5_3       NUMBER(38, 30);
        lv_ar_netting_rate_sc5_4       NUMBER(38, 30);
        lv_ar_netting_rate_sc5_5       NUMBER(38, 30);
        lv_err_msg                     VARCHAR2(200);
        lv_err_code                    VARCHAR2(50);
        lv_header_id                   NUMBER;
        lv_exch_rate_excep EXCEPTION;
        lv_acc_date                    DATE;
    BEGIN
        BEGIN
            SELECT
                file_name,
                accounting_date
            INTO
                lv_file_name,
                lv_acc_date
            FROM
                wsc_ahcs_lsi_control_t
            WHERE
                batch_id = p_batch_id;

        END;

              ---Step 3.1 Scenario 8
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 8-Step 03',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            netting_ar_le,
            invoice_number_ar,
            intercompany_batch_number_ap,
            p_batch_id,
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ar_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               ---Step 3.2 Scenario 8
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 8-Step 03',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider to Provider Netting',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ar != netting_ar_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_2
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ar
                    AND to_currency = netting_ar_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_2 := 1;
        END IF;
                               ---Step 4.1 Scenario 8
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 8-Step 04',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting to Provider',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_2,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               ---Step 4.2 Scenario 8
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 8-Step 04',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting to Provider',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_2,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_2 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ar_ccid, 1, instr(ar_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = netting_ar_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               --Step 5.1 Scenario 8
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 8-Step 05',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting to Provider Netting Netting',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            netting_ar_fun_curr,
            accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_netting_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            lv_ar_netting_netting_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 5.2 Scenario 8
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 8-Step 05',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting to Provider Netting Netting',
            netting_ar_le,
            netting_ar_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            netting_ar_fun_curr,
            - 1 * accounted_invoice_amount_ar,
            netting_ar_fun_curr,
            - 1 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ar_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                               --Step 6.1 Scenario 8
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 8-Step 06',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

                             --Step 6.2 Scenario 8
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 8-Step 06',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver to Receiver Netting',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            ( - 1 ) * accounted_invoice_amount_ap,
            functional_currency_code_ap,
            ( - 1 ) * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            netting_ap_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ap_le,
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ap != netting_ap_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_4
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ap
                    AND to_currency = netting_ap_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ap_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_4 := 1;
        END IF;

                             --Step 7.1 Scenario 8
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 8-Step 07',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_4,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            substr(ap_ccid, 1, instr(ap_ccid, '.', 1) - 1),
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        ); 

                             --Step 7.2 Scenario 8
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 8-Step 07',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_4,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        ); 
                                                                                                                                                                                                         --Step 8.1 Scenario 8
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 8-Step 08',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_4,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        ); 

                             --Step 8.2 Scenario 8
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 8-Step 08',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting to Receiver',
            netting_ap_le,
            netting_ap_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_4,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            netting_ap_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_4 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ap_netting_netting_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            netting_ap_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            lv_ap_netting_netting_le,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = netting_ap_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ar != lv_ar_netting_netting_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_3
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ar
                    AND to_currency = lv_ar_netting_netting_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_3 := 1;
        END IF;			 

                                                                                      --Step 9.1 Scenario 8
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 8-Step 09',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting Netting to Provider Netting',
            lv_ar_netting_netting_le, --ARNettingLEsNettingLE
            lv_ar_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_3,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ar,
            accounted_invoice_amount_ar,
            lv_ar_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = lv_ar_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        ); 

                             --Step 9.2 Scenario 8
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 8-Step 09',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Provider Netting Netting to Provider Netting',
            lv_ar_netting_netting_le, --ARNettingLEsNettingLE
            lv_ar_netting_netting_ledger,
            'AHCS IC AP',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_3,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ar,
            - 1 * accounted_invoice_amount_ar,
            lv_ar_netting_netting_fun_curr,
            - 1 * lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ar,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            netting_ar_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ar_le,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ar = lv_ar_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ar_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        IF functional_currency_code_ap != lv_ar_netting_netting_fun_curr THEN
            BEGIN
                SELECT
                    conversion_rate
                INTO lv_ar_netting_rate_sc5_5
                FROM
                    wsc_ahcs_lsi_exchange_rate_t
                WHERE
                        from_currency = functional_currency_code_ap
                    AND to_currency = lv_ar_netting_netting_fun_curr
                    AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                    AND conversion_rate_type = nvl(ar_exchange_rate_type, 'Actual Rate');

            EXCEPTION
                WHEN OTHERS THEN
                    RAISE lv_exch_rate_excep;
            END;
        ELSE
            lv_ar_netting_rate_sc5_5 := 1;
        END IF;   

                                            --Step 10.1 Scenario 8
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 8-Step 10',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting to Receiver',
            lv_ar_netting_netting_le, --ARNettingLEsNettingLE
            lv_ar_netting_netting_ledger,
            'AHCS IC AR',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_5,
            'AHCS IC AR AP-AHCS IC AR AP',
            functional_currency_code_ap,
            accounted_invoice_amount_ap,
            lv_ar_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_5 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            netting_ap_le,
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            netting_ap_le,
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = lv_ar_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        ); 

                             --Step 10.2 Scenario 8
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 8-Step 10',
            'LSI_LIABILITY_SWITCH',
            'AHCS for Receiver Netting to Receiver',
            lv_ar_netting_netting_le, --ARNettingLEsNettingLE
            lv_ar_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            lv_ar_netting_rate_sc5_5,
            'IC Clearing AP AR-IC Clearing AP AR',
            functional_currency_code_ap,
            - 1 * accounted_invoice_amount_ap,
            lv_ar_netting_netting_fun_curr,
            lv_ar_netting_rate_sc5_5 * - 1 * accounted_invoice_amount_ap,
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
                CASE
                    WHEN functional_currency_code_ap = lv_ar_netting_netting_fun_curr THEN
                        NULL
                    ELSE
                        ap_exchange_rate_type
                END,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        ); 

                                                                                                      --Step 11.1 Scenario 8
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 8-Step 11',
            'LSI_LIABILITY_SWITCH',
            'AHCS FX for Provider Netting Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS Cash Clearing',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'IC Clearing AP AR-IC Clearing AP AR',
            lv_ar_netting_netting_fun_curr,
            ( lv_ar_netting_rate_sc5_5 * accounted_invoice_amount_ap - lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ar ),
            lv_ar_netting_netting_fun_curr,
            ( lv_ar_netting_rate_sc5_5 * accounted_invoice_amount_ap - lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ar ),
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        ); 

                             --Step 11.2 Scenario 8
        INSERT INTO wsc_ahcs_lsi_netting_entry_t (
            lsi_netting_entry_id,
            scenario,
            event_type,
            transaction,
            le,
            ledger,
            line_type,
            exchange_rate_date,
            exchange_rate,
            gl_natural_acc,
            entered_curr,
            entered_amt,
            accounted_curr,
            accounted_amt,
            accounting_date,
            ic_le,
            source_trx_number,
            ic_batch_number,
            batch_id,
            gl_legal_entity,
            gl_oper_grp,
            gl_acct,
            gl_dept,
            gl_site,
            gl_ic,
            gl_projects,
            gl_fut_1,
            gl_fut_2,
            exchange_rate_type,
            file_name,
            record_type,
            ic_trx_number,
            id1,
            id2,
            id3,
            id4,
            id5,
            id6,
            accounting_period,
            event_class
        ) VALUES (
            wsc_lsi_netting_entry_id_seq.NEXTVAL,
            'Scenario 8-Step 11',
            'LSI_LIABILITY_SWITCH',
            'AHCS FX for Receiver Netting Netting',
            lv_ar_netting_netting_le,
            lv_ar_netting_netting_ledger,
            'AHCS Other FX Acct',
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            1,
            'AHCS Other FX Acct-AHCS Other FX Acct',
            lv_ar_netting_netting_fun_curr,
            ( lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ar - lv_ar_netting_rate_sc5_5 * accounted_invoice_amount_ap ),
            lv_ar_netting_netting_fun_curr,
            ( lv_ar_netting_rate_sc5_3 * accounted_invoice_amount_ar - lv_ar_netting_rate_sc5_5 * accounted_invoice_amount_ap ),
            to_char(lv_acc_date, 'YYYY-MM-DD'),
            '0000',
            invoice_number_ap,
            intercompany_batch_number_ap,
            p_batch_id,
            lv_ar_netting_netting_le,
            '4120',
            'XXX',
            '0000',
            '00000',
            '0000',
            '0000',
            '0000',
            '0000',
            NULL,
            lv_file_name,
            record_type,
            ic_trx_number,
            ap_invoice_id,
            ar_invoice_id,
            ap_id2,
            ar_id2,
            ap_id3,
            ar_id3,
            accounting_period,
            'ORACLE_LSI'
        );

        COMMIT;  

                    --   LV_HEADER_ID  := WSC_AHCS_LSI_HEADER_SEQ.nextval;

	/*				   Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'DR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;

						Merge INTO WSC_AHCS_INT_STATUS_T a
				USING (Select LCT.BATCH_ID,LCT.STATUS,NET.ACCOUNTED_CURR,NET.ACCOUNTED_AMT,
				NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET.GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2  SOURCE_COA
				FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
				WHERE LCT.BATCH_ID = NET.BATCH_ID 
				AND LCT.FILE_NAME = NET.FILE_NAME 
				AND LCT.BATCH_ID = P_BATCH_ID 
				AND LCT.FILE_NAME = LV_FILE_NAME
				AND NET.SOURCE_TRX_NUMBER = INVOICE_NUMBER_AP 
				AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap ) b
				ON (a.BATCH_ID=b.BATCH_ID AND a.APPLICATION='ORACLE LSI')
				WHEN NOT MATCHED THEN
				INSERT ( HEADER_ID,
				         LINE_ID ,
						APPLICATION,
						FILE_NAME,
						BATCH_ID ,
						STATUS ,
						ACCOUNTING_STATUS ,
						CR_DR_INDICATOR,
						CURRENCY,
						VALUE ,
						SOURCE_COA,
						TARGET_COA,
						ATTRIBUTE2,
						CREATED_BY,
						CREATED_DATE,
						LAST_UPDATED_BY,
						LAST_UPDATED_DATE,
						ATTRIBUTE11)
						VALUES (
						LV_HEADER_ID,
						WSC_AHCS_LSI_LINE_SEQ.nextval,
						'Oracle LSI',
						LV_FILE_NAME,
						P_BATCH_ID,
						b.STATUS,
						DECODE(b.STATUS,'MATCHED',NULL,'NEW',NULL,b.STATUS),
						'CR',
						b.ACCOUNTED_CURR,
						b.ACCOUNTED_AMT,
						b.SOURCE_COA,
						b.SOURCE_COA,
						'TRANSFORM_SUCCESS',
						'FININT',
						LV_ACC_DATE,
						'FININT',
						LV_ACC_DATE,
						LV_ACC_DATE);

						commit;	   */
     /*                   INSERT INTO WSC_AHCS_INT_STATUS_T(HEADER_ID,
LINE_ID ,
APPLICATION,
FILE_NAME,
BATCH_ID ,
STATUS ,
ACCOUNTING_STATUS ,
CR_DR_INDICATOR,
CURRENCY,
VALUE ,
SOURCE_COA,
TARGET_COA,
ATTRIBUTE2,
CREATED_BY,
CREATED_DATE,
LAST_UPDATED_BY,
LAST_UPDATED_DATE,
ATTRIBUTE11,
ATTRIBUTE3)  
Select LV_HEADER_ID,
                    NET.LSI_NETTING_ENTRY_ID,
                    'Oracle LSI',
                    LV_FILE_NAME,
                    P_BATCH_ID,
                    DECODE(LCT.STATUS,'MATCHED','TRANSFORM_SUCCESS','ERROR','TRANSFORM_FAILED','NEW',NULL,LCT.STATUS),
                    DECODE(LCT.STATUS,'MATCHED',NULL,'NEW',NULL,'ERROR','NULL',LCT.STATUS),
                    decode(sign(NET.ACCOUNTED_AMT),-1,'CR','DR'),
                    NET.ACCOUNTED_CURR,
                    NET.ACCOUNTED_AMT,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    NET.GL_LEGAL_ENTITY ||'.'||NET.GL_OPER_GRP||'.'||  NET.GL_ACCT||'.'|| NET. GL_DEPT ||'.'|| NET.GL_SITE||'.'|| NET.GL_IC ||'.'|| NET.GL_PROJECTS||'.'|| NET.GL_FUT_1||'.'||NET.GL_FUT_2,
                    'TRANSFORM_SUCCESS',
                    'FININT',
                    LV_ACC_DATE,
                    'FININT',
                    LV_ACC_DATE,
                    to_date(NET.ACCOUNTING_DATE,'YYYY-MM-DD'),
                    NET.TRANSACTION_NUMBER
            FROM WSC_AHCS_LSI_CONTROL_T LCT, WSC_AHCS_LSI_NETTING_ENTRY_T NET
            WHERE LCT.BATCH_ID = NET.BATCH_ID 
            AND LCT.FILE_NAME = NET.FILE_NAME 
            AND LCT.BATCH_ID = P_BATCH_ID 
            AND LCT.FILE_NAME = LV_FILE_NAME	
            AND NET.IC_BATCH_NUMBER = intercompany_batch_number_ap;
            commit; */

    EXCEPTION
        WHEN lv_exch_rate_excep THEN
            ROLLBACK;
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'ERR_EXCH_NOT_ENABLED',
                'No Exchange Rate Defined for (SC8) IC :' || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;

        /*  DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

        WHEN OTHERS THEN
            lv_err_code := sqlcode;
            lv_err_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                lv_err_code,
                lv_err_msg
                || ' (SC8) IC :'
                || intercompany_batch_number_ap,
                lv_acc_date,
                'FININT',
                lv_acc_date,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;

 /*   DELETE FROM WSC_AHCS_LSI_NETTING_ENTRY_T 
       WHERE IC_BATCH_NUMBER=intercompany_batch_number_ap;

       Commit; */

    END;

    PROCEDURE wsc_lsi_journals_p (
        in_wsc_lsi_journal_data IN wes_ahcs_lsi_journal_t_type_table
    ) AS
    BEGIN
        FORALL i IN 1..in_wsc_lsi_journal_data.count
            INSERT INTO wsc_ahcs_lsi_journal_tmp_t (
                ledger_name,
                legal_entity_name,
                gl_batch_id,
                gl_batch_name,
                gl_journal_id,
                journal_header_name,
                journal_line_number,
                gl_accounting_date,
                exchange_rate_date,
                exchange_rate,
                exchange_rate_type,
                segment1,
                segment2,
                segment3,
                segment4,
                segment5,
                segment6,
                segment7,
                segment8,
                segment9,
                journal_accounting_sequence,
                running_total_dr,
                running_total_cr,
                running_total_accounted_dr,
                running_total_accounted_cr,
                intercompany_batch_number,
                provider_legal_entity,
                intercompany_transaction_type,
                ledger_id,
                entered_currency_code,
                functional_currency_code,
                intercompany_transaction_number,
                je_source,
                actual_flag,
                to_be_processed,
                extract_name,
                status,
                party_type_flag
            ) VALUES (
                in_wsc_lsi_journal_data(i).ledger_name,
                in_wsc_lsi_journal_data(i).segment1,
                in_wsc_lsi_journal_data(i).gl_batch_id,
                in_wsc_lsi_journal_data(i).gl_batch_name,
                in_wsc_lsi_journal_data(i).gl_journal_id,
                in_wsc_lsi_journal_data(i).journal_header_name,
                in_wsc_lsi_journal_data(i).journal_line_number,
                in_wsc_lsi_journal_data(i).gl_posted_date,
                in_wsc_lsi_journal_data(i).exchange_rate_date,
                in_wsc_lsi_journal_data(i).exchange_rate,
                in_wsc_lsi_journal_data(i).exchange_rate_type,
                in_wsc_lsi_journal_data(i).segment1,
                in_wsc_lsi_journal_data(i).segment2,
                in_wsc_lsi_journal_data(i).segment3,
                in_wsc_lsi_journal_data(i).segment4,
                in_wsc_lsi_journal_data(i).segment5,
                in_wsc_lsi_journal_data(i).segment6,
                in_wsc_lsi_journal_data(i).segment7,
                in_wsc_lsi_journal_data(i).segment8,
                in_wsc_lsi_journal_data(i).segment9,
                in_wsc_lsi_journal_data(i).journal_accounting_sequence,
                in_wsc_lsi_journal_data(i).running_total_dr,
                in_wsc_lsi_journal_data(i).running_total_cr,
                in_wsc_lsi_journal_data(i).running_total_accounted_dr,
                in_wsc_lsi_journal_data(i).running_total_accounted_cr,
                in_wsc_lsi_journal_data(i).intercompany_batch_number,
                in_wsc_lsi_journal_data(i).segment6,
                in_wsc_lsi_journal_data(i).intercompany_transaction_type,
                in_wsc_lsi_journal_data(i).ledger_id,
                in_wsc_lsi_journal_data(i).entered_currency_code,
                in_wsc_lsi_journal_data(i).functional_currency_code,
                in_wsc_lsi_journal_data(i).intercompany_transaction_number,
                in_wsc_lsi_journal_data(i).je_source,
                in_wsc_lsi_journal_data(i).actual_flag,
                'Y',
                in_wsc_lsi_journal_data(i).file_name,
                in_wsc_lsi_journal_data(i).status,
                in_wsc_lsi_journal_data(i).party_type_flag
            );

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            logging_insert('Oracle LSI', 123, 1, 'test', 123,
                          sysdate);
    END;

    PROCEDURE wsc_lsi_receipt_created (
        wsc_rep_cre wsc_lsi_receipt_created_t_type_table
    ) AS
    BEGIN
        FORALL i IN 1..wsc_rep_cre.count
            INSERT INTO wsc_lsi_receipt_created_t (
                receipt_number,
                currency_code,
                amount,
                status,
                org_id,
                request_id
            ) VALUES (
                wsc_rep_cre(i).receipt_number,
                wsc_rep_cre(i).currency_code,
                wsc_rep_cre(i).amount,
                wsc_rep_cre(i).status,
                wsc_rep_cre(i).org_id,
                wsc_rep_cre(i).request_id
            );

        COMMIT;
    END wsc_lsi_receipt_created;

    PROCEDURE wsc_lsi_receipt_sync_db (
        p_request_id  NUMBER,
        p_load_req_id NUMBER
    ) AS
        lv_count       NUMBER := 0;
        lv_batch_id    NUMBER;
        lv_count_total NUMBER;
        lv_count_null  NUMBER;
        lv_count_error NUMBER;
    BEGIN
        BEGIN
            SELECT DISTINCT
                batch_id
            INTO lv_batch_id
            FROM
                wsc_ahcs_lsi_ar_t
            WHERE
                fbdi_process_id = p_load_req_id;

        END;
        logging_insert('Oracle LSI', p_load_req_id, 1, 'RECEIPT_DB_SYNC', lv_batch_id,
                      sysdate);

    /*   BEGIN  
         update WSC_AHCS_LSI_AR_T a 
         SET RECEIPT_NUM=NULL,
             STATUS='ERROR'
         WHERE  (RECEIPT_NUM,BATCH_ID,BU) NOT IN 
         (Select RECEIPT_NUMBER,P_BATCH_ID,Org_id 
         from WSC_LSI_RECEIPT_CREATED_T)
         AND BATCH_ID=P_BATCH_ID
         AND LOCKBOX_NUMBER=P_LOCKBOX_NBR
         AND BU=P_BU
         AND Bank_Origination_Number=P_Bank_Origination_Number;

          Commit;
        END; */

        BEGIN
            MERGE INTO wsc_ahcs_lsi_ar_t a
            USING (
                      SELECT
                          receipt_number,
                          org_id,
                          currency_code,
                          status
                      FROM
                          wsc_lsi_receipt_created_t
                      WHERE
                          request_id = p_request_id
                          OR request_id = p_load_req_id
                  )
            b ON ( a.bu = b.org_id
                   AND a.receipt_num = b.receipt_number
                   AND a.batch_id = lv_batch_id
                   AND a.fbdi_process_id = p_load_req_id
                   AND a.invoice_currency_code = b.currency_code )
            WHEN MATCHED THEN UPDATE
            SET status = decode(b.status, 'APP', 'SUCCESS', 'UNAPP', 'SUCCESS',
                                'ERROR'),
                error_message = decode(b.status, 'APP', NULL, 'UNAPP', NULL,
                                       b.status);

            COMMIT;
        END; 

      /*  BEGIN  
           update WSC_AHCS_LSI_AR_T a 
         SET STATUS='SUCCESS'
         WHERE  (RECEIPT_NUM,BATCH_ID,BU) IN 
         (Select RECEIPT_NUMBER,P_BATCH_ID,Org_id 
         from WSC_LSI_RECEIPT_CREATED_T)
         AND BATCH_ID=P_BATCH_ID
         AND LOCKBOX_NUMBER=P_LOCKBOX_NBR
         AND BU=P_BU
         AND Bank_Origination_Number=P_Bank_Origination_Number;

          Commit;
        END; */

        BEGIN
            UPDATE wsc_ahcs_lsi_ar_t a
            SET
                ap_payment_num = (
                    SELECT
                        payment_num
                    FROM
                        wsc_ahcs_lsi_ap_t b
                    WHERE
                            b.invoice_number = a.invoice_number
                        AND b.intercompany_batch_number = a.intercompany_batch_number
                        AND b.ic_trx_number = a.ic_trx_number
                        AND b.batch_id = a.batch_id
                        AND b.status = 'SUCCESS'
                        AND batch_id = lv_batch_id
                )
            WHERE
                    batch_id = lv_batch_id
                AND a.fbdi_process_id = p_load_req_id;

            COMMIT;
        END;

        BEGIN
            UPDATE wsc_ahcs_lsi_ap_ar_t a
            SET
                payment_number = (
                    SELECT
                        receipt_num
                    FROM
                        wsc_ahcs_lsi_ar_t
                    WHERE
                            bu = a.bu
                        AND invoice_number = a.invoice_number
                        AND ledger_name = a.ledger_name
                        AND entered_invoice_amount = a.entered_invoice_amount
                        AND gl_code_combination = a.gl_code_combination
                        AND intercompany_batch_number = a.intercompany_batch_number
                        AND ic_trx_number = a.ic_trx_number
                        AND a.batch_id = batch_id
                        AND fbdi_process_id = p_load_req_id
                        AND status = 'SUCCESS'
                        AND a.batch_id = lv_batch_id
                )
            WHERE
                    a.record_type = 'AR'
                AND a.batch_id = lv_batch_id;

            COMMIT;
        END;

        BEGIN
            SELECT
                COUNT(*) total,
                COUNT(
                    CASE
                        WHEN status IS NULL THEN
                            1
                    END
                )        status_null,
                COUNT(
                    CASE
                        WHEN status = 'ERROR' THEN
                            1
                    END
                )        status_error
            INTO
                lv_count_total,
                lv_count_null,
                lv_count_error
            FROM
                wsc_ahcs_lsi_ar_t
            WHERE
                batch_id = lv_batch_id;

            logging_insert('Oracle LSI', p_load_req_id, 1, 'TOTAL', lv_count_total,
                          sysdate);
            logging_insert('Oracle LSI', p_load_req_id, 1, 'NULL COUNT', lv_count_null,
                          sysdate);
            logging_insert('Oracle LSI', p_load_req_id, 1, 'ERROR COUNT', lv_count_error,
                          sysdate);
            IF lv_count_null = 0 THEN
                IF lv_count_total = lv_count_error THEN
                    UPDATE wsc_ahcs_lsi_control_t
                    SET
                        receipt_status = 'ERROR',
                        receipt_count = 0
                    WHERE
                        batch_id = lv_batch_id;

                ELSIF lv_count_error > 0 THEN
                    UPDATE wsc_ahcs_lsi_control_t
                    SET
                        receipt_status = 'WARNING',
                        receipt_count = lv_count_total - lv_count_error
                    WHERE
                        batch_id = lv_batch_id;

                ELSE
                    UPDATE wsc_ahcs_lsi_control_t
                    SET
                        receipt_status = 'SUCCESS',
                        receipt_count = lv_count_total
                    WHERE
                        batch_id = lv_batch_id;

                END IF;
            ELSE
                UPDATE wsc_ahcs_lsi_ar_t
                SET
                    status = 'ERROR',
                    error_message = 'CONTACT SUPPORT | LOCKBOX NOT SET'
                WHERE
                        batch_id = lv_batch_id
                    AND status IS NULL
                    AND lockbox_number IS NULL;

            END IF;

            COMMIT;
        END;

        BEGIN
            DELETE FROM wsc_lsi_receipt_created_t
            WHERE
                request_id = p_request_id;

            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;

        BEGIN
            DELETE FROM wsc_lsi_receipt_created_t
            WHERE
                request_id = p_load_req_id;

            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END; 



    /*   select count(1) into LV_COUNT from WSC_LSI_RECEIPT_CREATED_T;
       if LV_COUNT =0 THEN 
       update WSC_AHCS_LSI_CONTROL_T 
       SET receipt_status='ERROR'
       where batch_id=P_BATCH_ID;
       END IF; */

    END wsc_lsi_receipt_sync_db;

    PROCEDURE wsc_lsi_ar_ap_cm_err (
        o_clobdata OUT CLOB
    ) IS
        l_blob BLOB;
        l_clob CLOB;
    BEGIN
        dbms_lob.createtemporary(lob_loc => l_clob, cache => true, dur => dbms_lob.call);

        SELECT
            clob_val
        INTO l_clob
        FROM
            (
                SELECT
                    XMLCAST(XMLAGG(XMLELEMENT(
                        e, col_value
                          || CHR(13)
                          || CHR(10)
                    )) AS CLOB) AS clob_val,
                    COUNT(*)    AS number_of_rows
                FROM
                    (
                        SELECT
                            to_clob('FLOW,PAAS BATCH ID,LSI RUN DATE,IC BATCH NUMBER,IC TRANSACTION NUMBER,CM INVOICE_NUM, CM INV_CREATION_STATUS,AP INVOICE_NUMBER,PAYMENT_NUM,AP STATUS,AP ERROR_MESSAGE,AR INVOICE NUMBER,AR RECEIPT_NUM, AR STATUS,AR ERROR_MESSAGE,AR FBDI_PROCESS_ID,JOURNAL BATCH NAME,JOURNAL NAME,JOURNAL LINE NUMBER,AHCS FILE GENERATED,FILE GENERATION ERROR')
                            AS col_value
                        FROM
                            dual
                        UNION ALL
                        SELECT
                            ( get_data )
                        FROM
                            (
                                SELECT
                                    XMLAGG(XMLPARSE(CONTENT 'AP-AR,'
                                                            || batch_id
                                                            || ','
                                                            || accounting_date
                                                            || ','
                                                            || intercompany_batch_number
                                                            || ','
                                                            || ic_trx_number
                                                            || ','
                                                            || comd WELLFORMED)
                                        ORDER BY
                                            to_number(intercompany_batch_number)
                                    ).getclobval() get_data
                                FROM
                                    (
                                        SELECT
                                            data_1.batch_id,
                                            data_1."ID",
                                            data_1."ORD",
                                            data_1."INTERCOMPANY_BATCH_NUMBER",
                                            data_1."IC_TRX_NUMBER",
                                            data_1."COMD",
                                            apar.accounting_date accounting_date
                                        FROM
                                            (
                                                SELECT
                                                    batch_id,
                                                    to_number(intercompany_batch_number)  id,
                                                    1                                     ord,
                                                    to_char(cm.intercompany_batch_number) intercompany_batch_number,
                                                    to_char(cm.ic_trx_number)             ic_trx_number,
                                                    cm.invoice_num
                                                    || ','
                                                    || cm.inv_creation_status             comd
                                                FROM
                                                    wsc_ahcs_lsi_invoice_for_cm_h_t cm
                                                WHERE
                                                    cm.inv_creation_status = 'REJECTED'
                                                UNION
                                                SELECT
                                                    batch_id,
                                                    to_number(intercompany_batch_number)  id,
                                                    2                                     ord,
                                                    to_char(ap.intercompany_batch_number) intercompany_batch_number,
                                                    to_char(ap.ic_trx_number)             ic_trx_number,
                                                    ',,'
                                                    || ap.invoice_number
                                                    || ','
                                                    || ap.payment_num
                                                    || ','
                                                    || ap.status
                                                    || ','
                                                    || replace(replace(ap.error_message, CHR(10), ' '), ',', ' ')
                                                    || '"'                                comd
                                                FROM
                                                    wsc_ahcs_lsi_ap_t ap
                                                WHERE
                                                    ap.status = 'ERROR'
                                                UNION
                                                SELECT
                                                    batch_id,
                                                    to_number(intercompany_batch_number)  id,
                                                    3                                     ord,
                                                    to_char(ar.intercompany_batch_number) intercompany_batch_number,
                                                    to_char(ar.ic_trx_number)             ic_trx_number,
                                                    ',,,,,,'
                                                    || ar.invoice_number
                                                    || ','
                                                    || ar.receipt_num
                                                    || ','
                                                    || ar.status
                                                    || ',"'
                                                    || replace(replace(ar.error_message, CHR(10), ' '), ',', '')
                                                    || '",'
                                                    || ar.fbdi_process_id                 comd
                                                FROM
                                                    wsc_ahcs_lsi_ar_t ar
                                                WHERE
                                                    ar.status = 'ERROR'
                                                UNION
                                                SELECT
                                                    batch_id,
                                                    nvl(to_number(regexp_replace(error_msg, '[^0-9]', '')), dbms_random.value(1, 9)) id,
                                                    4                                                                                ord,
                                                    nvl(to_char(regexp_replace(error_msg, '[^0-9]', '')), dbms_random.value(1, 100)) intercompany_batch_number,
                                                    '1'                                                                              ic_trx_number,
                                                    ',,,,,,,,,,,,,'
                                                    || ',N,"'
                                                    || replace(error_msg, CHR(10), ' ')
                                                    || '"'                                                                           comd
                                                FROM
                                                    wsc_ahcs_lsi_err_t ahcs
                                                WHERE
                                                    error_code NOT IN ( 'DB_ERR_IN_UCM_CREATION', 'NO FBDI CREATED' )
                                            )                    data_1,
                                            wsc_ahcs_lsi_ap_ar_t apar
                                        WHERE
                                                data_1.intercompany_batch_number = apar.intercompany_batch_number
                                            AND data_1.ic_trx_number = apar.ic_trx_number
                                            AND data_1.batch_id = apar.batch_id
                                            AND apar.record_type = 'AR'
                                    )
                                GROUP BY
                                    to_number(intercompany_batch_number),
                                    batch_id
                            )
                        UNION ALL
                        SELECT
                            to_clob('GL,'
                                    || data_1.batch_id
                                    || ','
                                    || data_1.accounting_date
                                    || ','
                                    || data_1."INTERCOMPANY_BATCH_NUMBER"
                                    || ','
                                    || data_1."IC_TRX_NUMBER"
                                    || ','
                                    || data_1."COMD")
                        FROM
                            (
                                SELECT
                                    ahcs.batch_id,
                                    apar.gl_accounting_date                                                          accounting_date,
                                    nvl(to_number(regexp_replace(error_msg, '[^0-9]', '')), dbms_random.value(1, 9)) id,
                                    4                                                                                ord,
                                    substr(error_msg, instr(error_msg, ':') + 1)                                     intercompany_batch_number,
                                    '1'                                                                              ic_trx_number,
                                    ',,,,,,,,,,,'
                                    || apar.gl_batch_name
                                    || ','
                                    || apar.journal_header_name
                                    || ','
                                    || apar.journal_line_number
                                    || ','
                                    || ',N,"'
                                    || replace(ahcs.error_msg, CHR(10), ' ')
                                    || '"'                                                                           comd
                                FROM
                                    wsc_ahcs_lsi_err_t     ahcs,
                                    wsc_ahcs_lsi_journal_t apar
                                WHERE
                                    error_code NOT IN ( 'DB_ERR_IN_UCM_CREATION', 'NO FBDI CREATED' )
                                    AND apar.intercompany_batch_number = substr(error_msg, instr(error_msg, ':') + 1)
                                    AND ahcs.batch_id = apar.batch_id
                                    AND apar.party_type_flag = 'I'
                            ) data_1
                    )
            );

        o_clobdata := l_clob; 

--  NULL;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
    END;

    PROCEDURE wsc_lsi_ar_ap_download (
        o_clobdata OUT CLOB
    ) IS
        l_blob BLOB;
        l_clob CLOB;
    BEGIN
        dbms_lob.createtemporary(lob_loc => l_clob, cache => true, dur => dbms_lob.call);

        SELECT
            clob_val
        INTO l_clob
        FROM
            (
                SELECT
                    XMLCAST(XMLAGG(XMLELEMENT(
                        e, col_value
                          || CHR(13)
                          || CHR(10)
                    )) AS CLOB) AS clob_val,
                    COUNT(*)    AS number_of_rows
                FROM
                    (
                        SELECT
                            'RECORD_TYPE,BU,INVOICE_NUMBER,LEDGER_NAME,ACCOUNTING_CLASS,INVOICE_DATE,ACCOUNTING_DATE,EXCHANGE_RATE,EXCHANGE_RATE_TYPE,EXCHANGE_RATE_DATE,ENTERED_INVOICE_AMOUNT,ACCOUNTED_INVOICE_AMOUNT,GL_CODE_COMBINATION,INTERCOMPANY_LEGAL_ENTITY,INTERCOMPANY_TRANSACTION_TYPE,INTERCOMPANY_BATCH_NUMBER,VENDOR_CUST_NAME,VENDOR_CUST_SITE,ACCOUNT_NUMBER,LOCKBOX_NUMBER,BANK_ORIGINATION_NUMBER,INVOICE_CURRENCY_CODE,FUNCTIONAL_CURRENCY_CODE,CHECK_ID,PAYMENT_NUMBER,BANK_ACC,BATCH_ID,NETTING_LEDGER,NETTING_FUN_CURR,IC_TRX_NUMBER,INVOICE_ID,BU_ID,LOCKBOX_ID,FILE_NAME,ACCOUNTING_PERIOD,EXTRACT_NAME,STATUS,STATUS_REASON'
                            AS col_value
                        FROM
                            dual
                        UNION ALL
                        SELECT
                            record_type
                            || ','
                            || bu
                            || ','
                            || invoice_number
                            || ','
                            || ledger_name
                            || ','
                            || accounting_class
                            || ','
                            || invoice_date
                            || ','
                            || accounting_date
                            || ','
                            || exchange_rate
                            || ','
                            || exchange_rate_type
                            || ','
                            || exchange_rate_date
                            || ','
                            || entered_invoice_amount
                            || ','
                            || accounted_invoice_amount
                            || ','
                            || gl_code_combination
                            || ','
                            || intercompany_legal_entity
                            || ','
                            || intercompany_transaction_type
                            || ','
                            || intercompany_batch_number
                            || ','
                            || vendor_cust_name
                            || ','
                            || vendor_cust_site
                            || ','
                            || account_number
                            || ','
                            || lockbox_number
                            || ','
                            || bank_origination_number
                            || ','
                            || invoice_currency_code
                            || ','
                            || functional_currency_code
                            || ','
                            || check_id
                            || ','
                            || payment_number
                            || ','
                            || bank_acc
                            || ','
                            || batch_id
                            || ','
                            || netting_ledger
                            || ','
                            || netting_fun_curr
                            || ','
                            || ic_trx_number
                            || ','
                            || invoice_id
                            || ','
                            || bu_id
                            || ','
                            || lockbox_id
                            || ','
                            || file_name
                            || ','
                            || accounting_period
                            || ','
                            || extract_name
                            || ','
                            || status
                            || ','
                            || status_reason AS col_value
                        FROM
                            (
                                SELECT
                                    record_type,
                                    bu,
                                    invoice_number,
                                    ledger_name,
                                    accounting_class,
                                    invoice_date,
                                    accounting_date,
                                    exchange_rate,
                                    exchange_rate_type,
                                    exchange_rate_date,
                                    entered_invoice_amount,
                                    accounted_invoice_amount,
                                    gl_code_combination,
                                    intercompany_legal_entity,
                                    intercompany_transaction_type,
                                    intercompany_batch_number,
                                    vendor_cust_name,
                                    vendor_cust_site,
                                    account_number,
                                    lockbox_number,
                                    bank_origination_number,
                                    invoice_currency_code,
                                    functional_currency_code,
                                    check_id,
                                    payment_number,
                                    bank_acc,
                                    batch_id,
                                    netting_ledger,
                                    netting_fun_curr,
                                    ic_trx_number,
                                    invoice_id,
                                    bu_id,
                                    lockbox_id,
                                    file_name,
                                    accounting_period,
                                    extract_name,
                                    'UNMATCHED' status,
                                    status_reason
                                FROM
                                    wsc_ahcs_lsi_ap_ar_t
                                WHERE
                                    status IS NULL
                                    AND invoice_number NOT LIKE '%LSI'
                                UNION
                                SELECT
                                    'GL'                                                    record_type,
                                    NULL                                                    bu,
                                    to_char(journal_accounting_sequence)                    invoice_number,
                                    NULL                                                    ledger_name,
                                    NULL                                                    accounting_class,
                                    NULL                                                    invoice_date,
                                    gl_accounting_date                                      accounting_date,
                                    exchange_rate,
                                    exchange_rate_type,
                                    exchange_rate_date,
                                    running_total_dr - running_total_cr                     entered_invoice_amount,
                                    running_total_accounted_dr - running_total_accounted_cr accounted_invoice_amount,
                                    segment1
                                    || '.'
                                    || segment2
                                    || '.'
                                    || segment3
                                    || '.'
                                    || segment4
                                    || '.'
                                    || segment5
                                    || '.'
                                    || segment6
                                    || '.'
                                    || segment7
                                    || '.'
                                    || segment8
                                    || '.'
                                    || segment9                                             gl_code_combination,
                                    NULL                                                    intercompany_legal_entity,
                                    intercompany_transaction_type,
                                    to_number(intercompany_batch_number)                    intercompany_batch_number,
                                    NULL                                                    vendor_cust_name,
                                    NULL                                                    vendor_cust_site,
                                    NULL                                                    account_number,
                                    NULL                                                    lockbox_number,
                                    NULL                                                    bank_origination_number,
                                    entered_currency_code                                   invoice_currency_code,
                                    functional_currency_code,
                                    NULL                                                    check_id,
                                    NULL                                                    payment_number,
                                    NULL                                                    bank_acc,
                                    to_char(batch_id),
                                    NULL                                                    netting_ledger,
                                    NULL                                                    netting_fun_curr,
                                    intercompany_transaction_number                         ic_trx_number,
                                    to_char(gl_journal_id)                                  invoice_id,
                                    NULL                                                    bu_id,
                                    NULL                                                    lockbox_id,
                                    file_name,
                                    accounting_period,
                                    extract_name,
                                    'UNMATCHED'                                             status,
                                    NULL                                                    status_reason
                                FROM
                                    wsc_ahcs_lsi_journal_t
                                WHERE
                                    status = 'NEW'
                            )
                    )
            );

        o_clobdata := l_clob;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
    END;

    PROCEDURE lsi_error_report_download (
        o_clobdata OUT CLOB
    ) IS
        l_blob BLOB;
        l_clob CLOB;
    BEGIN
        dbms_lob.createtemporary(lob_loc => l_clob, cache => true, dur => dbms_lob.call);

        SELECT
            clob_val
        INTO l_clob
        FROM
            (
                SELECT
                    XMLCAST(XMLAGG(XMLELEMENT(
                        e, col_value
                          || CHR(13)
                          || CHR(10)
                    )) AS CLOB) AS clob_val,
                    COUNT(*)    AS number_of_rows
                FROM
                    (
                        SELECT
                            'FILE_NAME, BATCH_ID, ERROR_CODE, ERROR_MSG, CREATED_BY, TO_BE_PROCESSED, CREATED_DATE' AS col_value
                        FROM
                            dual
                        UNION ALL
                        SELECT
                            file_name
                            || ','
                            || batch_id
                            || ','
                            || error_code
                            || ','
                            || error_msg
                            || ','
                            || created_by
                            || ','
                            || to_be_processed
                            || ','
                            || created_date AS col_value
                        FROM
                            (
                                SELECT
                                    file_name,
                                    batch_id,
                                    error_code,
                                    error_msg,
                                    to_char(created_date AT TIME ZONE 'UTC', 'DD-MM-YYYY HH24:MI:SS') created_date,
                                    created_by,
                                    to_be_processed
                                FROM
                                    wsc_ahcs_lsi_err_t
                                ORDER BY
                                    created_date DESC
                            )
                    )
            );

        o_clobdata := l_clob;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line(sqlerrm);
    END;

    PROCEDURE wsc_lsi_update_process_flag (
        p_batch_id       VARCHAR2,
        p_ledger_grp_num VARCHAR2
    ) AS

        lv_batch_id VARCHAR2(200);
        CURSOR c1 (
            l_batch_id VARCHAR2
        ) IS
        SELECT
            batch_id,
            COUNT(
                CASE
                    WHEN status IS NULL THEN
                        1
                END
            ) cnt
        FROM
            wsc_ahcs_int_control_line_t
        WHERE
            batch_id IN l_batch_id
        GROUP BY
            batch_id;

    BEGIN
        lv_batch_id := regexp_replace(p_batch_id, ' ', ',');
        BEGIN
            FOR rc1 IN c1(lv_batch_id) LOOP
                IF rc1.cnt = 0 THEN
                    UPDATE wsc_ahcs_lsi_control_t
                    SET
                        to_be_processed = 'N',
                        last_updated_date = sysdate
                    WHERE
                        batch_id = rc1.batch_id;

                    COMMIT;
                END IF;
            END LOOP;

        END;

        BEGIN
            UPDATE wsc_ahcs_lsi_netting_entry_t a
            SET
                to_be_processed = 'N'
            WHERE
                batch_id IN lv_batch_id
                AND EXISTS (
                    SELECT
                        1
                    FROM
                        wsc_ahcs_int_mf_ledger_t
                    WHERE
                            ledger_grp_num = p_ledger_grp_num
                        AND sub_ledger = 'Oracle LSI'
                        AND ledger_name = a.ledger
                );

            COMMIT;
        END;

        BEGIN
            UPDATE wsc_ahcs_lsi_netting_entry_headers_t a
            SET
                to_be_processed = 'N'
            WHERE
                batch_id IN lv_batch_id
                AND EXISTS (
                    SELECT
                        1
                    FROM
                        wsc_ahcs_int_mf_ledger_t
                    WHERE
                            ledger_grp_num = p_ledger_grp_num
                        AND sub_ledger = 'Oracle LSI'
                        AND ledger_name = a.ledger_name
                );

            COMMIT;
        END;

        BEGIN
            UPDATE wsc_ahcs_lsi_journal_t a
            SET
                to_be_processed = 'N'
            WHERE
                batch_id IN lv_batch_id
                AND EXISTS (
                    SELECT
                        1
                    FROM
                        wsc_ahcs_int_mf_ledger_t
                    WHERE
                            ledger_grp_num = p_ledger_grp_num
                        AND sub_ledger = 'Oracle LSI'
                        AND ledger_name = a.ledger_name
                );

            COMMIT;
        END;

    END;

    PROCEDURE wsc_lsi_apar_p (
        in_wsc_apar_header IN wsc_lsi_apar_t_type_table
    ) AS
    BEGIN
        FORALL i IN 1..in_wsc_apar_header.count
            INSERT INTO wsc_ahcs_lsi_ap_ar_tmp_t (
                batch_id,
                record_type,
                extract_name,
                bu,
                bu_id,
                invoice_number,
                ledger_name,
                accounting_class,
                invoice_date,
                accounting_date,
                exchange_rate,
                exchange_rate_type,
                exchange_rate_date,
                entered_invoice_amount,
                accounted_invoice_amount,
                gl_code_combination,
                intercompany_legal_entity,
                intercompany_transaction_type,
                intercompany_batch_number,
                bank_acc,
                vendor_cust_name,
                vendor_cust_site,
                account_number,
                lockbox_number,
                lockbox_id,
                bank_origination_number,
                invoice_currency_code,
                functional_currency_code,
                netting_ledger,
                netting_fun_curr,
                ic_trx_number,
                invoice_id,
                accounting_period
            ) VALUES (
                NULL,
                in_wsc_apar_header(i).record_type,
                in_wsc_apar_header(i).file_name,
                in_wsc_apar_header(i).bu,
                in_wsc_apar_header(i).bu_id,
                in_wsc_apar_header(i).invoice_number,
                in_wsc_apar_header(i).ledger_name,
                in_wsc_apar_header(i).accounting_class,
                in_wsc_apar_header(i).invoice_date,
                in_wsc_apar_header(i).accounting_date,
                in_wsc_apar_header(i).exchange_rate,
                in_wsc_apar_header(i).exchange_rate_type,
                in_wsc_apar_header(i).exchange_rate_date,
                in_wsc_apar_header(i).entered_invoice_amount,
                in_wsc_apar_header(i).accounted_invoice_amount,
                in_wsc_apar_header(i).gl_code_combination,
                in_wsc_apar_header(i).intercompany_legal_entity,
                in_wsc_apar_header(i).intercompany_transaction_type,
                in_wsc_apar_header(i).intercompany_batch_number,
                in_wsc_apar_header(i).bank_acc,
                in_wsc_apar_header(i).vendor_cust_name,
                in_wsc_apar_header(i).vendor_cust_site,
                in_wsc_apar_header(i).account_number,
                in_wsc_apar_header(i).lockbox_number,
                in_wsc_apar_header(i).lockbox_id,
                in_wsc_apar_header(i).bank_origination_number,
                in_wsc_apar_header(i).invoice_currency_code,
                in_wsc_apar_header(i).functional_currency_code,
                in_wsc_apar_header(i).netting_ledger,
                in_wsc_apar_header(i).netting_fun_curr,
                in_wsc_apar_header(i).ic_trx_number,
                in_wsc_apar_header(i).invoice_id,
                in_wsc_apar_header(i).accounting_period
            );

        COMMIT;
    END wsc_lsi_apar_p;

    FUNCTION wsc_lsi_apar_batch_p RETURN NUMBER AS
        lv_batch_id NUMBER;
    BEGIN
        lv_batch_id := wsc_ahcs_batch_seq.nextval;
        RETURN ( lv_batch_id );
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;

    PROCEDURE wsc_lsi_async_netting_p (
        record_type VARCHAR2,
        p_batch_id  NUMBER,
        filename    IN VARCHAR2,
        errorbuf    OUT VARCHAR2,
        rectcode    OUT VARCHAR2
    ) AS
        err_msg  VARCHAR2(2000);
        err_code VARCHAR2(100);
    BEGIN
        dbms_scheduler.create_job(job_name => 'INVOKE_WSC_LSI_NETTING_P' || filename, job_type => 'PLSQL_BLOCK', job_action => 'BEGIN
            WSC_LSI_PKG.WSC_LSI_NETTING_P('''
                                                                                                                               || record_type
                                                                                                                               || ''','
                                                                                                                               || p_batch_id
                                                                                                                               || ');
       END;', enabled => true, auto_drop => true,
                                 comments => 'Async steps for netting');
    EXCEPTION
        WHEN OTHERS THEN
            wsc_ahcs_int_error_logging.error_logging(p_batch_id, 'EXT041'
                                                                 || '_'
                                                                 || 'LSI', 'Oracle LSI', 'Error in Creating Netting Async Job-' || sqlerrm);
    END;

    PROCEDURE wsc_async_lsi_match_process_p (
        record_type VARCHAR2,
        errmsg      OUT VARCHAR2,
        errcode     OUT VARCHAR2,
        filename    IN VARCHAR2
    ) AS
        err_msg     VARCHAR2(2000);
        lv_batch_id NUMBER;
        ab EXCEPTION;
    BEGIN
        IF record_type = 'AP-AR' THEN
            dbms_scheduler.create_job(job_name => 'INVOKE_WSC_LSI_APAR_MATCH_P' || filename, job_type => 'PLSQL_BLOCK', job_action =>
            'BEGIN
            WSC_LSI_PKG.WSC_LSI_APAR_MATCH_P('''
                                                                                                                                   ||
                                                                                                                                   filename
                                                                                                                                   ||
                                                                                                                                   ''');

       END;', enabled => true, auto_drop => true,
                                     comments => 'Async steps for matching AP and AR');

        ELSE
            dbms_scheduler.create_job(job_name => 'INVOKE_WSC_LSI_GL_MATCH_P' || filename, job_type => 'PLSQL_BLOCK', job_action => 'BEGIN
            WSC_LSI_PKG.WSC_LSI_JOURNALS_MATCH_P('''
                                                                                                                                 || filename
                                                                                                                                 || ''');

       END;', enabled => true, auto_drop => true,
                                     comments => 'Async steps for matching JOURNALS');
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            SELECT
                batch_id
            INTO lv_batch_id
            FROM
                wsc_ahcs_lsi_control_t
            WHERE
                file_name = filename;

            wsc_ahcs_int_error_logging.error_logging(lv_batch_id, 'EXT041'
                                                                  || '_'
                                                                  || 'LSI', 'Oracle LSI', 'Error in Creating Matching Async Job-' || sqlerrm);

    END;

    PROCEDURE wsc_async_lsi_fbdi_process_p (
        p_batch_id NUMBER
    ) AS
        err_msg VARCHAR2(2000);
    BEGIN
        dbms_scheduler.create_job(job_name => 'INVOKE_WSC_LSI_AR_FBDI_P' || p_batch_id, job_type => 'PLSQL_BLOCK', job_action => 'BEGIN
                 WSC_LSI_PKG.WSC_LSI_RECEIPT_FBDI_P('
                                                                                                                                 || p_batch_id
                                                                                                                                 || ');
       END;', enabled => true, auto_drop => true,
                                 comments => 'Async steps for creating FBDI template for receipt');
    EXCEPTION
        WHEN OTHERS THEN
            wsc_ahcs_int_error_logging.error_logging(p_batch_id, 'EXT041'
                                                                 || '_'
                                                                 || 'LSI', 'Oracle LSI', 'Error in Creating FBDI Async Job-' || sqlerrm);
    END;

    PROCEDURE wsc_lsi_lookup_p (
        in_wsc_lookup IN wsc_ahcs_lsi_lookup_t_type_table
    ) AS
    BEGIN
        BEGIN
            EXECUTE IMMEDIATE 'TRUNCATE TABLE WSC_AHCS_LSI_LOOKUP_T';
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
        FORALL i IN 1..in_wsc_lookup.count
            INSERT INTO wsc_ahcs_lsi_lookup_t (
                lookup_type,
                lookup_code,
                meaning,
                description,
                attribute1,
                attribute2,
                tag,
                ledger_name,
                functional_curr,
                attribute3,
                attribute4
            ) VALUES (
                in_wsc_lookup(i).lookup_type,
                in_wsc_lookup(i).lookup_code,
                in_wsc_lookup(i).meaning,
                in_wsc_lookup(i).description,
                in_wsc_lookup(i).attribute1,
                in_wsc_lookup(i).attribute2,
                in_wsc_lookup(i).tag,
                in_wsc_lookup(i).ledger_name,
                in_wsc_lookup(i).currency_code,
                in_wsc_lookup(i).attribute3,
                in_wsc_lookup(i).attribute4
            );

    END wsc_lsi_lookup_p;

    PROCEDURE wsc_lsi_exchage_rate_p (
        in_wsc_exchange_rate IN wsc_ahcs_lsi_exchange_rate_t_type_table
    ) AS
    BEGIN
        FORALL i IN 1..in_wsc_exchange_rate.count
            INSERT INTO wsc_ahcs_lsi_exchange_rate_t (
                from_currency,
                to_currency,
                conversion_date,
                conversion_rate_type,
                conversion_type,
                conversion_rate,
                inverse_converstion_rate
            )
                SELECT
                    in_wsc_exchange_rate(i).from_currency,
                    in_wsc_exchange_rate(i).to_currency,
                    in_wsc_exchange_rate(i).conversion_date,
                    in_wsc_exchange_rate(i).conversion_rate_type,
                    in_wsc_exchange_rate(i).conversion_type,
                    round(in_wsc_exchange_rate(i).conversion_rate, 30),
                    round(in_wsc_exchange_rate(i).inverse_converstion_rate, 30)
                FROM
                    dual
                WHERE
                    NOT EXISTS (
                        SELECT
                            1
                        FROM
                            wsc_ahcs_lsi_exchange_rate_t
                        WHERE
                                from_currency = in_wsc_exchange_rate(i).from_currency
                            AND to_currency = in_wsc_exchange_rate(i).to_currency
                            AND conversion_date = in_wsc_exchange_rate(i).conversion_date
                            AND conversion_rate_type = in_wsc_exchange_rate(i).conversion_rate_type
                    );

    END wsc_lsi_exchage_rate_p;

    PROCEDURE wsc_lsi_journals_match_p (
        p_file_name VARCHAR2
    ) IS

        lv_batch_id     NUMBER;
        l_extract       VARCHAR2(200);
        l_file_name     VARCHAR2(200);
        lv_error_msg    VARCHAR2(200);
        lv_match_count  NUMBER;
        lv_acc_date     TIMESTAMP;
        l_acc_date      DATE;
        lv_gp_unmatched NUMBER;
    BEGIN
        INSERT INTO wsc_ahcs_lsi_journal_t (
            ledger_name,
            legal_entity_name,
            gl_batch_id,
            gl_batch_name,
            gl_journal_id,
            journal_header_name,
            journal_line_number,
            gl_accounting_date,
            exchange_rate_date,
            exchange_rate,
            exchange_rate_type,
            segment1,
            segment2,
            segment3,
            segment4,
            segment5,
            segment6,
            segment7,
            segment8,
            segment9,
            journal_accounting_sequence,
            running_total_dr,
            running_total_cr,
            running_total_accounted_dr,
            running_total_accounted_cr,
            intercompany_batch_number,
            provider_legal_entity,
            intercompany_transaction_type,
            ledger_id,
            entered_currency_code,
            intercompany_transaction_number,
            je_source,
            status,
            actual_flag,
            accounting_period,
            le,
            file_name,
            to_be_processed,
            functional_currency_code,
            batch_id,
            extract_name,
            to_be_matched,
            party_type_flag
        )
            SELECT
                ledger_name,
                legal_entity_name,
                gl_batch_id,
                gl_batch_name,
                gl_journal_id,
                journal_header_name,
                journal_line_number,
                gl_accounting_date,
                exchange_rate_date,
                exchange_rate,
                exchange_rate_type,
                segment1,
                segment2,
                segment3,
                segment4,
                segment5,
                segment6,
                segment7,
                segment8,
                segment9,
                journal_accounting_sequence,
                running_total_dr,
                running_total_cr,
                running_total_accounted_dr,
                running_total_accounted_cr,
                intercompany_batch_number,
                provider_legal_entity,
                intercompany_transaction_type,
                ledger_id,
                entered_currency_code,
                intercompany_transaction_number,
                je_source,
                status,
                actual_flag,
                accounting_period,
                le,
                file_name,
                to_be_processed,
                functional_currency_code,
                batch_id,
                extract_name,
                'Y',
                party_type_flag
            FROM
                wsc_ahcs_lsi_journal_tmp_t a
            WHERE
                NOT EXISTS (
                    SELECT
                        1
                    FROM
                        wsc_ahcs_lsi_journal_t
                    WHERE
                            gl_batch_id = a.gl_batch_id
                        AND gl_journal_id = a.gl_journal_id
                        AND journal_line_number = a.journal_line_number
                );
   /*   WHERE (SEGMENT1,SEGMENT6,RUNNING_TOTAL_DR,INTERCOMPANY_BATCH_NUMBER,LEDGER_NAME )NOT IN 
     (SELECT SEGMENT1,SEGMENT6,RUNNING_TOTAL_DR,INTERCOMPANY_BATCH_NUMBER,LEDGER_NAME FROM WSC_AHCS_LSI_JOURNAL_T); */

        COMMIT;
        BEGIN
            SELECT DISTINCT
                gl_accounting_date
            INTO lv_acc_date
            FROM
                wsc_ahcs_lsi_journal_tmp_t;

            lv_acc_date := sysdate;
        EXCEPTION
            WHEN OTHERS THEN
                lv_acc_date := sysdate;
        END;

        BEGIN
            EXECUTE IMMEDIATE 'TRUNCATE TABLE WSC_AHCS_LSI_JOURNAL_TMP_T';
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
        SELECT
            wsc_lsi_apar_batch_p
        INTO lv_batch_id
        FROM
            dual;

        BEGIN
            SELECT
                CASE
                    WHEN trunc(CAST(nvl(lv_acc_date, systimestamp) AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE)) <= last_day(
                    to_date(acc_date.tag, 'YYYY/MM/DD')) THEN
                        trunc(CAST(nvl(lv_acc_date, systimestamp) AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE))
                    ELSE
                        last_day(to_date(acc_date.tag, 'YYYY/MM/DD'))
                END
            INTO l_acc_date
            FROM
                wsc_ahcs_lsi_lookup_t acc_date
            WHERE
                    lookup_type = 'WSC_LSI_WORKDAY_LOOKUP'
                AND trunc(CAST(nvl(lv_acc_date, systimestamp) AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE)) >= to_date(
                nvl(acc_date.meaning, trunc(CAST(nvl(lv_acc_date, systimestamp) AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME
                ZONE))), 'DD-MM-YYYY')
                AND ( ( trunc(CAST(nvl(lv_acc_date, systimestamp) AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE)) <= to_date(
                acc_date.description, 'DD-MM-YYYY')
                        AND acc_date.attribute1 = 'Yes' )
                      OR ( trunc(CAST(nvl(lv_acc_date, systimestamp) AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE)) < to_date(
                      acc_date.description, 'DD-MM-YYYY')
                           AND acc_date.attribute1 = 'No' ) );

        END;

        MERGE INTO wsc_ahcs_lsi_journal_match_t a
        USING (
                  SELECT
                      gr.extract_name                                                                   gr_extract_name,
                      gp.extract_name                                                                   gp_extract_name,
                      l_acc_date                                                                        gr_gl_acc_date,
                      gr.entered_currency_code                                                          gr_entered_currency_code,
                      gr.functional_currency_code                                                       gr_functional_currency_code,
                      gr.exchange_rate                                                                  gr_exchange_rate,
                      gr.exchange_rate_date                                                             gr_exchange_rate_date,
                      gr.journal_header_name                                                            gr_gl_journal_name,
                      gr.ledger_name                                                                    gr_ledger_name,
                      l_acc_date                                                                        gr_acc_date,
                      ( nvl(gr.running_total_cr, 0) - nvl(gr.running_total_dr, 0) )                     gr_running_total_dr,
                      ( nvl(gr.running_total_accounted_cr, 0) - nvl(gr.running_total_accounted_dr, 0) ) gr_running_total_accounted_dr,
                      gr.exchange_rate_type                                                             gr_exchange_rate_type,
                      gr.segment1                                                                       gr_segment1,
                      gr.segment2                                                                       gr_segment2,
                      gr.segment3                                                                       gr_segment3,
                      gr.segment4                                                                       gr_segment4,
                      gr.segment5                                                                       gr_segment5,
                      gr.segment6                                                                       gr_segment6,
                      gr.segment7                                                                       gr_segment7,
                      gr.segment8                                                                       gr_segment8,
                      gr.segment9                                                                       gr_segment9,
                      gr.legal_entity_name                                                              gr_intercompany_legal_entity,
                      gr.provider_legal_entity                                                          gr_provider_legal_entity,
                      gr.intercompany_transaction_type                                                  gr_intercompany_transaction_type,
                      gr.intercompany_batch_number                                                      gr_intercompany_batch_number,
                      gr.intercompany_transaction_number                                                gr_intercompany_transaction_number,
                      gr.gl_batch_id                                                                    gr_gl_batch_id,
                      gr.gl_journal_id                                                                  gr_gl_journal_id,
                      gr.journal_line_number                                                            gr_journal_line_number,
                      gr.le                                                                             gr_le,
                      gr.journal_accounting_sequence                                                    gr_journal_accounting_sequence,
                      gp.journal_header_name                                                            gp_gl_journal_name,
                      gp.ledger_name                                                                    gp_ledger_name,
                      l_acc_date                                                                        gp_acc_date,
                      gp.exchange_rate                                                                  gp_exchange_rate,
                      gp.exchange_rate_type                                                             gp_exchange_rate_type,
                      gp.exchange_rate_date                                                             gp_exchange_rate_date,
                      ( nvl(gp.running_total_dr, 0) - nvl(gp.running_total_cr, 0) )                     gp_running_total_dr,
                      ( nvl(gp.running_total_accounted_dr, 0) - nvl(gp.running_total_accounted_cr, 0) ) gp_running_total_accounted_dr,
                      gp.segment1                                                                       gp_segment1,
                      gp.segment2                                                                       gp_segment2,
                      gp.segment3                                                                       gp_segment3,
                      gp.segment4                                                                       gp_segment4,
                      gp.segment5                                                                       gp_segment5,
                      gp.segment6                                                                       gp_segment6,
                      gp.segment7                                                                       gp_segment7,
                      gp.segment8                                                                       gp_segment8,
                      gp.segment9                                                                       gp_segment9,
                      gp.legal_entity_name                                                              gp_legal_entity_name,
                      gp.provider_legal_entity                                                          gp_provider_legal_entity,
                      gp.intercompany_transaction_type                                                  gp_intercompany_transaction_type,
                      gp.intercompany_batch_number                                                      gp_intercompany_batch_number,
                      gp.entered_currency_code                                                          gp_entered_currency_code,
                      gp.functional_currency_code                                                       gp_functional_currency_code,
                      gp.intercompany_transaction_number                                                gp_intercompany_transaction_number,
                      gp.gl_batch_id                                                                    gp_gl_batch_id,
                      gp.gl_journal_id                                                                  gp_gl_journal_id,
                      gp.journal_line_number                                                            gp_journal_line_number,
                      gp.le                                                                             gp_le,
                      gp.journal_accounting_sequence                                                    gp_journal_accounting_sequence,
                      gr.accounting_period
                  FROM
                      wsc_ahcs_lsi_journal_t gp,
                      wsc_ahcs_lsi_journal_t gr
                  WHERE
                          1 = 1
                    ---AND NVL(GR.RUNNING_TOTAL_DR,0)=NVL(GP.RUNNING_TOTAL_DR,0)
                      AND gr.intercompany_batch_number = gp.intercompany_batch_number
                      AND gr.intercompany_transaction_number = gp.intercompany_transaction_number
                      AND gp.segment6 = gr.segment1
                      AND gp.segment1 = gr.segment6
                      AND gr.party_type_flag = 'R'
                      AND gp.party_type_flag = 'I'
                      AND gp.to_be_matched = 'Y'
                      AND gr.to_be_matched = 'Y'
                      AND NOT EXISTS (
                          SELECT
                              1
                          FROM
                              wsc_ahcs_lsi_journal_match_t
                          WHERE
                                  gr_gl_batch_id = gr.gl_batch_id
                              AND gr_gl_journal_id = gr.gl_journal_id
                              AND gr_journal_line_number = gr.journal_line_number
                      )
                      AND NOT EXISTS (
                          SELECT
                              1
                          FROM
                              wsc_ahcs_lsi_journal_match_t
                          WHERE
                                  gp_gl_batch_id = gp.gl_batch_id
                              AND gp_gl_journal_id = gp.gl_journal_id
                              AND gp_journal_line_number = gp.journal_line_number
                      )
              )
        b ON ( a.gr_intercompany_batch_number = b.gr_intercompany_batch_number
               AND a.gp_ledger_name = b.gp_ledger_name
               AND a.gr_ledger_name = b.gr_ledger_name
               AND a.gp_intercompany_transaction_number = b.gp_intercompany_transaction_number )
        WHEN NOT MATCHED THEN
        INSERT (
            batch_id,
            gp_extract_name,
            gr_extract_name,
            gr_gl_accounting_date,
            gr_entered_currency_code,
            gr_functional_currency_code,
            gr_exchange_rate,
            gr_exchange_rate_type,
            gr_exchange_rate_date,
            gr_gl_journal_id,
            gr_gl_journal_name,
            gr_journal_line_number,
            gr_ledger_name,
            gr_running_total_dr,
            gr_running_total_accounted_dr,
            gr_segment1,
            gr_segment2,
            gr_segment3,
            gr_segment4,
            gr_segment5,
            gr_segment6,
            gr_segment7,
            gr_segment8,
            gr_segment9,
            gr_legal_entity_name,
            gr_intercompany_transaction_type,
            gr_intercompany_batch_number,
            gr_intercompany_transaction_number,
            gr_gl_batch_id,
            gr_le,
            gr_journal_accounting_sequence,
            gp_gl_accounting_date,
            gp_entered_currency_code,
            gp_functional_currency_code,
            gp_exchange_rate,
            gp_exchange_rate_type,
            gp_exchange_rate_date,
            gp_gl_journal_id,
            gp_gl_journal_name,
            gp_journal_line_number,
            gp_ledger_name,
            gp_running_total_dr,
            gp_running_total_accounted_dr,
            gp_segment1,
            gp_segment2,
            gp_segment3,
            gp_segment4,
            gp_segment5,
            gp_segment6,
            gp_segment7,
            gp_segment8,
            gp_segment9,
            gp_legal_entity_name,
            gp_intercompany_transaction_type,
            gp_intercompany_batch_number,
            gp_intercompany_transaction_number,
            gp_gl_batch_id,
            gp_le,
            gp_journal_accounting_sequence,
            accounting_period )
        VALUES
            ( lv_batch_id,
              b.gp_extract_name,
              b.gr_extract_name,
              b.gr_gl_acc_date,
              b.gr_entered_currency_code,
              b.gr_functional_currency_code,
              b.gr_exchange_rate,
              b.gr_exchange_rate_type,
              b.gr_exchange_rate_date,
              b.gr_gl_journal_id,
              b.gr_gl_journal_name,
              b.gr_journal_line_number,
              b.gr_ledger_name,
              b.gr_running_total_dr,
              b.gr_running_total_accounted_dr,
              b.gr_segment1,
              b.gr_segment2,
              b.gr_segment3,
              b.gr_segment4,
              b.gr_segment5,
              b.gr_segment6,
              b.gr_segment7,
              b.gr_segment8,
              b.gr_segment9,
              b.gr_intercompany_legal_entity,
              b.gr_intercompany_transaction_type,
              b.gr_intercompany_batch_number,
              b.gr_intercompany_transaction_number,
              b.gr_gl_batch_id,
              b.gr_le,
              b.gr_journal_accounting_sequence,
              b.gp_acc_date,
              b.gp_entered_currency_code,
              b.gp_functional_currency_code,
              b.gp_exchange_rate,
              b.gp_exchange_rate_type,
              b.gp_exchange_rate_date,
              b.gp_gl_journal_id,
              b.gp_gl_journal_name,
              b.gp_journal_line_number,
              b.gp_ledger_name,
              b.gp_running_total_dr,
              b.gp_running_total_accounted_dr,
              b.gp_segment1,
              b.gp_segment2,
              b.gp_segment3,
              b.gp_segment4,
              b.gp_segment5,
              b.gp_segment6,
              b.gp_segment7,
              b.gp_segment8,
              b.gp_segment9,
              b.gp_legal_entity_name,
              b.gp_intercompany_transaction_type,
              b.gp_intercompany_batch_number,
              b.gp_intercompany_transaction_number,
              b.gp_gl_batch_id,
              b.gp_le,
              b.gp_journal_accounting_sequence,
            to_char(b.gr_gl_acc_date, 'MON-YYYY') );

        IF SQL%rowcount > 0 THEN
            lv_match_count := SQL%rowcount;
            BEGIN
                SELECT
                    LISTAGG(f_name, ',') WITHIN GROUP(
                    ORDER BY
                        f_name
                    )
                INTO l_extract
                FROM
                    (
                        SELECT UNIQUE
                            ( gp_extract_name ) f_name
                        FROM
                            wsc_ahcs_lsi_journal_match_t
                        WHERE
                            batch_id = lv_batch_id
                        UNION ALL
                        SELECT UNIQUE
                            ( gr_extract_name ) f_name
                        FROM
                            wsc_ahcs_lsi_journal_match_t
                        WHERE
                            batch_id = lv_batch_id
                    );

            END;

            l_file_name := 'ORACLELSI_GL_' || to_char(sysdate, 'DDMMYYYYHH24MISS');
            UPDATE wsc_ahcs_lsi_control_t
            SET
                batch_id = lv_batch_id,
                status = 'MATCHED',
                inv_pay_status = 'NOT APPLICABLE',
                receipt_status = 'NOT APPLICABLE',
                inv_create_status = 'NOT APPLICABLE',
                inv_validation_status = 'NOT APPLICABLE',
                to_be_processed = 'Y',
                last_updated_date = sysdate,
                all_extracts = l_extract,
                file_name = l_file_name,
                matched_count = lv_match_count,
                accounting_date = l_acc_date
      --AHCS_ELIGIBLE_LINES=LV_MATCH_COUNT
            WHERE
                extract_name = p_file_name;

            COMMIT;
            INSERT INTO wsc_ahcs_int_control_t (
                batch_id,
                source_application,
                target_application,
                file_name,
                status,
                source_system,
                target_system,
                created_by,
                created_date,
                last_updated_by,
                last_updated_date
            ) VALUES (
                lv_batch_id,
                'Oracle LSI',
                'Oracle AHCS',
                l_file_name,
                'TRANSFORM_SUCCESS',
                'Oracle LSI',
                'Oracle ERP Cloud',
                'FININT',
                sysdate,
                'FININT',
                sysdate
            );

            COMMIT;
            UPDATE wsc_ahcs_lsi_journal_match_t
            SET
                file_name = l_file_name
            WHERE
                batch_id = lv_batch_id;

            COMMIT;
            UPDATE wsc_ahcs_lsi_journal_t
            SET
                file_name = l_file_name,
                batch_id = lv_batch_id,
                gl_accounting_date = l_acc_date
            WHERE
                    to_be_matched = 'Y'
                AND extract_name IN (
                    SELECT UNIQUE
                        ( gp_extract_name ) f_name
                    FROM
                        wsc_ahcs_lsi_journal_match_t
                    WHERE
                        batch_id = lv_batch_id
                    UNION ALL
                    SELECT UNIQUE
                        ( gr_extract_name ) f_name
                    FROM
                        wsc_ahcs_lsi_journal_match_t
                    WHERE
                        batch_id = lv_batch_id
                );

            COMMIT;
            UPDATE wsc_ahcs_lsi_journal_t a
            SET
                status = 'MATCHED',
                to_be_matched = 'N'
            WHERE
                EXISTS (
                    SELECT
                        1
                    FROM
                        wsc_ahcs_lsi_journal_match_t
                    WHERE
                            batch_id = lv_batch_id
                        AND a.gl_batch_id = gp_gl_batch_id
                        AND a.gl_journal_id = gp_gl_journal_id
                        AND a.journal_line_number = gp_journal_line_number
                    UNION ALL
                    SELECT
                        1
                    FROM
                        wsc_ahcs_lsi_journal_match_t
                    WHERE
                            batch_id = lv_batch_id
                        AND a.gl_batch_id = gr_gl_batch_id
                        AND a.gl_journal_id = gr_gl_journal_id
                        AND a.journal_line_number = gr_journal_line_number
                );

            COMMIT;
            wsc_lsi_netting_p('GL', lv_batch_id);
        ELSE
            UPDATE wsc_ahcs_lsi_control_t
            SET
                status = 'NOT MATCHED',
                to_be_processed = 'N',
                last_updated_date = sysdate
            WHERE
                extract_name = p_file_name;

            COMMIT;
        END IF;

        BEGIN
            SELECT
                COUNT(1)
            INTO lv_gp_unmatched
            FROM
                wsc_ahcs_lsi_journal_t
            WHERE
                status IS NULL;

        END;
        UPDATE wsc_ahcs_lsi_control_t
        SET
            ap_unmatch_count = lv_gp_unmatched
        WHERE
            batch_id = lv_batch_id;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            UPDATE wsc_ahcs_lsi_control_t
            SET
                status = 'NOT MATCHED',
                to_be_processed = 'N',
                last_updated_date = sysdate
            WHERE
                extract_name = p_file_name;

            COMMIT;
            lv_error_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                p_file_name,
                'ERROR IN MATCHING',
                lv_error_msg,
                sysdate,
                'FININT',
                sysdate,
                'N',
                'FININT',
                lv_batch_id,
                'Y'
            );

            COMMIT;
            wsc_ahcs_int_error_logging.error_logging(lv_batch_id, 'EXT041'
                                                                  || '_'
                                                                  || 'LSI', 'Oracle LSI', 'Error in Journals Matching Process-' || sqlerrm);

    END;

    PROCEDURE wsc_lsi_apar_match_p (
        p_file_name VARCHAR2
    ) IS

        CURSOR dist_payment (
            p_batch_id NUMBER
        ) IS
        SELECT
            ap_payment_currency,
            ap_bu,
            ap_bank_acc,
            ap_vendor_name,
            ap_vendor_site,
            ap_exchange_rate_type
        FROM
            (
                SELECT
                    ap.ap_payment_currency,
                    ap.ap_bu,
                    ap.ap_bank_acc,
                    ap.ap_vendor_name,
                    ap.ap_vendor_site,
                    ap.ap_exchange_rate_type
                FROM
                    wsc_ahcs_lsi_ap_ar_match_t ap
                WHERE
                    ( ap.status IS NULL
                      OR ap.status = 'ERROR' )
                    AND batch_id = p_batch_id
                GROUP BY
                    ap.ap_payment_currency,
                    ap.ap_bu,
                    ap.ap_bank_acc,
                    ap.ap_vendor_name,
                    ap.ap_vendor_site,
                    ap.ap_exchange_rate_type
            );

   /* Cursor C_INV_SELECTION( P_BATCH_ID NUMBER,
    P_AP_PAYMENT_CURRENCY VARCHAR2,
    P_AP_BU VARCHAR2,
    P_AP_BANK_ACC VARCHAR2,
    P_AP_VENDOR_NAME VARCHAR2,
    P_AP_VENDOR_SITE VARCHAR2,
    P_AP_EXCHANGE_RATE_TYPE VARCHAR2) is
                with main as (
              select ap_invoice_id,rownum from WSC_AHCS_LSI_AP_AR_MATCH_T
              where batch_id=P_BATCH_ID and AP_ENTERED_INVOICE_AMOUNT>0 and ap_payment_currency=P_AP_PAYMENT_CURRENCY
              AND AP_BU=P_AP_BU and AP_BANK_ACC=P_AP_BANK_ACC and AP_VENDOR_NAME=P_AP_VENDOR_NAME
              AND AP_VENDOR_SITE=P_AP_VENDOR_SITE AND NVL(AP_EXCHANGE_RATE_TYPE,'1')=NVL(P_AP_EXCHANGE_RATE_TYPE,'1')
              order by AP_ENTERED_INVOICE_AMOUNT desc
            ), submain as (
              select r.*,
                     ceil ( rownum / 250 ) grp
              from   main r
            )
              select grp,
                     listagg ( ap_invoice_id, ',' )
                       within group (
                         order by ap_invoice_id
                       ) vals
              from   submain
              group  by grp; */

        CURSOR c_inv_selection (
            p_batch_id              NUMBER,
            p_ap_payment_currency   VARCHAR2,
            p_ap_bu                 VARCHAR2,
            p_ap_bank_acc           VARCHAR2,
            p_ap_vendor_name        VARCHAR2,
            p_ap_vendor_site        VARCHAR2,
            p_ap_exchange_rate_type VARCHAR2
        ) IS
        SELECT
            *
        FROM
            wsc_ahcs_lsi_ap_ar_match_t apar
        WHERE
                batch_id = p_batch_id
            AND ap_entered_invoice_amount > 0
            AND ap_payment_currency = p_ap_payment_currency
            AND ap_bu = p_ap_bu
            AND ap_bank_acc = p_ap_bank_acc
            AND ap_vendor_name = p_ap_vendor_name
            AND ap_vendor_site = p_ap_vendor_site
            AND nvl(ap_exchange_rate_type, '1') = nvl(p_ap_exchange_rate_type, '1')
            AND NOT EXISTS (
                SELECT
                    1
                FROM
                    wsc_ahcs_lsi_ap_t
                WHERE
                        payment_currency = p_ap_payment_currency
                    AND bu = p_ap_bu
                    AND bank_acc = p_ap_bank_acc
                    AND vendor_name = p_ap_vendor_name
                    AND vendor_site = p_ap_vendor_site
                    AND intercompany_batch_number = apar.ap_intercompany_batch_number
                    AND ic_trx_number = apar.ap_ic_trx_number
                               -- AND INVOICE_NUMBER=APAR.AP_INVOICE_NUMBER
            )
        ORDER BY
            ap_entered_invoice_amount DESC;

        CURSOR c_credit_memo (
            p_ap_payment_currency   VARCHAR2,
            p_ap_bu                 VARCHAR2,
            p_ap_bank_acc           VARCHAR2,
            p_ap_vendor_name        VARCHAR2,
            p_ap_vendor_site        VARCHAR2,
            p_ap_exchange_rate_type VARCHAR2
        ) IS
        SELECT
            apart.*,
            lt.description,
            lt.tag,
            lt.ledger_name pay_method
        FROM
            wsc_ahcs_lsi_ap_ar_t  apart,
            wsc_ahcs_lsi_lookup_t lt
        WHERE
                record_type = 'AP'
            AND check_id IS NULL
            AND batch_id IS NULL
            AND entered_invoice_amount < 0
            AND invoice_currency_code = p_ap_payment_currency
            AND bu = p_ap_bu
            AND bank_acc = p_ap_bank_acc
            AND vendor_cust_name = p_ap_vendor_name
            AND vendor_cust_site = p_ap_vendor_site
            AND nvl(exchange_rate_type, '1') = nvl(p_ap_exchange_rate_type, '1')
            AND NOT EXISTS (
                SELECT
                    1
                FROM
                    wsc_ahcs_lsi_ap_t
                WHERE
                        1 = 1 --INVOICE_NUMBER=APART.INVOICE_NUMBER
                    AND ic_trx_number = apart.ic_trx_number
                    AND bu = apart.bu
                    AND intercompany_batch_number = apart.intercompany_batch_number
            )
            AND EXISTS (
                SELECT
                    1
                FROM
                    wsc_ahcs_lsi_ap_ar_t
                WHERE
                        record_type = 'AR'
                    AND 1 = 1 --INVOICE_NUMBER=APART.INVOICE_NUMBER
                    AND ic_trx_number = apart.ic_trx_number
                                --AND BU=APART.BU
                    AND entered_invoice_amount = apart.entered_invoice_amount
                    AND intercompany_batch_number = apart.intercompany_batch_number
            )
            AND lt.lookup_type = 'WSC_LSI_BANK_DETAILS'
            AND lt.attribute1 = apart.intercompany_legal_entity
        ORDER BY
            ( entered_invoice_amount ) DESC;

        lv_batch_id           NUMBER;
        l_extract             VARCHAR2(500);
        l_file_name           VARCHAR2(200);
        lv_error_msg          VARCHAR2(200);
        lv_counter1           NUMBER := 0;
        lv_counter2           NUMBER := 0;
        l_acc_date            DATE;
        lv_paynum             NUMBER := 0;
        lv_match_count        NUMBER;
        lv_ap_unmatched       NUMBER := 0;
        lv_ar_unmatched       NUMBER := 0;
        lv_acc_date           TIMESTAMP;
        lv_sum_ap_entered_amt NUMBER := 0;
        lv_ap_count           NUMBER;
        lv_ic_btch_number     VARCHAR2(180);
        lv_invoice_counter    NUMBER := 0;
    BEGIN
        BEGIN
            DELETE FROM wsc_ahcs_lsi_ap_ar_t
            WHERE
                payment_number IS NULL
                AND status IS NULL;

            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;

        BEGIN
            INSERT INTO wsc_ahcs_lsi_ap_ar_t
                SELECT
                    *
                FROM
                    wsc_ahcs_lsi_ap_ar_tmp_t a
                WHERE
                    NOT EXISTS (
                        SELECT
                            *
                        FROM
                            wsc_ahcs_lsi_ap_ar_t
                        WHERE
                                record_type = a.record_type
                            AND invoice_id = a.invoice_id
                    );
                  --  AND INVOICE_CURRENCY_CODE=A.INVOICE_CURRENCY_CODE
                  --  AND INTERCOMPANY_BATCH_NUMBER=A.INTERCOMPANY_BATCH_NUMBER
                  --  AND BU=A.BU);
            COMMIT;
        END;

        BEGIN
            SELECT DISTINCT
                accounting_date
            INTO lv_acc_date
            FROM
                wsc_ahcs_lsi_ap_ar_tmp_t;

        EXCEPTION
            WHEN OTHERS THEN
                lv_acc_date := NULL;
        END;

        BEGIN
            EXECUTE IMMEDIATE 'TRUNCATE TABLE WSC_AHCS_LSI_AP_AR_TMP_T';
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
        BEGIN
            SELECT
                CASE
                    WHEN trunc(CAST(nvl(lv_acc_date, systimestamp) AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE)) <= last_day(
                    to_date(acc_date.tag, 'YYYY/MM/DD')) THEN
                        trunc(CAST(nvl(lv_acc_date, systimestamp) AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE))
                    ELSE
                        last_day(to_date(acc_date.tag, 'YYYY/MM/DD'))
                END
            INTO l_acc_date
            FROM
                wsc_ahcs_lsi_lookup_t acc_date
            WHERE
                    lookup_type = 'WSC_LSI_WORKDAY_LOOKUP'
                AND trunc(CAST(nvl(lv_acc_date, systimestamp) AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE)) >= to_date(
                nvl(acc_date.meaning, trunc(CAST(nvl(lv_acc_date, systimestamp) AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME
                ZONE))), 'DD-MM-YYYY')
                AND ( ( trunc(CAST(nvl(lv_acc_date, systimestamp) AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE)) <= to_date(
                acc_date.description, 'DD-MM-YYYY')
                        AND acc_date.attribute1 = 'Yes' )
                      OR ( trunc(CAST(nvl(lv_acc_date, systimestamp) AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE)) < to_date(
                      acc_date.description, 'DD-MM-YYYY')
                           AND acc_date.attribute1 = 'No' ) );

        END;

        SELECT
            wsc_lsi_apar_batch_p
        INTO lv_batch_id
        FROM
            dual;

        MERGE INTO wsc_ahcs_lsi_ap_ar_match_t a
        USING (
                  SELECT
                      ap.extract_name                  extract_name_ap,
                      ap.invoice_date                  ap_invoice_date,
                      ap.invoice_currency_code         ap_invoice_currency_code,
                      ap.bu                            ap_bu,
                      lt.attribute2                    ap_bank_acc, ---AP.BANK_ACC
                      ap.vendor_cust_name              ap_vendor_cust_name,
                      ap.vendor_cust_site              ap_vendor_cust_site,
                      ap.exchange_rate                 ap_exchange_rate,
                      ap.exchange_rate_date            ap_exchange_rate_date,
                      ap.invoice_number                ap_invoice_number,
                      ap.ledger_name                   ap_ledger_name,
                      ap.accounting_class              ap_accounting_class,
                      l_acc_date                       ap_accounting_date,
                      ap.entered_invoice_amount        ap_entered_invoice_amount,
                      ap.accounted_invoice_amount      ap_accounted_invoice_amount,
                      ap.exchange_rate_type            ap_exchange_rate_type,
                      ap.gl_code_combination           ap_gl_code_combination,
                      ap.intercompany_legal_entity     ap_intercompany_legal_entity,
                      ap.intercompany_transaction_type ap_intercompany_transaction_type,
                      ap.intercompany_batch_number     ap_intercompany_batch_number,
                      ap.functional_currency_code      ap_functional_currency_code,
                      ap.netting_ledger                ap_netting_ledger,
                      ap.netting_fun_curr              ap_netting_fun_curr,
                      ap.ic_trx_number                 ap_ic_trx_number,
                      ap.invoice_id                    ap_invoice_id,
                      ar.extract_name                  extract_name_ar,
                      ar.bu                            ar_bu,
                      ar.bu_id                         ar_bu_id,
                      ar.invoice_number                ar_invoice_number,
                      ar.ledger_name                   ar_ledger_name,
                      ar.accounting_class              ar_accounting_class,
                      ar.invoice_date                  ar_invoice_date,
                      l_acc_date                       ar_accounting_date,
                      ar.exchange_rate                 ar_exchange_rate,
                      ar.exchange_rate_type            ar_exchange_rate_type,
                      ar.exchange_rate_date            ar_exchange_rate_date,
                      ar.entered_invoice_amount        ar_entered_invoice_amount,
                      ar.accounted_invoice_amount      ar_accounted_invoice_amount,
                      ar.gl_code_combination           ar_gl_code_combination,
                      ar.intercompany_legal_entity     ar_intercompany_legal_entity,
                      ar.intercompany_transaction_type ar_intercompany_transaction_type,
                      ar.intercompany_batch_number     ar_intercompany_batch_number,
                      ar.vendor_cust_name              ar_vendor_cust_name,
                      ar.vendor_cust_site              ar_vendor_cust_site,
                      ar.account_number                ar_account_number,
                      ar.lockbox_number                ar_lockbox_number,
                      ar.lockbox_id                    ar_lockbox_id,
                      ar.bank_origination_number       ar_bank_origination_number,
                      ar.invoice_currency_code         ar_invoice_currency_code,
                      ar.functional_currency_code      ar_functional_currency_code,
                      ar.ic_trx_number                 ar_ic_trx_number,
                      ar.invoice_id                    ar_invoice_id,
                      ap.accounting_period,
                      lt.description,
                      lt.tag,
                      lt.ledger_name                   pay_method
                  FROM
                      wsc_ahcs_lsi_ap_ar_t  ap,
                      wsc_ahcs_lsi_ap_ar_t  ar,
                      wsc_ahcs_lsi_lookup_t lt
                  WHERE
                          1 = 1 --AP.INVOICE_NUMBER=AR.INVOICE_NUMBER
                      AND ap.record_type = 'AP'
                      AND ar.record_type = 'AR'
                      AND ap.accounting_class = 'LIABILITY'
                      AND ar.accounting_class = 'RECEIVABLE'
                      AND ap.entered_invoice_amount = ar.entered_invoice_amount
                      AND ar.intercompany_batch_number = ap.intercompany_batch_number
                      AND ar.ic_trx_number = ap.ic_trx_number
                      AND ap.check_id IS NULL
                      AND ar.payment_number IS NULL
                      AND ap.batch_id IS NULL
                      AND ar.batch_id IS NULL
                      AND substr(ap.gl_code_combination, 1, 4) = substr(ar.gl_code_combination, 29, 4)
                      AND substr(ar.gl_code_combination, 1, 4) = substr(ap.gl_code_combination, 29, 4)
                      AND NOT EXISTS (
                          SELECT
                              1
                          FROM
                              wsc_ahcs_lsi_ap_t
                          WHERE
                                  1 = 1 --INVOICE_NUMBER=AP.INVOICE_NUMBER
                              AND ic_trx_number = ap.ic_trx_number
                              AND bu = ap.bu
                              AND intercompany_batch_number = ap.intercompany_batch_number
                      )
                      AND NOT EXISTS (
                          SELECT
                              1
                          FROM
                              wsc_ahcs_lsi_ar_t
                          WHERE
                                  1 = 1 --INVOICE_NUMBER=AR.INVOICE_NUMBER
                              AND ic_trx_number = ar.ic_trx_number
                              AND bu = ar.bu
                              AND intercompany_batch_number = ar.intercompany_batch_number
                      )
                      AND lt.lookup_type = 'WSC_LSI_BANK_DETAILS'
                      AND lt.attribute1 = ap.intercompany_legal_entity
              )
        b ON ( a.ap_intercompany_batch_number = b.ap_intercompany_batch_number
               AND a.ap_bu = b.ap_bu
               AND a.ar_bu = b.ar_bu
               AND substr(a.ap_gl_code_combination, 1, 4) = substr(b.ar_gl_code_combination, 29, 4)
               AND a.ar_ic_trx_number = b.ar_ic_trx_number
               AND a.ap_ic_trx_number = b.ap_ic_trx_number )
        WHEN NOT MATCHED THEN
        INSERT (
            batch_id,
            extract_name_ap,
            extract_name_ar,
            ap_payment_date,
            ap_payment_type,
            ap_payment_desc,
            ap_payment_currency,
            ap_bu,
            ap_vendor_name,
            ap_vendor_site,
            ap_bank_acc,
            ap_payment_method,
            ap_payment_process_profile,
            ap_payment_document,
            ap_exchange_rate,
            ap_exchange_rate_type,
            ap_exchange_rate_date,
            ap_invoice_number,
            ap_ledger_name,
            ap_accounting_class,
            ap_invoice_date,
            ap_accounting_date,
            ap_entered_invoice_amount,
            ap_accounted_invoice_amount,
            ap_gl_code_combination,
            ap_intercompany_legal_entity,
            ap_intercompany_transaction_type,
            ap_intercompany_batch_number,
            ap_discount_taken,
            ap_installment_number,
            ap_functional_currency_code,
            ap_netting_ledger,
            ap_netting_fun_curr,
            ap_ic_trx_number,
            ap_invoice_id,
            ar_bu,
            ar_bu_id,
            ar_invoice_number,
            ar_ledger_name,
            ar_accounting_class,
            ar_invoice_date,
            ar_accounting_date,
            ar_exchange_rate,
            ar_exchange_rate_type,
            ar_exchange_rate_date,
            ar_entered_invoice_amount,
            ar_accounted_invoice_amount,
            ar_gl_code_combination,
            ar_intercompany_legal_entity,
            ar_intercompany_transaction_type,
            ar_intercompany_batch_number,
            ar_cust_name,
            ar_cust_site,
            ar_account_number,
            ar_lockbox_number,
            ar_lockbox_id,
            ar_bank_origination_number,
            ar_invoice_currency_code,
            ar_functional_currency_code,
            ar_ic_trx_number,
            ar_invoice_id,
            accounting_period )
        VALUES
            ( lv_batch_id,
              b.extract_name_ap,
              b.extract_name_ar,
              b.ap_invoice_date,
            'Manual',
            'Manual_Payment',
              b.ap_invoice_currency_code,
              b.ap_bu,
              b.ap_vendor_cust_name,
              b.ap_vendor_cust_site,
              b.ap_bank_acc,
              b.description, --'LSI',
              b.tag, --'WSC Payment Process',
              b.pay_method, --'IC CHECK',
              b.ap_exchange_rate,
              b.ap_exchange_rate_type,
              b.ap_exchange_rate_date,
              b.ap_invoice_number,
              b.ap_ledger_name,
              b.ap_accounting_class,
              b.ap_invoice_date,
              b.ap_accounting_date,
              b.ap_entered_invoice_amount,
              b.ap_accounted_invoice_amount,
              b.ap_gl_code_combination,
              b.ap_intercompany_legal_entity,
              b.ap_intercompany_transaction_type,
              b.ap_intercompany_batch_number,
            0,
            1,
              b.ap_functional_currency_code,
              b.ap_netting_ledger,
              b.ap_netting_fun_curr,
              b.ap_ic_trx_number,
              b.ap_invoice_id,
              b.ar_bu,
              b.ar_bu_id,
              b.ar_invoice_number,
              b.ar_ledger_name,
              b.ar_accounting_class,
              b.ar_invoice_date,
              b.ar_accounting_date,
              b.ar_exchange_rate,
              b.ar_exchange_rate_type,
              b.ar_exchange_rate_date,
              b.ar_entered_invoice_amount,
              b.ar_accounted_invoice_amount,
              b.ar_gl_code_combination,
              b.ar_intercompany_legal_entity,
              b.ar_intercompany_transaction_type,
              b.ar_intercompany_batch_number,
              b.ar_vendor_cust_name,
              b.ar_vendor_cust_site,
              b.ar_account_number,
              b.ar_lockbox_number,
              b.ar_lockbox_id,
              b.ar_bank_origination_number,
              b.ar_invoice_currency_code,
              b.ar_functional_currency_code,
              b.ar_ic_trx_number,
              b.ar_invoice_id,
              b.accounting_period );

        IF SQL%rowcount > 0 THEN
            lv_match_count := SQL%rowcount;
            BEGIN
                SELECT
                    LISTAGG(f_name, ',') WITHIN GROUP(
                    ORDER BY
                        f_name
                    )
                INTO l_extract
                FROM
                    (
                        SELECT UNIQUE
                            ( extract_name_ap ) f_name
                        FROM
                            wsc_ahcs_lsi_ap_ar_match_t
                        WHERE
                            batch_id = lv_batch_id
                        UNION
                        SELECT UNIQUE
                            ( extract_name_ar ) f_name
                        FROM
                            wsc_ahcs_lsi_ap_ar_match_t
                        WHERE
                            batch_id = lv_batch_id
                    );

            END;

            l_file_name := 'ORACLELSI_APAR_' || to_char(sysdate, 'DDMMYYYYHH24MISS');
            UPDATE wsc_ahcs_lsi_control_t
            SET
                batch_id = lv_batch_id,
                status = 'MATCHED',
      --TO_BE_PROCESSED='Y',
                last_updated_date = sysdate,
                all_extracts = l_extract,
                file_name = l_file_name,
                accounting_date = l_acc_date,
                matched_count = lv_match_count
            WHERE
                extract_name = p_file_name;

            COMMIT;
            INSERT INTO wsc_ahcs_int_control_t (
                batch_id,
                source_application,
                target_application,
                file_name,
                status,
                source_system,
                target_system,
                created_by,
                created_date,
                last_updated_by,
                last_updated_date
            ) VALUES (
                lv_batch_id,
                'Oracle LSI',
                'Oracle AHCS',
                l_file_name,
                'TRANSFORM_SUCCESS',
                'Oracle LSI',
                'Oracle ERP Cloud',
                'FININT',
                sysdate,
                'FININT',
                sysdate
            );

            COMMIT;
            UPDATE wsc_ahcs_lsi_ap_ar_match_t
            SET
                file_name = l_file_name
            WHERE
                batch_id = lv_batch_id;

            COMMIT; 

  /*  update WSC_AHCS_LSI_AP_AR_T
   set file_name=L_FILE_NAME,
      batch_id=LV_BATCH_ID
    where (extract_name,INTERCOMPANY_BATCH_NUMBER) in (SELECT unique(extract_name_ap),AP_INTERCOMPANY_BATCH_NUMBER
                          FROM  WSC_AHCS_LSI_AP_AR_MATCH_T
                          WHERE batch_id = LV_BATCH_ID
                          UNION 
                          SELECT unique(extract_name_ar),AR_INTERCOMPANY_BATCH_NUMBER
                          FROM  WSC_AHCS_LSI_AP_AR_MATCH_T
                          WHERE batch_id = LV_BATCH_ID);
    commit;

    update WSC_AHCS_LSI_AP_AR_T a
    set a.status='MATCHED'
    where batch_id=LV_BATCH_ID
    AND EXISTS (Select 1
                    FROM WSC_AHCS_LSI_AP_AR_MATCH_T
                    WHERE ap_intercompany_batch_number=a.intercompany_batch_number
                    AND (AR_IC_TRX_NUMBER=a.IC_TRX_NUMBER OR AP_IC_TRX_NUMBER=a.IC_TRX_NUMBER)
                    AND a.GL_CODE_COMBINATION=GL_CODE_COMBINATION);
     commit; */


            FOR r_dist_payment IN dist_payment(lv_batch_id) LOOP
                lv_counter1 := lv_counter1 + 1;
                << paynum_reset >> lv_paynum := wsc_ap_payment_lsi_seq.nextval;
                lv_invoice_counter := 1;
                lv_sum_ap_entered_amt := 0;
                FOR r_inv_selection IN c_inv_selection(lv_batch_id, r_dist_payment.ap_payment_currency, r_dist_payment.ap_bu, r_dist_payment.
                ap_bank_acc, r_dist_payment.ap_vendor_name,
                                                      r_dist_payment.ap_vendor_site, r_dist_payment.ap_exchange_rate_type) LOOP
                    IF lv_invoice_counter = 500 THEN
                        COMMIT;
                        GOTO paynum_reset;
                    END IF;
                    lv_invoice_counter := lv_invoice_counter + 1;
                    lv_sum_ap_entered_amt := lv_sum_ap_entered_amt + r_inv_selection.ap_entered_invoice_amount;
       -- logging_insert('Oracle LSI',P_BATCH_ID ,1, 'SC1',r_INV_SELECTION.intercompany_batch_number_ap,sysdate );

      /*  select sum(AP_ENTERED_INVOICE_AMOUNT) into LV_SUM_AP_ENTERED_AMT  from WSC_AHCS_LSI_AP_AR_MATCH_T where AP_INVOICE_ID in (  with rws as (
                                              select r_INV_SELECTION.VALS str from dual
                                            )
                                              select regexp_substr (
                                                       str,
                                                       '[^,]+',
                                                       1,
                                                       level
                                                     ) value
                                              from   rws
                                              connect by level <= 
                                                length ( str ) - length ( replace ( str, ',' ) ) + 1); */

                    BEGIN
    /*      MERGE INTO WSC_AHCS_LSI_AP_T  a
             USING ( SELECT AP.FILE_NAME,
                            L_ACC_DATE AP_INVOICE_DATE,
                                                                                                    AP.AP_PAYMENT_CURRENCY,
                                                                                                     AP.AP_BU, 
                            LOOKUP.ATTRIBUTE2 AP_BANK_ACC,
                            LOOKUP.LEDGER_NAME PAYMENT_DOC,  (Basically Attribute3,in table structure, it is name as LEDGER_NAME but it is Payment Doc 
                                                                                                    AP.AP_VENDOR_NAME, 
                                                                                                    AP.AP_VENDOR_SITE,
                            AP.AP_EXCHANGE_RATE,
                                                                                                    AP.AP_EXCHANGE_RATE_DATE,
                                                                                                    AP.AP_INVOICE_NUMBER, 
                                                                                                    AP.AP_LEDGER_NAME, 
                                                                                                    AP.AP_ACCOUNTING_CLASS, 
                                                                                                     L_ACC_DATE AP_ACCOUNTING_DATE,   
                                                                                                    AP.AP_ENTERED_INVOICE_AMOUNT, 
                                                                                                    AP.AP_ACCOUNTED_INVOICE_AMOUNT, 
                            AP.AP_EXCHANGE_RATE_TYPE,
                                                                                                    AP.AP_GL_CODE_COMBINATION, 
                                                                                                    AP.AP_INTERCOMPANY_LEGAL_ENTITY, 
                                                                                                    AP.AP_INTERCOMPANY_TRANSACTION_TYPE, 
                                                                                                    AP.AP_INTERCOMPANY_BATCH_NUMBER,
                            AP.AP_FUNCTIONAL_CURRENCY_CODE,
                            AP.AP_NETTING_LEDGER,
                            AP.AP_NETTING_FUN_CURR,
                                                                                                    AP.AP_IC_TRX_NUMBER,
                                                                                                    AP.AP_INVOICE_ID,
                            to_char(L_ACC_DATE,'MON-YYYY') ACCOUNTING_PERIOD
                FROM WSC_AHCS_LSI_AP_AR_MATCH_T AP,wsc_ahcs_lsi_lookup_t LOOKUP
                WHERE 1=1
                 AND BATCH_ID=LV_BATCH_ID
                                                          AND (AP.STATUS IS NULL or AP.STATUS='ERROR')
                AND LOOKUP.ATTRIBUTE1=AP.AP_INTERCOMPANY_LEGAL_ENTITY
                AND LOOKUP.LOOKUP_TYPE='WSC_LSI_BANK_DETAILS'
                AND AP.AP_PAYMENT_CURRENCY=r_Dist_payment.AP_PAYMENT_CURRENCY
                AND AP.AP_BU=r_Dist_payment.AP_BU
                AND NVL(AP.AP_BANK_ACC,1)=NVL(r_Dist_payment.AP_BANK_ACC,1)
                AND AP.AP_VENDOR_NAME=r_Dist_payment.AP_VENDOR_NAME
                AND AP.AP_VENDOR_SITE=r_Dist_payment.AP_VENDOR_SITE
                AND DECODE(AP.AP_EXCHANGE_RATE_TYPE,NULL,'1',AP.AP_EXCHANGE_RATE_TYPE)=NVL(r_Dist_payment.AP_EXCHANGE_RATE_TYPE,'1')
                AND AP.AP_INVOICE_ID IN (  with rws as (
                                              select r_INV_SELECTION.VALS str from dual
                                            )
                                              select regexp_substr (
                                                       str,
                                                       '[^,]+',
                                                       1,
                                                       level
                                                     ) value
                                              from   rws
                                              connect by level <= 
                                                length ( str ) - length ( replace ( str, ',' ) ) + 1)
                AND NOT EXISTS (Select 1 from WSC_AHCS_LSI_AP_T
                                WHERE PAYMENT_CURRENCY=r_Dist_payment.AP_PAYMENT_CURRENCY
                                AND BU=r_Dist_payment.AP_BU
                                AND BANK_ACC=r_Dist_payment.AP_BANK_ACC
                                AND VENDOR_NAME=r_Dist_payment.AP_VENDOR_NAME
                                AND VENDOR_SITE=r_Dist_payment.AP_VENDOR_SITE
                                AND INTERCOMPANY_BATCH_NUMBER=AP.AP_INTERCOMPANY_BATCH_NUMBER
                                AND IC_TRX_NUMBER=AP.AP_IC_TRX_NUMBER
                                AND INVOICE_NUMBER=AP.AP_INVOICE_NUMBER)) b
            ON (a.INVOICE_NUMBER = b.AP_INVOICE_NUMBER AND a.BU = b.AP_BU AND a.VENDOR_NAME=b.AP_VENDOR_NAME AND a.VENDOR_SITE=b.AP_VENDOR_SITE)
            WHEN NOT MATCHED THEN
                INSERT (BATCH_ID,
                        FILE_NAME,
                        PAYMENT_NUM ,
                        PAYMENT_DATE,
                        PAYMENT_TYPE,
                        PAYMENT_DESC,
                        PAYMENT_CURRENCY,
                        BU, 
                        VENDOR_NAME, 
                        VENDOR_SITE,
                        BANK_ACC,
                        PAYMENT_METHOD,
                        PAYMENT_PROCESS_PROFILE,
                        PAYMENT_DOCUMENT,
                        EXCHANGE_RATE, 
                        EXCHANGE_RATE_TYPE, 
                        EXCHANGE_RATE_DATE, 
                        INVOICE_NUMBER, 
                        LEDGER_NAME, 
                        ACCOUNTING_CLASS, 
                        INVOICE_DATE, 
                        ACCOUNTING_DATE, 
                        ENTERED_INVOICE_AMOUNT, 
                        ACCOUNTED_INVOICE_AMOUNT, 
                        GL_CODE_COMBINATION, 
                        INTERCOMPANY_LEGAL_ENTITY, 
                        INTERCOMPANY_TRANSACTION_TYPE, 
                        INTERCOMPANY_BATCH_NUMBER,
                        Discount_taken,
                        installment_number,
                        FUNCTIONAL_CURRENCY_CODE,
                        NETTING_LEDGER,
                        NETTING_FUN_CURR,
                                                                                      IC_TRX_NUMBER,
                                                                                      INVOICE_ID,
                        ACCOUNTING_PERIOD,
                        TO_BE_REPROCESSED) 
                VALUES (LV_BATCH_ID,
                        b.FILE_NAME,
                       LV_PAYNUM,
                        L_ACC_DATE,
                        'Manual',
                        'BU :'|| b.AP_BU||', PAAS Batch_ID :'||LV_BATCH_ID,
                        b.AP_PAYMENT_CURRENCY,
                        b.AP_BU, 
                        b.AP_VENDOR_NAME, 
                        b.AP_VENDOR_SITE,
                        b.AP_BANK_ACC,
                        'LSI',
                                                                                      'WSC Payment Process',
                                                                                      b.PAYMENT_DOC, ---'IC CHECK',
                                                                                      b.AP_EXCHANGE_RATE, 
                                                                                      b.AP_EXCHANGE_RATE_TYPE, 
                        L_ACC_DATE,  ---b.AP_EXCHANGE_RATE_DATE,
                        b.AP_INVOICE_NUMBER, 
                        b.AP_LEDGER_NAME, 
                        b.AP_ACCOUNTING_CLASS, 
                        b.AP_INVOICE_DATE, 
                        b.AP_ACCOUNTING_DATE,  
                        b.AP_ENTERED_INVOICE_AMOUNT, 
                        b.AP_ACCOUNTED_INVOICE_AMOUNT, 
                        b.AP_GL_CODE_COMBINATION, 
                        b.AP_INTERCOMPANY_LEGAL_ENTITY, 
                        b.AP_INTERCOMPANY_TRANSACTION_TYPE, 
                        b.AP_INTERCOMPANY_BATCH_NUMBER,
                        0,
                        1,
                        b.AP_FUNCTIONAL_CURRENCY_CODE,
                        b.AP_NETTING_LEDGER,
                        b.AP_NETTING_FUN_CURR,
                                                                                      b.AP_IC_TRX_NUMBER,
                                                                                      b.AP_INVOICE_ID,
                        b.ACCOUNTING_PERIOD,
                        'N');  */

              /* New Logic */

                        INSERT INTO wsc_ahcs_lsi_ap_t (
                            payment_num,
                            payment_date,
                            payment_type,
                            payment_desc,
                            payment_currency,
                            bu,
                            vendor_name,
                            vendor_site,
                            bank_acc,
                            payment_method,
                            payment_process_profile,
                            payment_document,
                            exchange_rate,
                            exchange_rate_type,
                            exchange_rate_date,
                            invoice_number,
                            ledger_name,
                            accounting_class,
                            invoice_date,
                            accounting_date,
                            entered_invoice_amount,
                            accounted_invoice_amount,
                            gl_code_combination,
                            intercompany_legal_entity,
                            intercompany_transaction_type,
                            intercompany_batch_number,
                            discount_taken,
                            installment_number,
                            intercompany_ledger,
                            intercompany_fun_curr,
                            functional_currency_code,
                            netting_ledger,
                            netting_fun_curr,
                            ic_trx_number,
                            invoice_id,
                            check_id,
                            batch_id,
                            status,
                            file_name,
                            accounting_period,
                            to_be_processed,
                            error_message,
                            to_be_reprocessed
                        ) VALUES (
                            lv_paynum,
                            l_acc_date,
                            'Manual',
                            'BU :'
                            || r_inv_selection.ap_bu
                            || ', PAAS Batch_ID :'
                            || lv_batch_id,
                            r_inv_selection.ap_payment_currency,
                            r_inv_selection.ap_bu,
                            r_inv_selection.ap_vendor_name,
                            r_inv_selection.ap_vendor_site,
                            r_inv_selection.ap_bank_acc,
                            r_inv_selection.ap_payment_method, --'LSI',
                            r_inv_selection.ap_payment_process_profile, --'WSC Payment Process',
                            r_inv_selection.ap_payment_document, --'IC CHECK',
                            r_inv_selection.ap_exchange_rate,
                            /**** User Story DP-RTR-IC-159 Start ****/
                            nvl2(r_inv_selection.ap_exchange_rate_type, 'Actual Rate', r_inv_selection.ap_exchange_rate_type),
                            /**** User Story DP-RTR-IC-159 End *****/
                            r_inv_selection.ap_exchange_rate_date,
                            r_inv_selection.ap_invoice_number,
                            r_inv_selection.ap_ledger_name,
                            r_inv_selection.ap_accounting_class,
                            r_inv_selection.ap_invoice_date,
                            r_inv_selection.ap_accounting_date,
                            r_inv_selection.ap_entered_invoice_amount,
                            r_inv_selection.ap_accounted_invoice_amount,
                            r_inv_selection.ap_gl_code_combination,
                            r_inv_selection.ap_intercompany_legal_entity,
                            r_inv_selection.ap_intercompany_transaction_type,
                            r_inv_selection.ap_intercompany_batch_number,
                            0,
                            1,
                            NULL,
                            NULL,
                            r_inv_selection.ap_functional_currency_code,
                            r_inv_selection.ap_netting_ledger,
                            r_inv_selection.ap_netting_fun_curr,
                            r_inv_selection.ap_ic_trx_number,
                            r_inv_selection.ap_invoice_id,
                            NULL,
                            r_inv_selection.batch_id,
                            r_inv_selection.status,
                            r_inv_selection.file_name,
                            to_char(l_acc_date, 'MON-YYYY'),
                            'Y',
                            NULL,
                            NULL
                        );

                        FOR i IN c_credit_memo(r_dist_payment.ap_payment_currency, r_dist_payment.ap_bu, r_dist_payment.ap_bank_acc, r_dist_payment.
                        ap_vendor_name, r_dist_payment.ap_vendor_site,
                                              r_dist_payment.ap_exchange_rate_type) LOOP
                            lv_invoice_counter := lv_invoice_counter + 1;
                            lv_sum_ap_entered_amt := lv_sum_ap_entered_amt + i.entered_invoice_amount;
                            lv_ic_btch_number := i.intercompany_batch_number;
                            IF ( lv_sum_ap_entered_amt > 0 ) THEN
                                INSERT INTO wsc_ahcs_lsi_ap_t (
                                    payment_num,
                                    payment_date,
                                    payment_type,
                                    payment_desc,
                                    payment_currency,
                                    bu,
                                    vendor_name,
                                    vendor_site,
                                    bank_acc,
                                    payment_method,
                                    payment_process_profile,
                                    payment_document,
                                    exchange_rate,
                                    exchange_rate_type,
                                    exchange_rate_date,
                                    invoice_number,
                                    ledger_name,
                                    accounting_class,
                                    invoice_date,
                                    accounting_date,
                                    entered_invoice_amount,
                                    accounted_invoice_amount,
                                    gl_code_combination,
                                    intercompany_legal_entity,
                                    intercompany_transaction_type,
                                    intercompany_batch_number,
                                    discount_taken,
                                    installment_number,
                                    intercompany_ledger,
                                    intercompany_fun_curr,
                                    functional_currency_code,
                                    netting_ledger,
                                    netting_fun_curr,
                                    ic_trx_number,
                                    invoice_id,
                                    check_id,
                                    batch_id,
                                    status,
                                    file_name,
                                    accounting_period,
                                    to_be_processed,
                                    error_message,
                                    to_be_reprocessed
                                ) VALUES (
                                    lv_paynum,
                                    l_acc_date,
                                    'Manual',
                                    'BU :'
                                    || i.bu
                                    || ', PAAS Batch_ID :'
                                    || lv_batch_id,
                                    i.invoice_currency_code,
                                    i.bu,
                                    i.vendor_cust_name,
                                    i.vendor_cust_site,
                                    i.bank_acc,
                                    i.description, --'LSI',
                                    i.tag, --'WSC Payment Process',
                                    i.pay_method, --'IC CHECK',
                                    i.exchange_rate,
                                    /**** User Story DP-RTR-IC-159 Start ****/
                                    nvl2(i.exchange_rate_type, 'Actual Rate', i.exchange_rate_type),
                                    /**** User Story DP-RTR-IC-159 End *****/
                                    i.exchange_rate_date,
                                    i.invoice_number,
                                    i.ledger_name,
                                    i.accounting_class,
                                    i.invoice_date,
                                    i.accounting_date,
                                    i.entered_invoice_amount,
                                    i.accounted_invoice_amount,
                                    i.gl_code_combination,
                                    i.intercompany_legal_entity,
                                    i.intercompany_transaction_type,
                                    i.intercompany_batch_number,
                                    0,
                                    1,
                                    NULL,
                                    NULL,
                                    i.functional_currency_code,
                                    i.netting_ledger,
                                    i.netting_fun_curr,
                                    i.ic_trx_number,
                                    i.invoice_id,
                                    NULL,
                                    r_inv_selection.batch_id,
                                    NULL,
                                    i.file_name,
                                    i.accounting_period,
                                    'Y',
                                    NULL,
                                    NULL
                                );

                                COMMIT;
                            ELSE
                                lv_sum_ap_entered_amt := lv_sum_ap_entered_amt - i.entered_invoice_amount;
                                EXIT;
                            END IF;

                            IF lv_invoice_counter = 500 THEN
                                COMMIT;
                                EXIT;
                            END IF;
                        END LOOP;

                        COMMIT;
                    EXCEPTION
                        WHEN OTHERS THEN
                            lv_counter2 := lv_counter2 + 1;
                            lv_error_msg := substr(sqlerrm, 1, 200);
                            INSERT INTO wsc_ahcs_lsi_err_t (
                                file_name,
                                error_code,
                                error_msg,
                                created_date,
                                last_updated_by,
                                last_updated_date,
                                error_file_sent_flag,
                                created_by,
                                batch_id,
                                to_be_processed
                            ) VALUES (
                                p_file_name,
                                'AP Records not merged in WSC_AHCS_LSI_AP_T',
                                lv_error_msg
                                || ':- AP Records not populated for '
                                || lv_ic_btch_number
                                || ' '
                                || r_dist_payment.ap_bu
                                || ' '
                                || r_dist_payment.ap_vendor_name
                                || ' '
                                || r_dist_payment.ap_vendor_site
                                || ' '
                                || r_dist_payment.ap_bank_acc
                                || ' '
                                || r_dist_payment.ap_payment_currency
                                || ' '
                                || r_dist_payment.ap_exchange_rate_type,
                                sysdate,
                                'FININT',
                                sysdate,
                                'N',
                                'FININT',
                                lv_batch_id,
                                'Y'
                            );

                            COMMIT;
                    END;

                    COMMIT;
                END LOOP;

            END LOOP;

            IF lv_counter1 = lv_counter2 THEN
                wsc_ahcs_int_error_logging.error_logging(lv_batch_id, 'EXT041'
                                                                      || '_'
                                                                      || 'LSI', 'Oracle LSI', 'Error in AP-AR Matching Process-' || sqlerrm);
            END IF;

            UPDATE wsc_ahcs_lsi_ap_ar_t a
            SET
                a.status_reason = 'Credit Memo',
                status = NULL,
                batch_id = NULL
            WHERE
                    a.entered_invoice_amount < 0
                AND NOT EXISTS (
                    SELECT
                        1
                    FROM
                        wsc_ahcs_lsi_ap_t
                    WHERE
                            intercompany_batch_number = a.intercompany_batch_number
                        AND ic_trx_number = a.ic_trx_number
                )
                AND NOT EXISTS (
                    SELECT
                        1            /*** bug fix INC2679428***/
                    FROM
                        wsc_ahcs_lsi_control_t
                    WHERE
                            cm_flag = 'Y'
                        AND batch_id = a.batch_id
                );

            COMMIT;
            UPDATE wsc_ahcs_lsi_ap_ar_t a
            SET
                file_name = l_file_name,
                batch_id = lv_batch_id,
                status = 'MATCHED',
                accounting_date = l_acc_date
            WHERE
                EXISTS (
                    SELECT
                        1
                    FROM
                        wsc_ahcs_lsi_ap_t
                    WHERE
                            intercompany_batch_number = a.intercompany_batch_number
                        AND ic_trx_number = a.ic_trx_number
                        AND batch_id = lv_batch_id
                )
                AND batch_id IS NULL;

            COMMIT;
            BEGIN
                SELECT
                    COUNT(1)
                INTO lv_ap_unmatched
                FROM
                    wsc_ahcs_lsi_ap_ar_t
                WHERE
                        record_type = 'AP'
                    AND invoice_number NOT LIKE '%LSI'
                    AND status IS NULL;

            EXCEPTION
                WHEN OTHERS THEN
                    lv_ap_unmatched := 0;
            END;

            BEGIN
                SELECT
                    COUNT(1)
                INTO lv_ar_unmatched
                FROM
                    wsc_ahcs_lsi_ap_ar_t
                WHERE
                        record_type = 'AR'
                    AND status IS NULL;

            EXCEPTION
                WHEN OTHERS THEN
                    lv_ar_unmatched := 0;
            END;

            BEGIN
                SELECT
                    COUNT(1)
                INTO lv_ap_count
                FROM
                    wsc_ahcs_lsi_ap_t
                WHERE
                    batch_id = lv_batch_id;

            EXCEPTION
                WHEN OTHERS THEN
                    lv_ap_count := 0;
            END;

            UPDATE wsc_ahcs_lsi_control_t
            SET
                matched_count = matched_count
                                || '/'
                                || lv_ap_count,
                ap_unmatch_count = lv_ap_unmatched,
                ar_unmatch_count = lv_ar_unmatched
            WHERE
                batch_id = lv_batch_id;

            COMMIT;
            IF lv_ap_count = 0 THEN
                UPDATE wsc_ahcs_lsi_control_t
                SET
                    status = 'NOT MATCHED',
                    batch_id = NULL
                WHERE
                    batch_id = lv_batch_id;

                COMMIT;
            END IF;

            MERGE INTO wsc_ahcs_lsi_ap_ar_t a
            USING (
                      SELECT
                          payment_num,
                          invoice_number,
                          bu,
                          file_name,
                          vendor_name,
                          vendor_site,
                          accounting_period,
                          intercompany_batch_number,
                          ic_trx_number
                      FROM
                          wsc_ahcs_lsi_ap_t
                      WHERE
                          ( status IS NULL
                            OR status = 'ERROR' )
                          AND batch_id = lv_batch_id
                  )
            b ON ( a.invoice_number = b.invoice_number
                   AND a.bu = b.bu
                   AND a.vendor_cust_name = b.vendor_name
                   AND a.vendor_cust_site = b.vendor_site
                   AND a.record_type = 'AP'
                   AND a.intercompany_batch_number = b.intercompany_batch_number
                   AND a.ic_trx_number = b.ic_trx_number )
            WHEN MATCHED THEN UPDATE
            SET a.payment_number = b.payment_num,
                a.accounting_period = b.accounting_period,
                a.file_name = b.file_name;

            BEGIN
                MERGE INTO wsc_ahcs_lsi_ar_t a
                USING (
                          SELECT
                              ar.ar_bu,
                              ar.file_name,
                              ar.ar_bu_id,
                              ar.ar_invoice_number,
                              ar.ar_ledger_name,
                              ar.ar_accounting_class,
                              ar.ar_invoice_date,
                              l_acc_date                      ar_accounting_date,  ----L_ACC_DATE 
                              ar.ar_exchange_rate,
                              ar.ar_exchange_rate_type,
                              ar.ar_exchange_rate_date,
                              ar.ar_entered_invoice_amount,
                              ar.ar_accounted_invoice_amount,
                              ar.ar_gl_code_combination,
                              ar.ar_intercompany_legal_entity,
                              ar.ar_intercompany_transaction_type,
                              ar.ar_intercompany_batch_number,
                              ar.ar_cust_name,
                              ar.ar_cust_site,
                              ar.ar_account_number,
                              ar.ar_lockbox_number,
                              ar.ar_lockbox_id,
                              ar.ar_bank_origination_number,
                              ar.ar_invoice_currency_code,
                              ar.ar_functional_currency_code,
                              ar.ar_ic_trx_number,
                              ar.ar_invoice_id,
                              ar.ap_payment_num,
                              to_char(l_acc_date, 'MON-YYYY') accounting_period
                          FROM
                              wsc_ahcs_lsi_ap_ar_match_t ar
                          WHERE
                                  1 = 1
                              AND batch_id = lv_batch_id
                              AND ( ar.status IS NULL
                                    OR ar.status = 'ERROR' )
                              AND NOT EXISTS (
                                  SELECT
                                      1
                                  FROM
                                      wsc_ahcs_lsi_ar_t
                                  WHERE
                                          intercompany_batch_number = ar.ar_intercompany_batch_number
                                      AND ic_trx_number = ar.ar_ic_trx_number
                              )
                              AND EXISTS (
                                  SELECT
                                      1
                                  FROM
                                      wsc_ahcs_lsi_ap_t
                                  WHERE
                                          intercompany_batch_number = ar.ap_intercompany_batch_number
                                      AND ic_trx_number = ar.ap_ic_trx_number
                              )
                      )
                b ON ( a.invoice_number = b.ar_invoice_number
                       AND a.bu = b.ar_bu
                       AND a.cust_name = b.ar_cust_name
                       AND a.cust_site = b.ar_cust_site )
                WHEN NOT MATCHED THEN
                INSERT (
                    batch_id,
                    file_name,
                    bu,
                    bu_id,
                    invoice_number,
                    ledger_name,
                    accounting_class,
                    invoice_date,
                    accounting_date,
                    exchange_rate,
                    exchange_rate_type,
                    exchange_rate_date,
                    entered_invoice_amount,
                    accounted_invoice_amount,
                    gl_code_combination,
                    intercompany_legal_entity,
                    intercompany_transaction_type,
                    intercompany_batch_number,
                    cust_name,
                    cust_site,
                    account_number,
                    lockbox_number,
                    lockbox_id,
                    bank_origination_number,
                    invoice_currency_code,
                    functional_currency_code,
                    ic_trx_number,
                    invoice_id,
                    ap_payment_num,
                    accounting_period,
                    to_be_reprocessed )
                VALUES
                    ( lv_batch_id,
                      b.file_name,
                      b.ar_bu,
                      b.ar_bu_id,
                      b.ar_invoice_number,
                      b.ar_ledger_name,
                      b.ar_accounting_class,
                      b.ar_invoice_date,
                      l_acc_date,
                      b.ar_exchange_rate,
                      b.ar_exchange_rate_type,
                      b.ar_exchange_rate_date,
                      b.ar_entered_invoice_amount,
                      b.ar_accounted_invoice_amount,
                      b.ar_gl_code_combination,
                      b.ar_intercompany_legal_entity,
                      b.ar_intercompany_transaction_type,
                      b.ar_intercompany_batch_number,
                      b.ar_cust_name,
                      b.ar_cust_site,
                      b.ar_account_number,
                      b.ar_lockbox_number,
                      b.ar_lockbox_id,
                      b.ar_bank_origination_number,
                      b.ar_invoice_currency_code,
                      b.ar_functional_currency_code,
                      b.ar_ic_trx_number,
                      b.ar_invoice_id,
                      b.ap_payment_num,
                      b.accounting_period,
                    'N' );

                COMMIT;
                MERGE INTO wsc_ahcs_lsi_ar_t a
                USING (
                          SELECT
                              ar.bu,
                              ar.file_name,
                              ar.bu_id,
                              ar.invoice_number,
                              ar.ledger_name,
                              ar.accounting_class,
                              ar.invoice_date,
                              l_acc_date                      accounting_date,  ----L_ACC_DATE 
                              ar.exchange_rate,
                              ar.exchange_rate_type,
                              ar.exchange_rate_date,
                              ar.entered_invoice_amount,
                              ar.accounted_invoice_amount,
                              ar.gl_code_combination,
                              ar.intercompany_legal_entity,
                              ar.intercompany_transaction_type,
                              ar.intercompany_batch_number,
                              ar.vendor_cust_name,
                              ar.vendor_cust_site,
                              ar.account_number,
                              ar.lockbox_number,
                              ar.lockbox_id,
                              ar.bank_origination_number,
                              ar.invoice_currency_code,
                              ar.functional_currency_code,
                              ar.ic_trx_number,
                              ar.invoice_id,
                              to_char(l_acc_date, 'MON-YYYY') accounting_period
                          FROM
                              wsc_ahcs_lsi_ap_ar_t ar
                          WHERE
                                  1 = 1
                              AND ar.record_type = 'AR'
                              AND batch_id = lv_batch_id
                              AND ar.entered_invoice_amount < 0
                              AND ( ar.status IS NULL
                                    OR ar.status = 'ERROR' )
                              AND NOT EXISTS (
                                  SELECT
                                      1
                                  FROM
                                      wsc_ahcs_lsi_ar_t
                                  WHERE
                                          intercompany_batch_number = ar.intercompany_batch_number
                                      AND ic_trx_number = ar.ic_trx_number
                              )
                              AND EXISTS (
                                  SELECT
                                      1
                                  FROM
                                      wsc_ahcs_lsi_ap_t
                                  WHERE
                                          intercompany_batch_number = ar.intercompany_batch_number
                                      AND ic_trx_number = ar.ic_trx_number
                              )
                      )
                b ON ( a.invoice_number = b.invoice_number
                       AND a.bu = b.bu
                       AND a.cust_name = b.vendor_cust_name
                       AND a.cust_site = b.vendor_cust_site )
                WHEN NOT MATCHED THEN
                INSERT (
                    batch_id,
                    file_name,
                    bu,
                    bu_id,
                    invoice_number,
                    ledger_name,
                    accounting_class,
                    invoice_date,
                    accounting_date,
                    exchange_rate,
                    exchange_rate_type,
                    exchange_rate_date,
                    entered_invoice_amount,
                    accounted_invoice_amount,
                    gl_code_combination,
                    intercompany_legal_entity,
                    intercompany_transaction_type,
                    intercompany_batch_number,
                    cust_name,
                    cust_site,
                    account_number,
                    lockbox_number,
                    lockbox_id,
                    bank_origination_number,
                    invoice_currency_code,
                    functional_currency_code,
                    ic_trx_number,
                    invoice_id,
                    accounting_period,
                    to_be_reprocessed )
                VALUES
                    ( lv_batch_id,
                      b.file_name,
                      b.bu,
                      b.bu_id,
                      b.invoice_number,
                      b.ledger_name,
                      b.accounting_class,
                      b.invoice_date,
                      l_acc_date,
                      b.exchange_rate,
                      b.exchange_rate_type,
                      b.exchange_rate_date,
                      b.entered_invoice_amount,
                      b.accounted_invoice_amount,
                      b.gl_code_combination,
                      b.intercompany_legal_entity,
                      b.intercompany_transaction_type,
                      b.intercompany_batch_number,
                      b.vendor_cust_name,
                      b.vendor_cust_site,
                      b.account_number,
                      b.lockbox_number,
                      b.lockbox_id,
                      b.bank_origination_number,
                      b.invoice_currency_code,
                      b.functional_currency_code,
                      b.ic_trx_number,
                      b.invoice_id,
                      b.accounting_period,
                    'N' );

                COMMIT;
                wsc_async_lsi_fbdi_process_p(lv_batch_id);
                UPDATE wsc_ahcs_lsi_control_t
                SET
                    to_be_processed = 'Y'
                WHERE
                    batch_id = lv_batch_id;

                COMMIT;
            EXCEPTION
                WHEN OTHERS THEN
                    lv_error_msg := substr(sqlerrm, 1, 200);
                    INSERT INTO wsc_ahcs_lsi_err_t (
                        file_name,
                        error_code,
                        error_msg,
                        created_date,
                        last_updated_by,
                        last_updated_date,
                        error_file_sent_flag,
                        created_by,
                        batch_id,
                        to_be_processed
                    ) VALUES (
                        p_file_name,
                        'AR Records not merged in WSC_AHCS_LSI_AR_T',
                        lv_error_msg
                        || ':- AR Records not populated for batch id'
                        || lv_batch_id,
                        sysdate,
                        'FININT',
                        sysdate,
                        'N',
                        'FININT',
                        lv_batch_id,
                        'Y'
                    );

                    COMMIT;
                    wsc_ahcs_int_error_logging.error_logging(lv_batch_id, 'EXT041'
                                                                          || '_'
                                                                          || 'LSI', 'Oracle LSI', 'Error in AP-AR Matching Process-' ||
                                                                          sqlerrm);

            END;

            COMMIT;
        ELSE
            UPDATE wsc_ahcs_lsi_control_t
            SET
                status = 'NOT MATCHED',
                to_be_processed = 'N',
                last_updated_date = sysdate,
                all_extracts = l_extract
            WHERE
                extract_name = p_file_name;

            COMMIT;
        END IF;

        BEGIN
            DELETE FROM wsc_ahcs_lsi_ap_ar_match_t
            WHERE
                batch_id = lv_batch_id;

            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;

    EXCEPTION
        WHEN OTHERS THEN
            UPDATE wsc_ahcs_lsi_control_t
            SET
                status = 'NOT MATCHED',
                to_be_processed = 'N',
                last_updated_date = sysdate,
                all_extracts = l_extract
            WHERE
                extract_name = p_file_name;

            COMMIT;
            lv_error_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                p_file_name,
                'ERROR IN MATCHING',
                lv_error_msg,
                sysdate,
                'FININT',
                sysdate,
                'N',
                'FININT',
                lv_batch_id,
                'Y'
            );

            COMMIT;
            wsc_ahcs_int_error_logging.error_logging(lv_batch_id, 'EXT041'
                                                                  || '_'
                                                                  || 'LSI', 'Oracle LSI', 'Error in AP-AR Matching Process-' || sqlerrm);

    END wsc_lsi_apar_match_p;

    PROCEDURE wsc_lsi_receipt_fbdi_p (
        p_batch_id NUMBER
    ) IS

        CURSOR transmission_header IS
        SELECT
            bu,
            lockbox_number,
            bank_origination_number
        FROM
            wsc_ahcs_lsi_ar_t ar
        WHERE
            ( status IS NULL
              OR status = 'ERROR' )
            AND batch_id = p_batch_id
            AND lockbox_number IS NOT NULL
            AND NOT EXISTS (
                SELECT
                    1
                FROM
                    wsc_lsi_receipt_fbdi_t
                WHERE
                        segment1 = 6
                    AND batch_id = p_batch_id
                    AND segment23 = ar.invoice_number
                    AND segment30 = ar.bu
                    AND lockbox_number = ar.lockbox_number
            )
        GROUP BY
            bu,
            lockbox_number,
            bank_origination_number;

        CURSOR lockboxpay (
            lokbox_number       VARCHAR2,
            bank_origina_number VARCHAR2
        ) IS
        SELECT
            art.*,
            lt.description,
            lt.attribute2
        FROM
            wsc_ahcs_lsi_ar_t     art,
            wsc_ahcs_lsi_lookup_t lt
        WHERE
                lockbox_number = lokbox_number
            AND batch_id = p_batch_id
            AND bank_origination_number = bank_origina_number
            AND lt.lookup_type = 'WSC_LSI_BANK_DETAILS'
            AND lt.attribute1 = art.intercompany_legal_entity
            AND ( status IS NULL
                  OR status = 'ERROR' );

        lv_item_number   NUMBER;
        lv_receipt_num   VARCHAR2(100);
        lv_receipt_batch VARCHAR2(100);
        lv_lockbox_exception EXCEPTION;
        lv_counter       NUMBER := 0;
        lv_counter_rec6  NUMBER := 0;
        lv_file_name     VARCHAR2(200);
    BEGIN
        SELECT
            file_name
        INTO lv_file_name
        FROM
            wsc_ahcs_lsi_control_t
        WHERE
            batch_id = p_batch_id;

        BEGIN
            DELETE FROM wsc_lsi_receipt_fbdi_t
            WHERE
                batch_id = p_batch_id;

            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;

        FOR rtransmission_header IN transmission_header LOOP
            BEGIN
                IF rtransmission_header.lockbox_number IS NULL OR rtransmission_header.bank_origination_number IS NULL THEN
                    RAISE lv_lockbox_exception;
                END IF;

                lv_receipt_batch := 'LSIBATCH' || to_char(sysdate, 'DDMMYYHH24MISS');
                INSERT INTO wsc_lsi_receipt_fbdi_t (
                    rec_fbdi_seq,
                    segment1,
                    segment2,
                    segment3,
                    segment4,
                    segment5,
                    segment6,
                    segment7,
                    segment8,
                    segment9,
                    segment10,
                    segment11,
                    segment12,
                    segment13,
                    segment14,
                    segment15,
                    segment16,
                    segment17,
                    segment18,
                    segment19,
                    segment20,
                    segment21,
                    segment22,
                    segment23,
                    segment24,
                    segment25,
                    segment26,
                    segment27,
                    segment28,
                    segment29,
                    segment30,
                    batch_id,
                    lockbox_number,
                    bank_origination_number
                ) VALUES (
                    wsc_ahcs_fbdi_seq.NEXTVAL,
                    1,
                    NULL,
                    NULL, --rTransmission_header.Bank_Origination_Number,
                    NULL, --to_char(SYSDATE,'YYMMDD'),
                    NULL, --to_char(SYSDATE,'HH24:MI:SS'),
                    NULL, --rTransmission_header.LV_REC_COUNT,
                    NULL, --rTransmission_header.LV_ENTERED_INV_AMT,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    rtransmission_header.bu,
                    p_batch_id,
                    rtransmission_header.lockbox_number,
                    rtransmission_header.bank_origination_number
                );

    --RECORD2 SERVICE HEADER
                INSERT INTO wsc_lsi_receipt_fbdi_t (
                    rec_fbdi_seq,
                    segment1,
                    segment2,
                    segment3,
                    segment4,
                    segment5,
                    segment6,
                    segment7,
                    segment8,
                    segment9,
                    segment10,
                    segment11,
                    segment12,
                    segment13,
                    segment14,
                    segment15,
                    segment16,
                    segment17,
                    segment18,
                    segment19,
                    segment20,
                    segment21,
                    segment22,
                    segment23,
                    segment24,
                    segment25,
                    segment26,
                    segment27,
                    segment28,
                    segment29,
                    segment30,
                    batch_id,
                    lockbox_number,
                    bank_origination_number
                ) VALUES (
                    wsc_ahcs_fbdi_seq.NEXTVAL,
                    2,
                    NULL, --to_char(SYSDATE,'YYMMDD'),
                    NULL, --to_char(SYSDATE,'HH24:MI:SS'),
                    NULL,
                    NULL, --rTransmission_header.Bank_Origination_Number,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    rtransmission_header.bu,
                    p_batch_id,
                    rtransmission_header.lockbox_number,
                    rtransmission_header.bank_origination_number
                );

   ---RECORD3 BATCH HEADER

                INSERT INTO wsc_lsi_receipt_fbdi_t (
                    rec_fbdi_seq,
                    segment1,
                    segment2,
                    segment3,
                    segment4,
                    segment5,
                    segment6,
                    segment7,
                    segment8,
                    segment9,
                    segment10,
                    segment11,
                    segment12,
                    segment13,
                    segment14,
                    segment15,
                    segment16,
                    segment17,
                    segment18,
                    segment19,
                    segment20,
                    segment21,
                    segment22,
                    segment23,
                    segment24,
                    segment25,
                    segment26,
                    segment27,
                    segment28,
                    segment29,
                    segment30,
                    batch_id,
                    lockbox_number,
                    bank_origination_number
                ) VALUES (
                    wsc_ahcs_fbdi_seq.NEXTVAL,
                    3,
                    lv_receipt_batch,
                    NULL, --rBatchheader.Functional_Currency_Code,
                    NULL,--rc2.EXCHANGE_RATE_TYPE,
                    NULL,
                    NULL,
                    rtransmission_header.lockbox_number,
                    NULL, --to_char(SYSDATE,'YYMMDD'),
                    NULL, --to_char(SYSDATE,'HH24:MI:SS'),
                    NULL, --rBatchheader.LV_REC_COUNT,
                    NULL, --rBatchheader.LV_ENTERED_INV_AMT,
                    NULL, --'LSI RECEIPTS',
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    rtransmission_header.bu,
                    p_batch_id,
                    rtransmission_header.lockbox_number,
                    rtransmission_header.bank_origination_number
                );

	--RECORD4 OVERFLOW PAYMENT
/*
     insert into Wsc_LSI_RECEIPT_FBDI_T
    (SEGMENT1  ,
        SEGMENT2  ,
        SEGMENT3  ,
        SEGMENT4  ,
        SEGMENT5  ,
        SEGMENT6  ,
        SEGMENT7  ,
        SEGMENT8  ,
        SEGMENT9  ,
        SEGMENT10 ,
        SEGMENT11 ,
        SEGMENT12 ,
        SEGMENT13 ,
        SEGMENT14 ,
        SEGMENT15 ,
        SEGMENT16 ,
        SEGMENT17 ,
        SEGMENT18 ,
        SEGMENT19 ,
        SEGMENT20 ,
        SEGMENT21 ,
        SEGMENT22 ,
        SEGMENT23 ,
        SEGMENT24 ,
        SEGMENT25 ,
        SEGMENT26 ,
        SEGMENT27 ,
        SEGMENT28 ,
        SEGMENT29)
      VALUES
      (4,
        'LSI'||to_char(SYSDATE,'DDMMYYHH24MISS'),
        WSC_LSI_ITEM_NUM_SEQ.nextval,
		NULL,
		1,
		NULL,
		NULL,
		NULL,
        rBatchheader.EXCHANGE_RATE_TYPE,
		NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        rBatchheader.Lockbox_Number,
        to_char(SYSDATE,'YYMMDD'),
        to_char(SYSDATE,'HH24:MI:SS'),
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL); */

  --RECORD5 LOCKBOX HEADER

                INSERT INTO wsc_lsi_receipt_fbdi_t (
                    rec_fbdi_seq,
                    segment1,
                    segment2,
                    segment3,
                    segment4,
                    segment5,
                    segment6,
                    segment7,
                    segment8,
                    segment9,
                    segment10,
                    segment11,
                    segment12,
                    segment13,
                    segment14,
                    segment15,
                    segment16,
                    segment17,
                    segment18,
                    segment19,
                    segment20,
                    segment21,
                    segment22,
                    segment23,
                    segment24,
                    segment25,
                    segment26,
                    segment27,
                    segment28,
                    segment29,
                    segment30,
                    batch_id,
                    lockbox_number,
                    bank_origination_number
                ) VALUES (
                    wsc_ahcs_fbdi_seq.NEXTVAL,
                    5,
                    NULL, --rBatchheader.Functional_Currency_Code,
                    NULL,
                    rtransmission_header.lockbox_number,
                    NULL, --to_char(SYSDATE,'YYMMDD'),
                    NULL, --to_char(SYSDATE,'HH24:MI:SS'),
                    NULL, --1,
                    NULL, --rBatchheader.LV_REC_COUNT,
                    NULL, --rBatchheader.LV_ENTERED_INV_AMT,
                    NULL,
                    NULL, --rBatchheader.Bank_Origination_Number,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    rtransmission_header.bu,
                    p_batch_id,
                    rtransmission_header.lockbox_number,
                    rtransmission_header.bank_origination_number
                );


--RECORD6 PAYMENT

                FOR rlockboxpay IN lockboxpay(rtransmission_header.lockbox_number, rtransmission_header.bank_origination_number) LOOP
                    lv_item_number := wsc_lsi_item_num_seq.nextval;
                    lv_receipt_num := 'LSIRECEIPT' || wsc_lsi_receipt_num_seq.nextval;
                    lv_counter_rec6 := lv_counter_rec6 + 1;
                    INSERT INTO wsc_lsi_receipt_fbdi_t (
                        rec_fbdi_seq,
                        segment1,
                        segment2,
                        segment3,
                        segment4,
                        segment5,
                        segment6,
                        segment7,
                        segment8,
                        segment9,
                        segment10,
                        segment11,
                        segment12,
                        segment13,
                        segment14,
                        segment15,
                        segment16,
                        segment17,
                        segment18,
                        segment19,
                        segment20,
                        segment21,
                        segment22,
                        segment23,
                        segment24,
                        segment25,
                        segment26,
                        segment27,
                        segment28,
                        segment29,
                        segment30,
                        segment31,
                        segment32,
                        batch_id,
                        lockbox_number,
                        bank_origination_number
                    ) VALUES (
                        wsc_ahcs_fbdi_seq.NEXTVAL,
                        6,
                        lv_receipt_batch,
                        lv_item_number,
                        decode(sign(rlockboxpay.entered_invoice_amount), - 1, 0, rlockboxpay.entered_invoice_amount * 100),
                        NULL,
                        NULL, --rlockboxpay.CUST_NAME,
                        lv_receipt_num,
                        to_char(rlockboxpay.invoice_date, 'YYMMDD'),
                        rlockboxpay.invoice_currency_code,
                        rlockboxpay.exchange_rate_type,
                        NULL,
                        rlockboxpay.account_number,
                        rlockboxpay.cust_site,
                        NULL,
                        NULL,
                        rlockboxpay.description, --'LSI',
                        NULL,
                        rlockboxpay.attribute2, --'IC BANK '||rlockboxpay.Lockbox_Number,
                        rlockboxpay.lockbox_number,
                        to_char(rlockboxpay.accounting_date, 'YYMMDD'),
                        NULL, --to_char(SYSDATE,'HH24:MI:SS'),
                        NULL,
                        rlockboxpay.invoice_number,
                        NULL,
                        NULL,
                        NULL, --rlockboxpay.Invoice_Currency_Code,
                        NULL,
                        rlockboxpay.entered_invoice_amount * 100,
                        NULL,
                        rtransmission_header.bu,
                        rlockboxpay.batch_id,
                        rlockboxpay.ap_payment_num,
                        p_batch_id,
                        rtransmission_header.lockbox_number,
                        rtransmission_header.bank_origination_number
                    );

  /* update WSC_AHCS_LSI_AP_AR_T set payment_number=LV_RECEIPT_NUM
   Where lockbox_number = rTransmission_header.lockbox_number
   AND bank_origination_number =rTransmission_header.bank_origination_number
   AND INVOICE_NUMBER=rlockboxpay.INVOICE_NUMBER
   AND Account_Number = rlockboxpay.Account_Number
   AND VENDOR_CUST_SITE = rlockboxpay.CUST_SITE
   AND BATCH_ID=P_BATCH_ID;
   commit; */---17Jul

                    UPDATE wsc_ahcs_lsi_ar_t
                    SET
                        receipt_num = lv_receipt_num
                    WHERE
                            lockbox_number = rtransmission_header.lockbox_number
                        AND bank_origination_number = rtransmission_header.bank_origination_number
                        AND invoice_number = rlockboxpay.invoice_number
                        AND account_number = rlockboxpay.account_number
                        AND cust_site = rlockboxpay.cust_site
                        AND batch_id = p_batch_id;

                    COMMIT;
                END LOOP;	

 ---RECORD7 BATCH TRAILER

                INSERT INTO wsc_lsi_receipt_fbdi_t (
                    rec_fbdi_seq,
                    segment1,
                    segment2,
                    segment3,
                    segment4,
                    segment5,
                    segment6,
                    segment7,
                    segment8,
                    segment9,
                    segment10,
                    segment11,
                    segment12,
                    segment13,
                    segment14,
                    segment15,
                    segment16,
                    segment17,
                    segment18,
                    segment19,
                    segment20,
                    segment21,
                    segment22,
                    segment23,
                    segment24,
                    segment25,
                    segment26,
                    segment27,
                    segment28,
                    segment29,
                    segment30,
                    batch_id,
                    lockbox_number,
                    bank_origination_number
                ) VALUES (
                    wsc_ahcs_fbdi_seq.NEXTVAL,
                    7,
                    lv_receipt_batch,
                    NULL, --rBatchheader.functional_Currency_Code,
                    NULL, --rBatchheader.EXCHANGE_RATE_TYPE,
                    NULL,
                    NULL,
                    rtransmission_header.lockbox_number,
                    NULL, --to_char(SYSDATE,'YYMMDD'),
                    NULL, --to_char(SYSDATE,'HH24:MI:SS'),
                    NULL, --rBatchheader.LV_REC_COUNT,
                    NULL, --rBatchheader.LV_ENTERED_INV_AMT,
                    NULL, --'LSI',
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    rtransmission_header.bu,
                    p_batch_id,
                    rtransmission_header.lockbox_number,
                    rtransmission_header.bank_origination_number
                );

 --RECORD8 LOCKBOX TRAILER

                INSERT INTO wsc_lsi_receipt_fbdi_t (
                    rec_fbdi_seq,
                    segment1,
                    segment2,
                    segment3,
                    segment4,
                    segment5,
                    segment6,
                    segment7,
                    segment8,
                    segment9,
                    segment10,
                    segment11,
                    segment12,
                    segment13,
                    segment14,
                    segment15,
                    segment16,
                    segment17,
                    segment18,
                    segment19,
                    segment20,
                    segment21,
                    segment22,
                    segment23,
                    segment24,
                    segment25,
                    segment26,
                    segment27,
                    segment28,
                    segment29,
                    segment30,
                    batch_id,
                    lockbox_number,
                    bank_origination_number
                ) VALUES (
                    wsc_ahcs_fbdi_seq.NEXTVAL,
                    8,
                    NULL, --rBatchheader.functional_currency_code,
                    NULL,
                    rtransmission_header.lockbox_number,
                    NULL, --to_char(SYSDATE,'YYMMDD'),
                    NULL, --to_char(SYSDATE,'HH24:MI:SS'),
                    NULL, --1,
                    NULL, --rBatchheader.LV_REC_COUNT,
                    NULL, --rBatchheader.LV_ENTERED_INV_AMT,
                    NULL,
                    rtransmission_header.bank_origination_number,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    rtransmission_header.bu,
                    p_batch_id,
                    rtransmission_header.lockbox_number,
                    rtransmission_header.bank_origination_number
                );

 --RECORD9 TRANSMISSION TRAILER

                INSERT INTO wsc_lsi_receipt_fbdi_t (
                    rec_fbdi_seq,
                    segment1,
                    segment2,
                    segment3,
                    segment4,
                    segment5,
                    segment6,
                    segment7,
                    segment8,
                    segment9,
                    segment10,
                    segment11,
                    segment12,
                    segment13,
                    segment14,
                    segment15,
                    segment16,
                    segment17,
                    segment18,
                    segment19,
                    segment20,
                    segment21,
                    segment22,
                    segment23,
                    segment24,
                    segment25,
                    segment26,
                    segment27,
                    segment28,
                    segment29,
                    segment30,
                    batch_id,
                    lockbox_number,
                    bank_origination_number
                ) VALUES (
                    wsc_ahcs_fbdi_seq.NEXTVAL,
                    9,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    NULL,
                    rtransmission_header.bu,
                    p_batch_id,
                    rtransmission_header.lockbox_number,
                    rtransmission_header.bank_origination_number
                );

            EXCEPTION
                WHEN lv_lockbox_exception THEN
                    INSERT INTO wsc_ahcs_lsi_err_t (
                        file_name,
                        error_code,
                        error_msg,
                        created_date,
                        last_updated_by,
                        last_updated_date,
                        error_file_sent_flag,
                        created_by,
                        batch_id,
                        to_be_processed
                    ) VALUES (
                        lv_file_name,
                        'NO LOCKBOX',
                        'Lockbox Not Set for BU :' || rtransmission_header.bu,
                        sysdate,
                        'FININT',
                        sysdate,
                        'N',
                        'FININT',
                        p_batch_id,
                        'Y'
                    );

                    COMMIT;
            END;

            lv_counter := lv_counter + 1;
        END LOOP;

        COMMIT;
        IF
            lv_counter > 0
            AND lv_counter_rec6 > 0
        THEN
            UPDATE wsc_ahcs_lsi_control_t
            SET
                fbdi_status = 'Y',
                last_updated_date = sysdate
            WHERE
                batch_id = p_batch_id;

            COMMIT;
        ELSE
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'NO FBDI CREATED',
                'FBDI File not Created',
                sysdate,
                'FININT',
                sysdate,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;
            wsc_ahcs_int_error_logging.error_logging(p_batch_id, 'EXT041'
                                                                 || '_'
                                                                 || 'LSI', 'Oracle LSI', 'NO FBDI FILE CREATED-' || sqlerrm);

        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            wsc_ahcs_int_error_logging.error_logging(p_batch_id, 'EXT041'
                                                                 || '_'
                                                                 || 'LSI', 'Oracle LSI', 'Error in Receipt FBDI Process-' || sqlerrm);
    END wsc_lsi_receipt_fbdi_p;

    PROCEDURE wsc_lsi_call_payment_receipt_p (
        p_batch_id  NUMBER,
        p_file_name VARCHAR2
    ) IS

        x_user_name VARCHAR2(80);
        x_password  VARCHAR2(200);
        x_url       VARCHAR2(200);
        x_err_flag  VARCHAR2(5) := 'N';
        l_body      VARCHAR2(80);
        l_clob      CLOB;
    BEGIN
        IF p_batch_id IS NOT NULL THEN
            BEGIN
                BEGIN
                    SELECT
                        user_name,
                        ( replace(password, CHR(38), CHR(38)
                                                     || 'amp;') ),
                        url
                    INTO
                        x_user_name,
                        x_password,
                        x_url
                    FROM
                        xx_imd_details
                    WHERE
                        ROWNUM = 1;

                EXCEPTION
                    WHEN OTHERS THEN
                        x_err_flag := 'Y';
                END;

                IF x_err_flag != 'Y' THEN
                    l_body := '{ "BATCH_ID" : '
                              || p_batch_id
                              || ' }';
                    apex_web_service.g_request_headers.DELETE();
                    apex_web_service.g_request_headers(1).name := 'Content-Type';
                    apex_web_service.g_request_headers(1).value := 'application/json';
                    l_clob := apex_web_service.make_rest_request(p_url => x_url || ':443/ic/api/integration/v1/flows/rest/WES_WSC_GBL_LSI_CRE_AR_REC_DAT/1.0/lsi',
                    p_http_method => 'POST', p_username => x_user_name, p_password => x_password, p_body => l_body); 

 /* apex_web_service.g_request_headers.delete();   
        apex_web_service.g_request_headers(1).name := 'Content-Type';   
        apex_web_service.g_request_headers(1).value := 'application/json';

 l_clob := apex_web_service.make_rest_request(   
        p_url => x_url || ':443/ic/api/integration/v1/flows/rest/WES_WSC_GBL_LSI_CRE_AP_PAY_DAT_I/1.0/lsi',   
        p_http_method => 'POST',   
        p_username => x_user_name,   
        p_password => x_password,   
        p_body => l_body);  */

                END IF;

            EXCEPTION
                WHEN OTHERS THEN
                    wsc_ahcs_int_error_logging.error_logging(p_batch_id, 'EXT041'
                                                                         || '_'
                                                                         || 'LSI', 'Oracle LSI', 'Error in INV Payment/Receipt INT Call-' ||
                                                                         sqlerrm);
            END;

        ELSE
            wsc_ahcs_int_error_logging.error_logging(p_batch_id, 'EXT041'
                                                                 || '_'
                                                                 || 'LSI', 'Oracle LSI', 'Error in INV Payment/Receipt INT Call-' || sqlerrm);
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            wsc_ahcs_int_error_logging.error_logging(p_batch_id, 'EXT041'
                                                                 || '_'
                                                                 || 'LSI', 'Oracle LSI', 'Error in INV Payment/Receipt INT Call-' || sqlerrm);
    END wsc_lsi_call_payment_receipt_p;

    PROCEDURE wsc_lsi_netting_p (
        record_type VARCHAR2,
        p_batch_id  NUMBER
    ) IS

        CURSOR c1_extract_ap_ar_rec IS
        SELECT
            ap.gl_code_combination                                                                                                                                                                                ap_ccid,
            ar.gl_code_combination                                                                                                                                                                                ar_ccid,
            ap.ledger_name                                                                                                                                                                                        ap_ledger,
            ar.ledger_name                                                                                                                                                                                        ar_ledger,
            sysdate                                                                                                                                                                                               ap_invoice_date,
            sysdate                                                                                                                                                                                               ar_invoice_date,
            sysdate                                                                                                                                                                                               ap_exchange_date,
            sysdate                                                                                                                                                                                               ar_exchange_date,
            ap.exchange_rate                                                                                                                                                                                      ap_exchange_rate,
            ar.exchange_rate                                                                                                                                                                                      ar_exchange_rate,
            nvl((
                SELECT
                    ap_exch.conversion_rate
                FROM
                    wsc_ahcs_lsi_exchange_rate_t ap_exch
                WHERE
                        ap_exch.from_currency = ap.functional_currency_code
                    AND ap_exch.to_currency = net_ap.functional_curr
                    AND to_date(ap_exch.conversion_date, 'YYYY-MM-DD') = trunc(sysdate)
                    AND ap_exch.conversion_rate_type = ap.exchange_rate_type
            ), 1)                                                                                                                                                                                                 ap_exchange_rate_netting,
            ap.exchange_rate_type                                                                                                                                                                                 ap_exchange_rate_type,
            exch_rate.meaning                                                                                                                                                                                     ar_exchange_rate_type,
            nvl((
                SELECT
                    ar_exch.conversion_rate
                FROM
                    wsc_ahcs_lsi_exchange_rate_t ar_exch
                WHERE
                        ar_exch.from_currency = ar.functional_currency_code
                    AND ar_exch.to_currency = net_ar.functional_curr
                    AND to_date(ar_exch.conversion_date, 'YYYY-MM-DD') = trunc(sysdate)
                    AND ar_exch.conversion_rate_type = ar.exchange_rate_type
            ), 1)                                                                                                                                                                                                 ar_exchange_rate_netting,
            ap.payment_currency                                                                                                                                                                                   invoice_currency_code_ap,
            ar.invoice_currency_code                                                                                                                                                                              invoice_currency_code_ar,
            ap.entered_invoice_amount                                                                                                                                                                             entered_invoice_amount_ap,
            ar.entered_invoice_amount                                                                                                                                                                             entered_invoice_amount_ar,
            ap.functional_currency_code                                                                                                                                                                           functional_currency_code_ap,
            ar.functional_currency_code                                                                                                                                                                           functional_currency_code_ar,
            ap.accounted_invoice_amount                                                                                                                                                                           accounted_invoice_amount_ap,
            ar.accounted_invoice_amount                                                                                                                                                                           accounted_invoice_amount_ar,
            ap.intercompany_legal_entity                                                                                                                                                                          intercompany_legal_entity_ap,
            ar.intercompany_legal_entity                                                                                                                                                                          intercompany_legal_entity_ar,
            ap.intercompany_transaction_type                                                                                                                                                                      intercompany_transaction_type_ap,
            ar.intercompany_transaction_type                                                                                                                                                                      intercompany_transaction_type_ar,
            ap.intercompany_batch_number                                                                                                                                                                          intercompany_batch_number_ap,
            net_ap.ledger_name                                                                                                                                                                                    netting_ap_ledger,
            net_ar.ledger_name                                                                                                                                                                                    netting_ar_ledger,
            net_ap.functional_curr                                                                                                                                                                                netting_ap_fun_curr,
            net_ar.functional_curr                                                                                                                                                                                netting_ar_fun_curr,
            getnettingle(substr(ap.gl_code_combination, 1, 4), ap.ledger_name, ar.ledger_name)                                                                                                                    netting_ap_le,
            getnettingle(substr(ar.gl_code_combination, 1, 4), ap.ledger_name, ar.ledger_name)                                                                                                                    netting_ar_le,
            ap.invoice_number                                                                                                                                                                                     invoice_number_ap,
            ar.invoice_number                                                                                                                                                                                     invoice_number_ar,
            net_ap.attribute1                                                                                                                                                                                     ap_final_bu,
            net_ar.attribute1                                                                                                                                                                                     ar_final_bu,
            isfinalbu(substr(ar.gl_code_combination, 1, instr(ar.gl_code_combination, '.', 1) - 1), substr(ap.gl_code_combination, 1,
            instr(ap.gl_code_combination, '.', 1) - 1), ap.ledger_name, ar.ledger_name) final_bu_con,
            isnettinglefinal(substr(ap.gl_code_combination, 1, instr(ap.gl_code_combination, '.', 1) - 1), net_ap.tag, ap.ledger_name,
            ar.ledger_name)                                                            ap_final_netting_le,
            wsc_lsi_pkg.isnettinglefinal(substr(ar.gl_code_combination, 1, instr(ar.gl_code_combination, '.', 1) - 1), net_ar.tag, ap.
            ledger_name, ar.ledger_name)                                                ar_final_netting_le,
            net_ap.attribute2                                                                                                                                                                                     ap_final_by_rel_netting_le,
            net_ar.attribute2                                                                                                                                                                                     ar_final_by_rel_netting_le,
            ar.ic_trx_number                                                                                                                                                                                      ic_trx_number,
            ap.invoice_id                                                                                                                                                                                         ap_invoice_id,
            ar.invoice_id                                                                                                                                                                                         ar_invoice_id,
            ap.accounting_period
        FROM
            wsc_ahcs_lsi_ap_t     ap,
            wsc_ahcs_lsi_ar_t     ar,
            wsc_ahcs_lsi_lookup_t net_ap,
            wsc_ahcs_lsi_lookup_t net_ar,
            wsc_ahcs_lsi_lookup_t exch_rate
        WHERE
                1 = 1 --AP.invoice_number=AR.invoice_number
            AND ap.intercompany_batch_number = ar.intercompany_batch_number
            AND ap.ic_trx_number = ar.ic_trx_number
            AND ap.entered_invoice_amount = ar.entered_invoice_amount
            AND ap.batch_id = ar.batch_id
            AND ap.batch_id = p_batch_id
            AND substr(ap.gl_code_combination, 1, 4) = substr(ar.gl_code_combination, 29, 4)
            AND net_ar.lookup_type = 'WSC_LSI_NETTING_RELATIONSHIPS'
            AND net_ar.description = ar.intercompany_legal_entity
            AND net_ap.lookup_type = 'WSC_LSI_NETTING_RELATIONSHIPS'
            AND net_ap.description = ap.intercompany_legal_entity
            AND exch_rate.lookup_type = 'GL_DAILY_CONVERSION_TYPES'
            AND exch_rate.meaning = nvl(ap.exchange_rate_type, 'Actual Rate')
            AND ap.check_id IS NOT NULL
            AND ar.receipt_num IS NOT NULL
            AND ap.status = 'SUCCESS'
            AND ar.status = 'SUCCESS'
            AND NOT EXISTS (
                SELECT
                    1
                FROM
                    wsc_ahcs_lsi_netting_entry_t
                WHERE
                        1 = 1
                    AND id1 = ap.invoice_id
                    AND id2 = ar.invoice_id
            );

        CURSOR c1_extract_gl_rec IS
        SELECT
            journal_mat.gr_segment1
            || '.'
            || journal_mat.gr_segment2
            || '.'
            || journal_mat.gr_segment3
            || '.'
            || journal_mat.gr_segment4
            || '.'
            || journal_mat.gr_segment5
            || '.'
            || journal_mat.gr_segment6
            || '.'
            || journal_mat.gr_segment7
            || '.'
            || journal_mat.gr_segment8
            || '.'
            || journal_mat.gr_segment9                                                                                                ap_ccid,
            journal_mat.gp_segment1
            || '.'
            || journal_mat.gp_segment2
            || '.'
            || journal_mat.gp_segment3
            || '.'
            || journal_mat.gp_segment4
            || '.'
            || journal_mat.gp_segment5
            || '.'
            || journal_mat.gp_segment6
            || '.'
            || journal_mat.gp_segment7
            || '.'
            || journal_mat.gp_segment8
            || '.'
            || journal_mat.gp_segment9                                                                                                ar_ccid,
            journal_mat.gr_segment1,
            journal_mat.gr_segment2,
            journal_mat.gr_segment3,
            journal_mat.gr_segment4,
            journal_mat.gr_segment5,
            journal_mat.gr_segment6,
            journal_mat.gr_segment7,
            journal_mat.gr_segment8,
            journal_mat.gr_segment9,
            journal_mat.gp_segment1,
            journal_mat.gp_segment2,
            journal_mat.gp_segment3,
            journal_mat.gp_segment4,
            journal_mat.gp_segment5,
            journal_mat.gp_segment6,
            journal_mat.gp_segment7,
            journal_mat.gp_segment8,
            journal_mat.gp_segment9,
            journal_mat.gr_ledger_name                                                                                                ap_ledger,
            journal_mat.gp_ledger_name                                                                                                ar_ledger,
            sysdate                                                                                                                   ap_invoice_date,
            sysdate                                                                                                                   ar_invoice_date,
            journal_mat.gr_exchange_rate_date                                                                                         ap_exchange_date,
            journal_mat.gp_exchange_rate_date                                                                                         ar_exchange_date,
            journal_mat.gr_gl_accounting_date                                                                                         ap_acc_date,
            journal_mat.gp_gl_accounting_date                                                                                         ar_acc_date,
            journal_mat.gr_exchange_rate                                                                                              ap_exchange_rate,
            journal_mat.gp_exchange_rate                                                                                              ar_exchange_rate,
			/*NVL((Select AP_EXCH.CONVERSION_RATE FROM
            WSC_AHCS_LSI_EXCHANGE_RATE_T AP_EXCH
            WHERE AP_EXCH.FROM_CURRENCY=JOURNAL_MAT.GR_functional_Currency_Code
               AND AP_EXCH.TO_CURRENCY=NET_AP.FUNCTIONAL_CURR
           AND to_date(AP_EXCH.CONVERSION_DATE,'YYYY-MM-DD')=trunc(sysdate)
               AND AP_EXCH.CONVERSION_RATE_TYPE=JOURNAL_MAT.GR_EXCHANGE_RATE_TYPE),1) AP_EXCHANGE_RATE_NETTING,
			   NVL((Select AR_EXCH.CONVERSION_RATE FROM
			    WSC_AHCS_LSI_EXCHANGE_RATE_T AR_EXCH
				WHERE AR_EXCH.FROM_CURRENCY=JOURNAL_MAT.GP_functional_Currency_Code
               AND AR_EXCH.TO_CURRENCY=NET_AR.FUNCTIONAL_CURR
           AND to_date(AR_EXCH.CONVERSION_DATE,'YYYY-MM-DD')=trunc(sysdate)
               AND AR_EXCH.CONVERSION_RATE_TYPE=JOURNAL_MAT.GP_EXCHANGE_RATE_TYPE),1) AR_EXCHANGE_RATE_NETTING,*/
            /**** User Story DP-RTR-IC-159 Start ****/
            nvl2(journal_mat.gr_exchange_rate_type, 'Actual Rate', journal_mat.gr_exchange_rate_type)                                 ap_exchange_rate_type,
            nvl2(journal_mat.gp_exchange_rate_type, 'Actual Rate', journal_mat.gp_exchange_rate_type)                                 ar_exchange_rate_type,
            /**** User Story DP-RTR-IC-159 End *****/
            journal_mat.gr_entered_currency_code                                                                                      invoice_currency_code_ap,
            journal_mat.gp_entered_currency_code                                                                                      invoice_currency_code_ar,
            journal_mat.gr_running_total_dr                                                                                           entered_invoice_amount_ap,
            journal_mat.gp_running_total_dr                                                                                           entered_invoice_amount_ar,
            journal_mat.gr_functional_currency_code                                                                                   functional_currency_code_ap,
            journal_mat.gp_functional_currency_code                                                                                   functional_currency_code_ar,
            journal_mat.gr_running_total_accounted_dr                                                                                 accounted_invoice_amount_ap,
            journal_mat.gp_running_total_accounted_dr                                                                                 accounted_invoice_amount_ar,
            journal_mat.gr_segment1                                                                                                   intercompany_legal_entity_ap,
            journal_mat.gp_segment1                                                                                                   intercompany_legal_entity_ar,
            journal_mat.gr_intercompany_transaction_type                                                                              intercompany_transaction_type_ap,
            journal_mat.gp_intercompany_transaction_type                                                                              intercompany_transaction_type_ar,
            journal_mat.gr_intercompany_batch_number                                                                                  intercompany_batch_number_ap,
            net_ap.ledger_name                                                                                                        netting_ap_ledger,
            net_ar.ledger_name                                                                                                        netting_ar_ledger,
            net_ap.functional_curr                                                                                                    netting_ap_fun_curr,
            net_ar.functional_curr                                                                                                    netting_ar_fun_curr,
                --NET_AP.TAG NETTING_AP_LE,NET_AR.TAG NETTING_AR_LE,
            getnettingle(journal_mat.gr_segment1, journal_mat.gr_ledger_name, journal_mat.gp_ledger_name)                             netting_ap_le,
            getnettingle(journal_mat.gp_segment1, journal_mat.gr_ledger_name, journal_mat.gp_ledger_name)                             netting_ar_le,
                --JOURNAL_MAT.GR_GL_JOURNAL_NAME JOURNAL_NAME_GR,JOURNAL_MAT.GP_GL_JOURNAL_NAME JOURNAL_NAME_GP ,
            journal_mat.gr_journal_accounting_sequence
            || '-'
            || journal_mat.gp_journal_accounting_sequence                                                                             journal_name_gr,
            journal_mat.gr_journal_accounting_sequence
            || '-'
            || journal_mat.gp_journal_accounting_sequence                                                                             journal_name_gp,
            net_ap.attribute1                                                                                                         ap_final_bu,
            net_ar.attribute1                                                                                                         ar_final_bu,
            isfinalbu(journal_mat.gp_segment1, journal_mat.gr_segment1, journal_mat.gr_ledger_name, journal_mat.gp_ledger_name)       final_bu_con,
            wsc_lsi_pkg.isnettinglefinal(journal_mat.gr_segment1, net_ap.tag, journal_mat.gr_ledger_name, journal_mat.gp_ledger_name) ap_final_netting_le,
            wsc_lsi_pkg.isnettinglefinal(journal_mat.gp_segment1, net_ar.tag, journal_mat.gr_ledger_name, journal_mat.gp_ledger_name) ar_final_netting_le,
                ----WSC_LSI_PKG.ISNettingLEFinal(NET_AP.TAG) AP_Final_Netting_LE,WSC_LSI_PKG.ISNettingLEFinal(NET_AP.TAG) AR_Final_Netting_LE,
            net_ap.attribute2                                                                                                         ap_final_by_rel_netting_le,
            net_ar.attribute2                                                                                                         ar_final_by_rel_netting_le,
            journal_mat.gp_intercompany_transaction_number                                                                            ic_trx_number,
            journal_mat.gr_gl_journal_id                                                                                              gr_journal_id,
            journal_mat.gp_gl_journal_id                                                                                              gp_journal_id,
            journal_mat.gr_gl_batch_id                                                                                                gr_batch_id,
            journal_mat.gp_gl_batch_id                                                                                                gp_batch_id,
            journal_mat.gr_journal_line_number,
            journal_mat.gp_journal_line_number,
            to_char(sysdate, 'MON-YYYY')                                                                                              accounting_period
        FROM
            wsc_ahcs_lsi_journal_match_t journal_mat,
            wsc_ahcs_lsi_lookup_t        net_ap,
            wsc_ahcs_lsi_lookup_t        net_ar
        WHERE
                net_ar.lookup_type = 'WSC_LSI_NETTING_RELATIONSHIPS'
            AND net_ar.description = journal_mat.gp_segment1
            AND net_ap.lookup_type = 'WSC_LSI_NETTING_RELATIONSHIPS'
            AND net_ap.description = journal_mat.gr_segment1
            AND journal_mat.batch_id = p_batch_id
            AND NOT EXISTS (
                SELECT
                    1
                FROM
                    wsc_ahcs_lsi_netting_entry_t
                WHERE
                        1 = 1
                    AND id1 = journal_mat.gr_gl_batch_id
                    AND id2 = journal_mat.gp_gl_batch_id
                    AND id3 = journal_mat.gr_gl_journal_id
                    AND id4 = journal_mat.gp_gl_journal_id
                    AND id5 = journal_mat.gr_journal_line_number
                    AND id6 = journal_mat.gp_journal_line_number
                    AND scenario NOT IN ( 'Common-Step 1', 'Common-Step 1', 'Common-Step 2', 'Common-Step 2' )
            );

        lv_file_name                 VARCHAR2(200);
        lv_ap_netting_le             VARCHAR2(20);
        lv_ar_netting_le             VARCHAR2(20);
        lv_ap_netting_le_final       VARCHAR2(20);
        lv_ar_netting_le_final       VARCHAR2(20);
        lv_ap_is_priority_bu         NUMBER;
        lv_ar_is_priority_bu         NUMBER;
        lv_ar_netting_rate           NUMBER;
        lv_ar_netting_rate_sc5_2     NUMBER;
        lv_ar_netting_rate_51        NUMBER;
        lv_ar_netting_rate_sc4_1     NUMBER;
        lv_ar_netting_rate_sc4_2     NUMBER;
        lv_ar_netting_rate_sc52      NUMBER;
        lv_ar_netting_rate_551       NUMBER;
        lv_ar_netting_rate_sc6a1     NUMBER;
        lv_ar_netting_rate91         NUMBER;
        lv_ar_netting_rate92         NUMBER;
        lv_ar_netting_rate6a241      NUMBER;
        lv_ar_netting_rate_sc6a2     NUMBER;
        lv_ap_netting_is_priority_bu NUMBER;
        lv_ar_netting_is_priority_bu NUMBER;
        counter                      NUMBER := 0;
        lv_counter                   NUMBER := 0;
        lv_final_counter             NUMBER := 0;
        lv_error                     VARCHAR2(200) := NULL;
        lv_attibute2_p               VARCHAR2(10);
        lv_attibute2_r               VARCHAR2(10);
        lv_ahcs_eligible_count       NUMBER;
        lv_ap_unmatched              NUMBER;
        lv_ar_unmatched              NUMBER;
        lv_acc_date                  TIMESTAMP;
        lv_ap_exchange_rate_type     VARCHAR2(50);
        lv_ar_exchange_rate_type     VARCHAR2(50);
        lv_temp                      NUMBER;
        lv_net_ap_ledger_name        VARCHAR2(50);
        lv_net_ap_fun_currency_code  VARCHAR2(50);
        lv_net_ar_ledger_name        VARCHAR2(50);
        lv_net_ar_fun_currency_code  VARCHAR2(50);
    BEGIN

 --- EXECUTE IMMEDIATE 'TRUNCATE TABLE WSC_AHCS_LSI_NETTING_ENTRY_T';

        BEGIN
            SELECT
                file_name
            INTO lv_file_name
            FROM
                wsc_ahcs_lsi_control_t
            WHERE
                batch_id = p_batch_id;

        END;
        IF record_type = 'AP-AR' THEN
            FOR rc1 IN c1_extract_ap_ar_rec LOOP
                lv_ap_netting_le := rc1.netting_ap_le;
                logging_insert('Oracle LSI', '', 1, rc1.netting_ap_le, '',
                              sysdate);
                lv_ar_netting_le := rc1.netting_ar_le;
                logging_insert('Oracle LSI', '', 1, rc1.netting_ar_le, '',
                              sysdate);
	/*  LV_AP_NETTING_LE_FINAL := ISNettingLEFinal(rc1.NETTING_AP_LE);
      logging_insert('Oracle LSI','' , 1, LV_AP_NETTING_LE_FINAL,'',sysdate );
	  LV_AR_NETTING_LE_FINAL := ISNettingLEFinal(rc1.NETTING_AR_LE);
       logging_insert('Oracle LSI','' , 1, LV_AR_NETTING_LE_FINAL,'',sysdate ); */
                lv_ap_is_priority_bu := isprioritybu(substr(rc1.ap_ccid, 1, instr(rc1.ap_ccid, '.', 1) - 1));

                logging_insert('Oracle LSI', '', 1, lv_ap_is_priority_bu, '',
                              sysdate);
                lv_ar_is_priority_bu := isprioritybu(substr(rc1.ar_ccid, 1, instr(rc1.ar_ccid, '.', 1) - 1));

                logging_insert('Oracle LSI', '', 1, lv_ar_is_priority_bu, '',
                              sysdate);
                lv_ap_netting_is_priority_bu := isprioritybu(rc1.netting_ap_le);
                logging_insert('Oracle LSI', '', 1, lv_ap_is_priority_bu, '',
                              sysdate);
                lv_ar_netting_is_priority_bu := isprioritybu(rc1.netting_ar_le);
                logging_insert('Oracle LSI', '', 1, lv_ar_is_priority_bu, '',
                              sysdate);
                IF getemea(rc1.ap_ledger) = 'No' THEN
                    SELECT
                        ledger_name,
                        currency_code
                    INTO
                        lv_net_ap_ledger_name,
                        lv_net_ap_fun_currency_code
                    FROM
                        wsc_gl_legal_entities_t
                    WHERE
                        flex_segment_value = lv_ap_netting_le;

                ELSE
                    lv_net_ap_ledger_name := rc1.netting_ap_ledger;
                    lv_net_ap_fun_currency_code := rc1.netting_ap_fun_curr;
                END IF;

                IF getemea(rc1.ar_ledger) = 'No' THEN
                    SELECT
                        ledger_name,
                        currency_code
                    INTO
                        lv_net_ar_ledger_name,
                        lv_net_ar_fun_currency_code
                    FROM
                        wsc_gl_legal_entities_t
                    WHERE
                        flex_segment_value = lv_ar_netting_le;

                ELSE
                    lv_net_ar_ledger_name := rc1.netting_ar_ledger;
                    lv_net_ar_fun_currency_code := rc1.netting_ar_fun_curr;
                END IF;

                counter := 0;
                BEGIN  

	----------------------------------------------------------------------------------
	/*********************************Scenario 1************************************/
	----------------------------------------------------------------------------------
                    IF (
                        lv_ap_netting_le = lv_ar_netting_le
                        AND rc1.ap_final_netting_le = 'Yes'
                        AND rc1.ar_final_netting_le = 'Yes'
                        AND lv_ap_is_priority_bu <= 0
                        AND lv_ar_is_priority_bu <= 0
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC1', rc1.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc1(p_batch_id, rc1.ar_ccid, rc1.ar_ledger, rc1.functional_currency_code_ar, rc1.accounted_invoice_amount_ar,
                               rc1.intercompany_legal_entity_ar, rc1.intercompany_transaction_type_ar, rc1.invoice_number_ar, rc1.ap_ccid,
                               rc1.ap_ledger,
                               rc1.functional_currency_code_ap, rc1.accounted_invoice_amount_ap, rc1.intercompany_transaction_type_ap,
                               rc1.invoice_number_ap, rc1.netting_ar_le,
                               lv_net_ar_ledger_name, ---rc1.NETTING_AR_LEDGER                ,
                                rc1.ar_exchange_rate_netting, lv_net_ar_fun_currency_code, --rc1.NETTING_AR_FUN_CURR              ,
                                rc1.ap_exchange_rate_netting, lv_net_ap_fun_currency_code, --- rc1.NETTING_AP_FUN_CURR              ,
                               rc1.intercompany_legal_entity_ap, rc1.netting_ap_le, lv_net_ap_ledger_name, --rc1.NETTING_AP_LEDGER                ,
                                rc1.ap_exchange_rate_type, rc1.ar_exchange_rate_type,
                               record_type, rc1.ic_trx_number, rc1.ap_invoice_id, rc1.ar_invoice_id, NULL,
                               NULL, NULL, NULL, rc1.accounting_period, rc1.intercompany_batch_number_ap);

                        counter := counter + 1;     

  ----------------------------------------------------------------------------------
  /*********************Scenario 2 ******************************************/
  ----------------------------------------------------------------------------------  

                    ELSIF ( (
                        lv_ap_netting_le <> lv_ar_netting_le
                        AND rc1.ap_final_netting_le = 'Yes'
                        AND rc1.ar_final_netting_le = 'Yes'
                        AND rc1.ap_final_bu = 'No'
                        AND rc1.ar_final_bu = 'No'
                        AND rc1.final_bu_con = 'No'
                    ) ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC2', rc1.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc2(rc1.ar_ccid, p_batch_id, rc1.ar_ledger, rc1.functional_currency_code_ar, rc1.accounted_invoice_amount_ar,
                               rc1.intercompany_legal_entity_ar, rc1.intercompany_transaction_type_ar, rc1.invoice_number_ap, rc1.ap_ccid,
                               rc1.ap_ledger,
                               rc1.functional_currency_code_ap, rc1.accounted_invoice_amount_ap, rc1.intercompany_transaction_type_ap,
                               rc1.intercompany_legal_entity_ap, rc1.netting_ar_le,
                               lv_net_ar_ledger_name, --rc1.NETTING_AR_LEDGER                ,
                                rc1.ar_exchange_rate_netting, lv_net_ar_fun_currency_code, --rc1.NETTING_AR_FUN_CURR              ,
                                rc1.netting_ap_le, lv_net_ap_ledger_name, --rc1.NETTING_AP_LEDGER                ,
                               rc1.ap_exchange_rate_netting, lv_net_ap_fun_currency_code, --rc1.NETTING_AP_FUN_CURR              ,
                                rc1.ap_exchange_rate_type, rc1.ar_exchange_rate_type, record_type,
                               rc1.ic_trx_number, rc1.ap_invoice_id, rc1.ar_invoice_id, NULL, NULL,
                               NULL, NULL, rc1.accounting_period, rc1.intercompany_batch_number_ap);

                        counter := counter + 1;    

  ----------------------------------------------------------------------------------
  /*********************Scenario 3 ******************************************/
  ----------------------------------------------------------------------------------  
      ---Manish
                    ELSIF (
                        rc1.ap_final_bu = 'Yes'
                        AND rc1.ar_final_bu = 'Yes'
                    ) OR ( rc1.final_bu_con = 'Yes' ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC3', rc1.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc3(rc1.ar_ccid, p_batch_id, rc1.ar_ledger, rc1.functional_currency_code_ar, rc1.accounted_invoice_amount_ar,
                               rc1.intercompany_legal_entity_ar, rc1.intercompany_transaction_type_ar, rc1.invoice_number_ap, rc1.ap_ccid,
                               rc1.ap_ledger,
                               rc1.functional_currency_code_ap, rc1.accounted_invoice_amount_ap, rc1.intercompany_transaction_type_ap,
                               rc1.intercompany_legal_entity_ap, rc1.netting_ar_le,
                               lv_net_ar_ledger_name, --rc1.NETTING_AR_LEDGER               ,
                                rc1.ar_exchange_rate_netting, lv_net_ar_fun_currency_code, --rc1.NETTING_AR_FUN_CURR             ,
                                rc1.netting_ap_le, lv_net_ap_ledger_name, --rc1.NETTING_AP_LEDGER               ,
                               rc1.ap_exchange_rate_netting, lv_net_ap_fun_currency_code, --rc1.NETTING_AP_FUN_CURR             ,
                                rc1.ap_exchange_rate_type, rc1.ar_exchange_rate_type, record_type,
                               rc1.ic_trx_number, rc1.ap_invoice_id, rc1.ar_invoice_id, NULL, NULL,
                               NULL, NULL, rc1.accounting_period, rc1.intercompany_batch_number_ap);

                        counter := counter + 1;   


  ----------------------------------------------------------------------------------
  /*********************Scenario 4.1 ******************************************/
  ----------------------------------------------------------------------------------  

                    ELSIF (
                        lv_ar_is_priority_bu != 0
                        AND lv_ap_netting_le = substr(rc1.ar_ccid, 1, instr(rc1.ar_ccid, '.', 1) - 1)
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC4.1', rc1.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc4_1(rc1.ar_ccid, p_batch_id, rc1.ar_ledger, rc1.functional_currency_code_ar, rc1.accounted_invoice_amount_ar,
                                 rc1.intercompany_legal_entity_ar, rc1.intercompany_transaction_type_ar, rc1.invoice_number_ap, rc1.ap_ccid,
                                 rc1.ap_ledger,
                                 rc1.functional_currency_code_ap, rc1.accounted_invoice_amount_ap, rc1.intercompany_transaction_type_ap,
                                 rc1.intercompany_legal_entity_ap, rc1.netting_ar_le,
                                 lv_net_ar_ledger_name, --rc1.NETTING_AR_LEDGER               ,
                                  rc1.ar_exchange_rate_netting, lv_net_ar_fun_currency_code, --rc1.NETTING_AR_FUN_CURR             ,
                                  rc1.netting_ap_le, lv_net_ap_ledger_name, --rc1.NETTING_AP_LEDGER               ,
                                 rc1.ap_exchange_rate_netting, lv_net_ap_fun_currency_code, --rc1.NETTING_AP_FUN_CURR             ,
                                  rc1.entered_invoice_amount_ap, rc1.ap_exchange_rate_type, rc1.ar_exchange_rate_type,
                                 record_type, rc1.ic_trx_number, rc1.ap_invoice_id, rc1.ar_invoice_id, NULL,
                                 NULL, NULL, NULL, rc1.accounting_period, rc1.intercompany_batch_number_ap);

                        counter := counter + 1;  

	---Scenario 4.1 - END ---
  ----------------------------------------------------------------------------------
  /*********************Scenario 4.2 ******************************************/
  ----------------------------------------------------------------------------------  

                    ELSIF (
                        lv_ap_is_priority_bu != 0
                        AND lv_ar_netting_le = substr(rc1.ap_ccid, 1, instr(rc1.ap_ccid, '.', 1) - 1)
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC4.2', rc1.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc4_2(rc1.ar_ccid, p_batch_id, rc1.ar_ledger, rc1.functional_currency_code_ar, rc1.accounted_invoice_amount_ar,
                                 rc1.intercompany_legal_entity_ar, rc1.intercompany_transaction_type_ar, rc1.invoice_number_ap, rc1.ap_ccid,
                                 rc1.ap_ledger,
                                 rc1.functional_currency_code_ap, rc1.accounted_invoice_amount_ap, rc1.intercompany_transaction_type_ap,
                                 rc1.intercompany_legal_entity_ap, rc1.netting_ar_le,
                                 lv_net_ar_ledger_name, --rc1.NETTING_AR_LEDGER               ,
                                  rc1.ar_exchange_rate_netting, lv_net_ap_fun_currency_code, --rc1.NETTING_AR_FUN_CURR             ,
                                  rc1.netting_ap_le, lv_net_ap_ledger_name, --rc1.NETTING_AP_LEDGER               ,
                                 rc1.ap_exchange_rate_netting, lv_net_ap_fun_currency_code, --rc1.NETTING_AP_FUN_CURR             ,
                                  rc1.ap_exchange_rate_type, rc1.ar_exchange_rate_type, record_type,
                                 rc1.ic_trx_number, rc1.ap_invoice_id, rc1.ar_invoice_id, NULL, NULL,
                                 NULL, NULL, rc1.accounting_period, rc1.intercompany_batch_number_ap);

                        counter := counter + 1; 

 ----------------------------------------------------------------------------------
  /*********************Scenario 5.1 ******************************************/
  ----------------------------------------------------------------------------------  
       /**** User Story DP-RTR-IC-149 Start *****/
                    ELSIF ( (
                        lv_ar_is_priority_bu > 0
                        AND lv_ap_netting_le != substr(rc1.ar_ccid, 1, instr(rc1.ar_ccid, '.', 1) - 1)
                        AND lv_ap_is_priority_bu <= 0
                        AND rc1.ap_final_netting_le = 'Yes'
                        AND ( getemea(rc1.ap_ledger) = 'Yes' OR getemea(rc1.ar_ledger) = 'Yes' )
                    ) OR (
                        lv_ar_is_priority_bu <> 0
                        AND lv_ap_netting_le != substr(rc1.ar_ccid, 1, instr(rc1.ar_ccid, '.', 1) - 1)
                        AND lv_ap_is_priority_bu = 0
                        AND getemea(rc1.ap_ledger) = 'No'
                        AND getemea(rc1.ar_ledger) = 'No'
                    ) ) THEN
                 /**** User Story DP-RTR-IC-149 End *****/    
                    
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC5.1', rc1.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc5_1(p_batch_id, rc1.ar_ccid, rc1.ar_ledger, rc1.functional_currency_code_ar, rc1.accounted_invoice_amount_ar,
                                 rc1.intercompany_batch_number_ap, rc1.intercompany_legal_entity_ar, rc1.intercompany_transaction_type_ar,
                                 rc1.invoice_number_ap, rc1.invoice_number_ar,
                                 rc1.ap_ccid, rc1.ap_ledger, rc1.functional_currency_code_ap, rc1.accounted_invoice_amount_ap, rc1.intercompany_transaction_type_ap,
                                 rc1.intercompany_legal_entity_ap, rc1.netting_ar_le, lv_net_ar_ledger_name, --rc1.NETTING_AR_LEDGER               ,
                                  rc1.ar_exchange_rate_netting, lv_net_ar_fun_currency_code, --rc1.NETTING_AR_FUN_CURR             ,
                                 rc1.netting_ap_le, lv_net_ap_ledger_name, --rc1.NETTING_AP_LEDGER               ,
                                  rc1.ap_exchange_rate_netting, lv_net_ap_fun_currency_code, --rc1.NETTING_AP_FUN_CURR             ,
                                  rc1.ap_exchange_rate_type,
                                 rc1.ar_exchange_rate_type, record_type, rc1.ic_trx_number, rc1.ap_invoice_id, rc1.ar_invoice_id,
                                 NULL, NULL, NULL, NULL, rc1.accounting_period);

                        counter := counter + 1;

    ----------------------------------------------------------------------------------
  /*********************Scenario 5.2 ******************************************/
  ----------------------------------------------------------------------------------  
            /**** User Story DP-RTR-IC-149 Start *****/
                    ELSIF ( (
                        lv_ap_is_priority_bu > 0
                        AND lv_ar_netting_le != substr(rc1.ap_ccid, 1, instr(rc1.ap_ccid, '.', 1) - 1)
                        AND lv_ar_is_priority_bu <= 0
                        AND rc1.ar_final_netting_le = 'Yes'
                        AND ( getemea(rc1.ap_ledger) = 'Yes' OR getemea(rc1.ar_ledger) = 'Yes' )
                    ) OR (
                        lv_ap_is_priority_bu <> 0
                        AND lv_ar_netting_le != substr(rc1.ap_ccid, 1, instr(rc1.ap_ccid, '.', 1) - 1)
                        AND lv_ar_is_priority_bu = 0
                        AND getemea(rc1.ap_ledger) = 'No'
                        AND getemea(rc1.ar_ledger) = 'No'
                    ) ) THEN
                    
                  /**** User Story DP-RTR-IC-149 End *****/
                  
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC5.2', rc1.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc5_2(p_batch_id, rc1.ar_ccid, rc1.ar_ledger, rc1.functional_currency_code_ar, rc1.accounted_invoice_amount_ar,
                                 rc1.intercompany_batch_number_ap, rc1.intercompany_legal_entity_ar, rc1.intercompany_transaction_type_ar,
                                 rc1.invoice_number_ap, rc1.invoice_number_ar,
                                 rc1.ap_ccid, rc1.ap_ledger, rc1.functional_currency_code_ap, rc1.accounted_invoice_amount_ap, rc1.intercompany_transaction_type_ap,
                                 rc1.intercompany_legal_entity_ap, rc1.netting_ar_le, lv_net_ar_ledger_name, --rc1.NETTING_AR_LEDGER               ,
                                  rc1.ar_exchange_rate_netting, lv_net_ar_fun_currency_code, --rc1.NETTING_AR_FUN_CURR             ,
                                 rc1.netting_ap_le, lv_net_ap_ledger_name, --rc1.NETTING_AP_LEDGER               ,
                                  rc1.ap_exchange_rate_netting, lv_net_ap_fun_currency_code, --rc1.NETTING_AP_FUN_CURR             ,
                                  rc1.ap_exchange_rate_type,
                                 rc1.ar_exchange_rate_type, record_type, rc1.ic_trx_number, rc1.ap_invoice_id, rc1.ar_invoice_id,
                                 NULL, NULL, NULL, NULL, rc1.accounting_period);

                        counter := counter + 1;

----------------------------------------------------------------------------------
  /*********************Scenario 6A-1 ******************************************/
  ----------------------------------------------------------------------------------  

                    ELSIF (
                        lv_ar_netting_is_priority_bu <> 0
                        AND rc1.ap_final_netting_le = 'No'
                        AND getnettingnettingle(rc1.netting_ap_le) != getnettingnettingle(rc1.netting_ar_le)
                        AND substr(rc1.ar_ccid, 1, instr(rc1.ar_ccid, '.', 1) - 1) != rc1.netting_ar_le
                        AND rc1.ap_final_netting_le = 'No'
                        AND ( rc1.ar_final_bu != 'Yes' OR rc1.ap_final_bu != 'Yes' )
                        AND rc1.final_bu_con = 'No'
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC6A1', rc1.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc6a1(p_batch_id, rc1.ar_ccid, rc1.ar_ledger, rc1.functional_currency_code_ar, rc1.accounted_invoice_amount_ar,
                                 rc1.intercompany_legal_entity_ar, rc1.intercompany_transaction_type_ar, rc1.invoice_number_ar, rc1.ap_ccid,
                                 rc1.ap_ledger,
                                 rc1.functional_currency_code_ap, rc1.accounted_invoice_amount_ap, rc1.intercompany_transaction_type_ap,
                                 rc1.invoice_number_ap, rc1.netting_ar_le,
                                 lv_net_ar_ledger_name, --rc1.NETTING_AR_LEDGER               ,
                                  rc1.ar_exchange_rate_netting, lv_net_ar_fun_currency_code, --rc1.NETTING_AR_FUN_CURR             ,
                                  rc1.ap_exchange_rate_netting, lv_net_ap_fun_currency_code, --rc1.NETTING_AP_FUN_CURR             ,
                                 rc1.intercompany_legal_entity_ap, rc1.netting_ap_le, lv_net_ap_ledger_name, --rc1.NETTING_AP_LEDGER               ,
                                  rc1.ap_exchange_rate_type, rc1.ar_exchange_rate_type,
                                 record_type, rc1.ic_trx_number, rc1.ap_invoice_id, rc1.ar_invoice_id, NULL,
                                 NULL, NULL, NULL, rc1.accounting_period, rc1.intercompany_batch_number_ap);

                        counter := counter + 1;                            

----------------------------------------------------------------------------------
  /*********************Scenario 6A-2 ******************************************/
  ----------------------------------------------------------------------------------  
                    ELSIF (
                        lv_ap_netting_is_priority_bu <> 0
                        AND rc1.ar_final_netting_le = 'No'
                        AND getnettingnettingle(rc1.netting_ap_le) != getnettingnettingle(rc1.netting_ar_le)
                        AND substr(rc1.ap_ccid, 1, instr(rc1.ap_ccid, '.', 1) - 1) != rc1.netting_ap_le
                        AND rc1.ar_final_netting_le = 'No'
                        AND ( rc1.ar_final_bu != 'Yes' OR rc1.ap_final_bu != 'Yes' )
                        AND rc1.final_bu_con = 'No'
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC6A2', rc1.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc6a2(p_batch_id, rc1.ar_ccid, rc1.ar_ledger, rc1.functional_currency_code_ar, rc1.accounted_invoice_amount_ar,
                                 rc1.intercompany_legal_entity_ar, rc1.intercompany_transaction_type_ar, rc1.invoice_number_ar, rc1.ap_ccid,
                                 rc1.ap_ledger,
                                 rc1.functional_currency_code_ap, rc1.accounted_invoice_amount_ap, rc1.intercompany_transaction_type_ap,
                                 rc1.invoice_number_ap, rc1.netting_ar_le,
                                 lv_net_ar_ledger_name, --rc1.NETTING_AR_LEDGER               ,
                                  rc1.ar_exchange_rate_netting, lv_net_ar_fun_currency_code, --rc1.NETTING_AR_FUN_CURR             ,
                                  rc1.ap_exchange_rate_netting, lv_net_ap_fun_currency_code, --rc1.NETTING_AP_FUN_CURR             ,
                                 rc1.intercompany_legal_entity_ap, rc1.netting_ap_le, lv_net_ap_ledger_name, --rc1.NETTING_AP_LEDGER               ,
                                  rc1.ap_exchange_rate_type, rc1.ar_exchange_rate_type,
                                 record_type, rc1.ic_trx_number, rc1.ap_invoice_id, rc1.ar_invoice_id, NULL,
                                 NULL, NULL, NULL, rc1.accounting_period, rc1.intercompany_batch_number_ap);

                        counter := counter + 1;

  ----------------------------------------------------------------------------------
  /*********************Scenario 6B1 ******************************************/
  ----------------------------------------------------------------------------------  

                    ELSIF (
                        lv_ar_netting_is_priority_bu <> 0
                        AND rc1.ar_final_netting_le = 'Yes'
                        AND getnettingnettingle(rc1.netting_ap_le) = getnettingnettingle(rc1.netting_ar_le)
                        AND substr(rc1.ar_ccid, 1, instr(rc1.ar_ccid, '.', 1) - 1) != rc1.netting_ar_le
                        AND rc1.ap_final_netting_le = 'No'
                        AND ( rc1.ar_final_bu != 'Yes' OR rc1.ap_final_bu != 'Yes' )
                        AND rc1.final_bu_con = 'No'
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC6B1', rc1.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc6b1(p_batch_id, rc1.ar_ccid, rc1.ar_ledger, rc1.functional_currency_code_ar, rc1.accounted_invoice_amount_ar,
                                 rc1.intercompany_legal_entity_ar, rc1.intercompany_transaction_type_ar, rc1.invoice_number_ar, rc1.ap_ccid,
                                 rc1.ap_ledger,
                                 rc1.functional_currency_code_ap, rc1.accounted_invoice_amount_ap, rc1.intercompany_transaction_type_ap,
                                 rc1.invoice_number_ap, rc1.netting_ar_le,
                                 lv_net_ar_ledger_name, --rc1.NETTING_AR_LEDGER               ,
                                  rc1.ar_exchange_rate_netting, lv_net_ar_fun_currency_code, --rc1.NETTING_AR_FUN_CURR             ,
                                  rc1.ap_exchange_rate_netting, lv_net_ap_fun_currency_code, --rc1.NETTING_AP_FUN_CURR             ,
                                 rc1.intercompany_legal_entity_ap, rc1.netting_ap_le, lv_net_ap_ledger_name, --rc1.NETTING_AP_LEDGER               ,
                                  rc1.ap_exchange_rate_type, rc1.ar_exchange_rate_type,
                                 record_type, rc1.ic_trx_number, rc1.ap_invoice_id, rc1.ar_invoice_id, NULL,
                                 NULL, NULL, NULL, rc1.accounting_period, rc1.intercompany_batch_number_ap);

                        counter := counter + 1;

  ----------------------------------------------------------------------------------
  /*********************Scenario 6B2 ******************************************/
  ----------------------------------------------------------------------------------                                              

                    ELSIF (
                        lv_ap_netting_is_priority_bu <> 0
                        AND rc1.ap_final_netting_le = 'Yes'
                        AND getnettingnettingle(rc1.netting_ap_le) = getnettingnettingle(rc1.netting_ar_le)
                        AND substr(rc1.ap_ccid, 1, instr(rc1.ap_ccid, '.', 1) - 1) != rc1.netting_ap_le
                        AND rc1.ar_final_netting_le = 'No'
                        AND ( rc1.ar_final_bu != 'Yes' OR rc1.ap_final_bu != 'Yes' )
                        AND rc1.final_bu_con = 'No'
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC6B2', rc1.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc6b2(p_batch_id, rc1.ar_ccid, rc1.ar_ledger, rc1.functional_currency_code_ar, rc1.accounted_invoice_amount_ar,
                                 rc1.intercompany_legal_entity_ar, rc1.intercompany_transaction_type_ar, rc1.invoice_number_ar, rc1.ap_ccid,
                                 rc1.ap_ledger,
                                 rc1.functional_currency_code_ap, rc1.accounted_invoice_amount_ap, rc1.intercompany_transaction_type_ap,
                                 rc1.invoice_number_ap, rc1.netting_ar_le,
                                 lv_net_ar_ledger_name, --rc1.NETTING_AR_LEDGER               ,
                                  rc1.ar_exchange_rate_netting, lv_net_ar_fun_currency_code, --rc1.NETTING_AR_FUN_CURR             ,
                                  rc1.ap_exchange_rate_netting, lv_net_ap_fun_currency_code, --rc1.NETTING_AP_FUN_CURR             ,
                                 rc1.intercompany_legal_entity_ap, rc1.netting_ap_le, lv_net_ap_ledger_name, --rc1.NETTING_AP_LEDGER               ,
                                  rc1.ap_exchange_rate_type, rc1.ar_exchange_rate_type,
                                 record_type, rc1.ic_trx_number, rc1.ap_invoice_id, rc1.ar_invoice_id, NULL,
                                 NULL, NULL, NULL, rc1.accounting_period, rc1.intercompany_batch_number_ap);

                        counter := counter + 1;
  ----------------------------------------------------------------------------------
  /*********************Scenario 7A1 ******************************************/
  ----------------------------------------------------------------------------------  
                    ELSIF (
                        lv_ar_is_priority_bu > 0
                        AND rc1.ap_final_netting_le = 'No'
                        AND getnettingnettingle(rc1.netting_ap_le) = substr(rc1.ar_ccid, 1, instr(rc1.ar_ccid, '.', 1) - 1)
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC7A1', rc1.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc7a1(p_batch_id, rc1.ar_ccid, rc1.ar_ledger, rc1.functional_currency_code_ar, rc1.accounted_invoice_amount_ar,
                                 rc1.intercompany_batch_number_ap, rc1.intercompany_legal_entity_ar, rc1.intercompany_transaction_type_ar,
                                 rc1.invoice_number_ar, rc1.ap_ccid,
                                 rc1.ap_ledger, rc1.functional_currency_code_ap, rc1.accounted_invoice_amount_ap, rc1.intercompany_transaction_type_ap,
                                 rc1.invoice_number_ap,
                                 rc1.netting_ar_le, lv_net_ar_ledger_name, --rc1.NETTING_AR_LEDGER               ,
                                  rc1.ar_exchange_rate_netting, lv_net_ar_fun_currency_code, --rc1.NETTING_AR_FUN_CURR             ,
                                  rc1.ap_exchange_rate_netting,
                                 lv_net_ap_fun_currency_code, --rc1.NETTING_AP_FUN_CURR             ,
                                  rc1.intercompany_legal_entity_ap, rc1.netting_ap_le, lv_net_ap_ledger_name, --rc1.NETTING_AP_LEDGER               ,
                                  rc1.ap_exchange_rate_type,
                                 rc1.ar_exchange_rate_type, record_type, rc1.ic_trx_number, rc1.ap_invoice_id, rc1.ar_invoice_id,
                                 NULL, NULL, NULL, NULL, rc1.accounting_period);

                        counter := counter + 1;

  ----------------------------------------------------------------------------------
  /*********************Scenario 7A2 ******************************************/
  ----------------------------------------------------------------------------------  
                    ELSIF (
                        lv_ap_is_priority_bu > 0
                        AND rc1.ar_final_netting_le = 'No'
                        AND getnettingnettingle(rc1.netting_ar_le) = substr(rc1.ap_ccid, 1, instr(rc1.ap_ccid, '.', 1) - 1)
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC7A2', rc1.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc7a2(p_batch_id, rc1.ar_ccid, rc1.ar_ledger, rc1.functional_currency_code_ar, rc1.accounted_invoice_amount_ar,
                                 rc1.intercompany_batch_number_ap, rc1.intercompany_legal_entity_ar, rc1.intercompany_transaction_type_ar,
                                 rc1.invoice_number_ar, rc1.ap_ccid,
                                 rc1.ap_ledger, rc1.functional_currency_code_ap, rc1.accounted_invoice_amount_ap, rc1.intercompany_transaction_type_ap,
                                 rc1.invoice_number_ap,
                                 rc1.netting_ar_le, lv_net_ar_ledger_name, --rc1.NETTING_AR_LEDGER               ,
                                  rc1.ar_exchange_rate_netting, lv_net_ar_fun_currency_code, --rc1.NETTING_AR_FUN_CURR             ,
                                  rc1.ap_exchange_rate_netting,
                                 lv_net_ap_fun_currency_code, --rc1.NETTING_AP_FUN_CURR             ,
                                  rc1.intercompany_legal_entity_ap, rc1.netting_ap_le, lv_net_ap_ledger_name, --rc1.NETTING_AP_LEDGER               ,
                                  rc1.ap_exchange_rate_type,
                                 rc1.ar_exchange_rate_type, record_type, rc1.ic_trx_number, rc1.ap_invoice_id, rc1.ar_invoice_id,
                                 NULL, NULL, NULL, NULL, rc1.accounting_period);

                        counter := counter + 1;
  ----------------------------------------------------------------------------------
  /*********************Scenario 7B1 ******************************************/
  ----------------------------------------------------------------------------------  
                    ELSIF (
                        lv_ar_is_priority_bu > 0
                        AND rc1.ap_final_netting_le = 'No'
                        AND getnettingnettingle(rc1.netting_ap_le) != substr(rc1.ar_ccid, 1, instr(rc1.ar_ccid, '.', 1) - 1)
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC7B1', rc1.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc7b1(p_batch_id, rc1.ar_ccid, rc1.ar_ledger, rc1.functional_currency_code_ar, rc1.accounted_invoice_amount_ar,
                                 rc1.intercompany_batch_number_ap, rc1.intercompany_legal_entity_ar, rc1.intercompany_transaction_type_ar,
                                 rc1.invoice_number_ar, rc1.ap_ccid,
                                 rc1.ap_ledger, rc1.functional_currency_code_ap, rc1.accounted_invoice_amount_ap, rc1.intercompany_transaction_type_ap,
                                 rc1.invoice_number_ap,
                                 rc1.netting_ar_le, lv_net_ar_ledger_name, --rc1.NETTING_AR_LEDGER                ,
                                  rc1.ar_exchange_rate_netting, lv_net_ar_fun_currency_code, --rc1.NETTING_AR_FUN_CURR              ,
                                  rc1.ap_exchange_rate_netting,
                                 lv_net_ap_fun_currency_code, --rc1.NETTING_AP_FUN_CURR              ,
                                  rc1.intercompany_legal_entity_ap, rc1.netting_ap_le, lv_net_ap_ledger_name, --rc1.NETTING_AP_LEDGER                ,
                                  rc1.ap_exchange_rate_type,
                                 rc1.ar_exchange_rate_type, record_type, rc1.ic_trx_number, rc1.ap_invoice_id, rc1.ar_invoice_id,
                                 NULL, NULL, NULL, NULL, rc1.accounting_period);

                        counter := counter + 1;

 ----------------------------------------------------------------------------------
  /*********************Scenario 7B2 ******************************************/
  ----------------------------------------------------------------------------------                                            

                    ELSIF (
                        lv_ap_is_priority_bu > 0
                        AND rc1.ar_final_netting_le = 'No'
                        AND getnettingnettingle(rc1.netting_ar_le) != substr(rc1.ap_ccid, 1, instr(rc1.ap_ccid, '.', 1) - 1)
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC7B2', rc1.intercompany_batch_number_ap,
                                      sysdate);
                        logging_insert('Oracle LSI', p_batch_id, 1, record_type, rc1.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc7b2(p_batch_id, rc1.ar_ccid, rc1.ar_ledger, rc1.functional_currency_code_ar, rc1.accounted_invoice_amount_ar,
                                 rc1.intercompany_batch_number_ap, rc1.intercompany_legal_entity_ar, rc1.intercompany_transaction_type_ar,
                                 rc1.invoice_number_ar, rc1.ap_ccid,
                                 rc1.ap_ledger, rc1.functional_currency_code_ap, rc1.accounted_invoice_amount_ap, rc1.intercompany_transaction_type_ap,
                                 rc1.invoice_number_ap,
                                 rc1.netting_ar_le, lv_net_ar_ledger_name, --rc1.NETTING_AR_LEDGER               ,
                                  rc1.ar_exchange_rate_netting, lv_net_ar_fun_currency_code, --rc1.NETTING_AR_FUN_CURR             ,
                                  rc1.ap_exchange_rate_netting,
                                 lv_net_ap_fun_currency_code, --rc1.NETTING_AP_FUN_CURR             ,
                                  rc1.intercompany_legal_entity_ap, rc1.netting_ap_le, lv_net_ap_ledger_name, --rc1.NETTING_AP_LEDGER               ,
                                  rc1.ap_exchange_rate_type,
                                 rc1.ar_exchange_rate_type, record_type, rc1.ic_trx_number, rc1.ap_invoice_id, rc1.ar_invoice_id,
                                 NULL, NULL, NULL, NULL, rc1.accounting_period);

                        counter := counter + 1;
 ----------------------------------------------------------------------------------
  /*********************Scenario 8 ******************************************/
  ----------------------------------------------------------------------------------  

                    ELSIF (
                        rc1.ar_final_netting_le = 'No'
                        AND rc1.ap_final_netting_le = 'No'
                        AND ( getemea(rc1.ar_ledger) = 'Yes' OR getemea(rc1.ap_ledger) = 'Yes' )
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC8', rc1.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc8(p_batch_id, rc1.ar_ccid, rc1.ar_ledger, rc1.functional_currency_code_ar, rc1.accounted_invoice_amount_ar,
                               rc1.intercompany_batch_number_ap, rc1.intercompany_legal_entity_ar, rc1.intercompany_transaction_type_ar,
                               rc1.invoice_number_ar, rc1.ap_ccid,
                               rc1.ap_ledger, rc1.functional_currency_code_ap, rc1.accounted_invoice_amount_ap, rc1.intercompany_transaction_type_ap,
                               rc1.invoice_number_ap,
                               rc1.netting_ar_le, lv_net_ar_ledger_name, --rc1.NETTING_AR_LEDGER               ,
                                rc1.ar_exchange_rate_netting, lv_net_ar_fun_currency_code, --rc1.NETTING_AR_FUN_CURR             ,
                                rc1.ap_exchange_rate_netting,
                               lv_net_ap_fun_currency_code, --rc1.NETTING_AP_FUN_CURR             ,
                                rc1.intercompany_legal_entity_ap, rc1.netting_ap_le, lv_net_ap_ledger_name, --rc1.NETTING_AP_LEDGER               ,
                                rc1.ap_exchange_rate_type,
                               rc1.ar_exchange_rate_type, record_type, rc1.ic_trx_number, rc1.ap_invoice_id, rc1.ar_invoice_id,
                               NULL, NULL, NULL, NULL, rc1.accounting_period);

                        counter := counter + 1;
                    END IF;

                    IF counter = 0 OR counter > 1 THEN
                        INSERT INTO wsc_ahcs_lsi_err_t (
                            file_name,
                            error_code,
                            error_msg,
                            created_date,
                            last_updated_by,
                            last_updated_date,
                            error_file_sent_flag,
                            created_by,
                            batch_id,
                            to_be_processed
                        ) VALUES (
                            lv_file_name,
                            'ERR_MULTI_OR_NO_SCN',
                            'Multiple or NO Scenario Applied for IC :' || rc1.intercompany_batch_number_ap,
                            sysdate,
                            'FININT',
                            sysdate,
                            'N',
                            'FININT',
                            p_batch_id,
                            'Y'
                        );

                        COMMIT;
                    END IF;

                END;

                COMMIT;

  /*    IF rc1.entered_invoice_amount_AR<0 THEN
        Update WSC_AHCS_LSI_NETTING_ENTRY_T
        SET ENTERED_AMT= (-1 * ENTERED_AMT),
            ACCOUNTED_AMT= (-1 * ACCOUNTED_AMT)
        WHERE IC_BATCH_NUMBER=rc1.intercompany_batch_number_AP
        AND IC_TRX_NUMBER=rc1.IC_TRX_NUMBER;
        commit;
     END IF;  */

            END LOOP;

            UPDATE wsc_ahcs_lsi_netting_entry_t
            SET
                to_be_processed = 'Y'
            WHERE
                    batch_id = p_batch_id
                AND to_be_processed IS NULL;

            COMMIT;
            BEGIN
                SELECT
                    COUNT(1)
                INTO lv_counter
                FROM
                    (
                        SELECT
                            intercompany_batch_number
                            || '-'
                            || ic_trx_number
                        FROM
                            wsc_ahcs_lsi_ap_t a
                        WHERE
                                batch_id = p_batch_id
                            AND status = 'SUCCESS'
                        INTERSECT
                        SELECT
                            intercompany_batch_number
                            || '-'
                            || ic_trx_number
                        FROM
                            wsc_ahcs_lsi_ar_t a
                        WHERE
                                batch_id = p_batch_id
                            AND status = 'SUCCESS'
                    );

            EXCEPTION
                WHEN OTHERS THEN
                    lv_counter := 0;
            END;

            BEGIN
                SELECT
                    COUNT(DISTINCT ic_batch_number
                                   || '-'
                                   || ic_trx_number)
                INTO lv_final_counter
                FROM
                    wsc_ahcs_lsi_netting_entry_t
                WHERE
                    batch_id = p_batch_id;

            EXCEPTION
                WHEN OTHERS THEN
                    lv_final_counter := 0;
            END;

            logging_insert('Oracle LSI', p_batch_id, 1, 'LV_COUNTER_NOT_SUCCESS', lv_counter,
                          NULL);
            IF lv_counter > 0 THEN
                UPDATE wsc_ahcs_lsi_control_t
                SET
                    netting_status =
                        CASE
                            WHEN lv_counter = lv_final_counter THEN
                                'SUCCESS'
                            WHEN lv_final_counter = 0          THEN
                                'NOT SUCCESS'
                            ELSE
                                'PARTIAL SUCCESS'
                        END,
                    last_updated_date = sysdate,
                    ahcs_eligible_lines = lv_counter,
                    ahcs_final_count = lv_final_counter
                WHERE
                    batch_id = p_batch_id;

                COMMIT;
                UPDATE wsc_ahcs_int_control_t
                SET
                    group_id = NULL,
                    status = 'TRANSFORM_SUCCESS'
                WHERE
                    batch_id = p_batch_id;

                COMMIT;
            ELSE
                logging_insert('Oracle LSI', p_batch_id, 1, 'LV_COUNTER_NOT_SUCCESSelse', lv_counter,
                              NULL);
                UPDATE wsc_ahcs_lsi_control_t
                SET
                    netting_status = 'NOT SUCCESS',
                    last_updated_date = sysdate
                WHERE
                    batch_id = p_batch_id;

                COMMIT;
            END IF;

        ELSIF record_type = 'GL' THEN
            FOR rc2 IN c1_extract_gl_rec LOOP
                lv_ap_netting_le := rc2.netting_ap_le;
                logging_insert('Oracle LSI', p_batch_id, 1, rc2.netting_ap_le, '',
                              sysdate);
                lv_ar_netting_le := rc2.netting_ar_le;
                logging_insert('Oracle LSI', p_batch_id, 1, rc2.netting_ar_le, '',
                              sysdate);
/*	  LV_AP_NETTING_LE_FINAL := ISNettingLEFinal(rc2.NETTING_AP_LE);
      logging_insert('Oracle LSI','' , 1, LV_AP_NETTING_LE_FINAL,'',sysdate );
	  LV_AR_NETTING_LE_FINAL := ISNettingLEFinal(rc2.NETTING_AR_LE);
       logging_insert('Oracle LSI','' , 1, LV_AR_NETTING_LE_FINAL,'',sysdate ); */
                lv_ap_is_priority_bu := isprioritybu(substr(rc2.ap_ccid, 1, instr(rc2.ap_ccid, '.', 1) - 1));

                logging_insert('Oracle LSI', p_batch_id, 1, lv_ap_is_priority_bu, '',
                              sysdate);
                lv_ar_is_priority_bu := isprioritybu(substr(rc2.ar_ccid, 1, instr(rc2.ar_ccid, '.', 1) - 1));

                logging_insert('Oracle LSI', p_batch_id, 1, lv_ar_is_priority_bu, '',
                              sysdate);
                lv_ap_netting_is_priority_bu := isprioritybu(rc2.netting_ap_le);
                logging_insert('Oracle LSI', p_batch_id, 1, lv_ap_is_priority_bu, '',
                              sysdate);
                lv_ar_netting_is_priority_bu := isprioritybu(rc2.netting_ar_le);
                logging_insert('Oracle LSI', p_batch_id, 1, lv_ar_is_priority_bu, '',
                              sysdate);
                BEGIN
                    counter := 0;
                    IF getemea(rc2.ap_ledger) = 'No' THEN
                        SELECT
                            ledger_name,
                            currency_code
                        INTO
                            lv_net_ap_ledger_name,
                            lv_net_ap_fun_currency_code
                        FROM
                            wsc_gl_legal_entities_t
                        WHERE
                            flex_segment_value = lv_ap_netting_le;

                    ELSE
                        lv_net_ap_ledger_name := rc2.netting_ap_ledger;
                        lv_net_ap_fun_currency_code := rc2.netting_ap_fun_curr;
                    END IF;

                    IF getemea(rc2.ar_ledger) = 'No' THEN
                        SELECT
                            ledger_name,
                            currency_code
                        INTO
                            lv_net_ar_ledger_name,
                            lv_net_ar_fun_currency_code
                        FROM
                            wsc_gl_legal_entities_t
                        WHERE
                            flex_segment_value = lv_ar_netting_le;

                    ELSE
                        lv_net_ar_ledger_name := rc2.netting_ar_ledger;
                        lv_net_ar_fun_currency_code := rc2.netting_ar_fun_curr;
                    END IF; 

     ----------------------------------------------------------------------------------
	/*********************************Common Steps for All Scenarios************************************/
	----------------------------------------------------------------------------------

                    logging_insert('Oracle LSI', p_batch_id, 1, 'Common step for all scenarios - start', '',
                                  sysdate);
                    BEGIN
                        SELECT
                            accounting_date
                        INTO lv_acc_date
                        FROM
                            wsc_ahcs_lsi_control_t
                        WHERE
                            batch_id = p_batch_id;

                    EXCEPTION
                        WHEN OTHERS THEN
                            lv_acc_date := NULL;
                    END;

                    BEGIN
                        SELECT
                            conversion_rate
                        INTO lv_ar_netting_rate_sc4_1
                        FROM
                            wsc_ahcs_lsi_exchange_rate_t
                        WHERE
                                from_currency = rc2.invoice_currency_code_ar
                            AND to_currency = rc2.functional_currency_code_ar
                            AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                            AND conversion_rate_type = nvl(decode(rc2.ar_exchange_rate_type, 'User', 'Actual Rate'), 'Actual Rate');

                    EXCEPTION
                        WHEN OTHERS THEN
                            lv_ar_netting_rate_sc4_1 := 1;
                    END;

                    INSERT INTO wsc_ahcs_lsi_netting_entry_t (
                        lsi_netting_entry_id,
                        scenario,
                        event_type,
                        transaction,
                        le,
                        ledger,
                        line_type,
                        exchange_rate_date,
                        exchange_rate,
                        gl_natural_acc,
                        entered_curr,
                        entered_amt,
                        accounted_curr,
                        accounted_amt,
                        accounting_date,
                        ic_le,
                        source_trx_number,
                        ic_batch_number,
                        batch_id,
                        gl_legal_entity,
                        gl_oper_grp,
                        gl_acct,
                        gl_dept,
                        gl_site,
                        gl_ic,
                        gl_projects,
                        gl_fut_1,
                        gl_fut_2,
                        exchange_rate_type,
                        file_name,
                        record_type,
                        ic_trx_number,
                        id1,
                        id2,
                        id3,
                        id4,
                        id5,
                        id6,
                        accounting_period,
                        event_class
                    ) VALUES (
                        wsc_lsi_netting_entry_id_seq.NEXTVAL,
                        'Common-Step 1',
                        'LSI_LIABILITY_SWITCH',
                        'GL ENTRY FOR GL FLOW',
                        substr(rc2.ar_ccid, 1, instr(rc2.ar_ccid, '.', 1) - 1),
                        rc2.ar_ledger,
                        'AHCS Cash Clearing',
                        to_char(rc2.ar_exchange_date, 'YYYY-MM-DD'),
                        lv_ar_netting_rate_sc4_1,
                        'IC Clearing AP AR-IC Clearing AP AR',
                        rc2.invoice_currency_code_ar, --GP_CURRENCY_CODE, 
                        round(rc2.entered_invoice_amount_ar, 30), --ROUND(GP_RUNNING_TOTAL_DR, 4),
                        rc2.functional_currency_code_ar, --GP_CURRENCY_CODE, 
                        round(rc2.accounted_invoice_amount_ar, 30), --ROUND(LV_AR_NETTING_RATE_SC4_1 * rc2.entered_invoice_amount_AR, 4), --ROUND(GP_RUNNING_TOTAL_DR, 4), 
                        to_char(rc2.ar_acc_date, 'YYYY-MM-DD'),
                        '0000',
                        rc2.journal_name_gp,
                        rc2.intercompany_batch_number_ap, --IC_BATCH_NUMBER, 
                        p_batch_id,
                        substr(rc2.ar_ccid, 1, instr(rc2.ar_ccid, '.', 1) - 1), --GP_LE, 
                        '4120',
                        '000000',
                        '0000',
                        '00000',
                        '0000',
                        '0000',
                        '0000',
                        '0000',
                        rc2.ar_exchange_rate_type, --GP_EXCHANGE_RATE_TYPE, 
                        lv_file_name,  --LV_FILE_NAME, 
                        'GL',
                        rc2.ic_trx_number, --GP_INTERCOMPANY_TRANSACTION_NUMBER, 
                        rc2.gr_batch_id,
                        rc2.gp_batch_id,
                        rc2.gr_journal_id,
                        rc2.gp_journal_id, --GP_GL_JOURNAL_ID, 
                        rc2.gr_journal_line_number,
                        rc2.gp_journal_line_number,
                        rc2.accounting_period,
                        'ORACLE_LSI'
                    );

                    INSERT INTO wsc_ahcs_lsi_netting_entry_t (
                        lsi_netting_entry_id,
                        scenario,
                        event_type,
                        transaction,
                        le,
                        ledger,
                        line_type,
                        exchange_rate_date,
                        exchange_rate,
                        gl_natural_acc,
                        entered_curr,
                        entered_amt,
                        accounted_curr,
                        accounted_amt,
                        accounting_date,
                        ic_le,
                        source_trx_number,
                        ic_batch_number,
                        batch_id,
                        gl_legal_entity,
                        gl_oper_grp,
                        gl_acct,
                        gl_dept,
                        gl_site,
                        gl_ic,
                        gl_projects,
                        gl_fut_1,
                        gl_fut_2,
                        exchange_rate_type,
                        file_name,
                        record_type,
                        ic_trx_number,
                        id1,
                        id2,
                        id3,
                        id4,
                        id5,
                        id6,
                        accounting_period,
                        event_class
                    ) VALUES (
                        wsc_lsi_netting_entry_id_seq.NEXTVAL,
                        'Common-Step 1',
                        'LSI_LIABILITY_SWITCH',
                        'GL ENTRY FOR GL FLOW',
                        substr(rc2.ar_ccid, 1, instr(rc2.ar_ccid, '.', 1) - 1), --null, --GP_LE, 
                        rc2.ar_ledger, --GP_LEDGER, 
                        'AHCS IC AR',
                        to_char(rc2.ar_exchange_date, 'YYYY-MM-DD'), --GP_GL_POSTED_DATE, 
                        lv_ar_netting_rate_sc4_1,
                        '114001-INTERCOMPANY ACCOUNTS RECEIVABLE - LEGACY',
                        rc2.invoice_currency_code_ar, --GP_CURRENCY_CODE, 
                        round(- 1 * rc2.entered_invoice_amount_ar, 4), --ROUND(-1 * GP_RUNNING_TOTAL_DR, 4), 
                        rc2.functional_currency_code_ar, --GP_CURRENCY_CODE, 
                        round(- 1 * rc2.accounted_invoice_amount_ar, 4), ----ROUND(-1 * LV_AR_NETTING_RATE_SC4_1 * rc2.entered_invoice_amount_AR, 4), --ROUND(-1 * GP_RUNNING_TOTAL_DR, 4), 
                        to_char(rc2.ar_acc_date, 'YYYY-MM-DD'),
                        substr(rc2.ap_ccid, 1, instr(rc2.ap_ccid, '.', 1) - 1), --GR_LE, 
                        rc2.journal_name_gp, --GP_GL_JOURNAL_ID, 
                        rc2.intercompany_batch_number_ap, --IC_BATCH_NUMBER, 
                        p_batch_id,
                        rc2.gp_segment1, --GP_LE, 
                        rc2.gp_segment2, ---'4120', 
                        rc2.gp_segment3,
                        rc2.gp_segment4,
                        rc2.gp_segment5,
                        rc2.gp_segment6, ---substr(rc2.AP_CCID,1,instr(rc2.AP_CCID,'.',1)-1), --GR_LE, 
                        rc2.gp_segment7,
                        rc2.gp_segment8,
                        rc2.gp_segment9,
                        rc2.ar_exchange_rate_type, --GP_EXCHANGE_RATE_TYPE, 
                        lv_file_name,  --LV_FILE_NAME, 
                        'GL',
                        rc2.ic_trx_number, --GP_INTERCOMPANY_TRANSACTION_NUMBER, 
                        rc2.gr_batch_id,
                        rc2.gp_batch_id,
                        rc2.gr_journal_id,
                        rc2.gp_journal_id, --GP_GL_JOURNAL_ID, 
                        rc2.gr_journal_line_number,
                        rc2.gp_journal_line_number,
                        rc2.accounting_period,
                        'ORACLE_LSI'
                    );

                    BEGIN
                        SELECT
                            conversion_rate
                        INTO lv_ar_netting_rate_sc4_1
                        FROM
                            wsc_ahcs_lsi_exchange_rate_t
                        WHERE
                                from_currency = rc2.invoice_currency_code_ap
                            AND to_currency = rc2.functional_currency_code_ap
                            AND conversion_date = to_char(lv_acc_date, 'YYYY-MM-DD')
                            AND conversion_rate_type = nvl(decode(rc2.ar_exchange_rate_type, 'User', 'Actual Rate'), 'Actual Rate');

                    EXCEPTION
                        WHEN OTHERS THEN
                            lv_ar_netting_rate_sc4_1 := 1;
                    END;

                    INSERT INTO wsc_ahcs_lsi_netting_entry_t (
                        lsi_netting_entry_id,
                        scenario,
                        event_type,
                        transaction,
                        le,
                        ledger,
                        line_type,
                        exchange_rate_date,
                        exchange_rate,
                        gl_natural_acc,
                        entered_curr,
                        entered_amt,
                        accounted_curr,
                        accounted_amt,
                        accounting_date,
                        ic_le,
                        source_trx_number,
                        ic_batch_number,
                        batch_id,
                        gl_legal_entity,
                        gl_oper_grp,
                        gl_acct,
                        gl_dept,
                        gl_site,
                        gl_ic,
                        gl_projects,
                        gl_fut_1,
                        gl_fut_2,
                        exchange_rate_type,
                        file_name,
                        record_type,
                        ic_trx_number,
                        id1,
                        id2,
                        id3,
                        id4,
                        id5,
                        id6,
                        accounting_period,
                        event_class
                    ) VALUES (
                        wsc_lsi_netting_entry_id_seq.NEXTVAL,
                        'Common-Step 2',
                        'LSI_LIABILITY_SWITCH',
                        'GL ENTRY FOR GL FLOW',
                        substr(rc2.ap_ccid, 1, instr(rc2.ap_ccid, '.', 1) - 1), --GR_LE, 
                        rc2.ap_ledger,--GR_LEDGER, 
                        'AHCS IC AP',
                        to_char(rc2.ap_exchange_date, 'YYYY-MM-DD'), --GR_GL_POSTED_DATE, 
                        lv_ar_netting_rate_sc4_1,
                        '212001-INTERCOMPANY ACCOUNTS PAYABLE - LEGACY',
                        rc2.invoice_currency_code_ap, --GR_CURRENCY_CODE, 
                        round(rc2.entered_invoice_amount_ap, 4), --ROUND(GR_RUNNING_TOTAL_DR, 4), 
                        rc2.functional_currency_code_ap, --GR_CURRENCY_CODE, 
                        round(rc2.accounted_invoice_amount_ap, 4), ----ROUND(LV_AR_NETTING_RATE_SC4_1*rc2.entered_invoice_amount_AP, 4), --ROUND(GR_RUNNING_TOTAL_DR, 4), 
                        to_char(rc2.ap_acc_date, 'YYYY-MM-DD'),
                        '0000',--GP_LE, 
                        rc2.journal_name_gr, --GP_GL_JOURNAL_ID, 
                        rc2.intercompany_batch_number_ap, --IC_BATCH_NUMBER, 
                        p_batch_id,
                        rc2.gr_segment1, --GP_LE, 
                        rc2.gr_segment2, ---'4120', 
                        rc2.gr_segment3,
                        rc2.gr_segment4,
                        rc2.gr_segment5,
                        rc2.gr_segment6, ---substr(rc2.AP_CCID,1,instr(rc2.AP_CCID,'.',1)-1), --GR_LE, 
                        rc2.gr_segment7,
                        rc2.gr_segment8,
                        rc2.gr_segment9,
                        rc2.ap_exchange_rate_type, --GR_EXCHANGE_RATE_TYPE, 
                        lv_file_name,
                        'GL',
                        rc2.ic_trx_number, --, --GR_INTERCOMPANY_TRANSACTION_NUMBER, 
                        rc2.gr_batch_id,
                        rc2.gp_batch_id,
                        rc2.gr_journal_id,
                        rc2.gp_journal_id, --GP_GL_JOURNAL_ID, 
                        rc2.gr_journal_line_number,
                        rc2.gp_journal_line_number,
                        rc2.accounting_period,
                        'ORACLE_LSI'
                    );
---- step 2.2
                    INSERT INTO wsc_ahcs_lsi_netting_entry_t (
                        lsi_netting_entry_id,
                        scenario,
                        event_type,
                        transaction,
                        le,
                        ledger,
                        line_type,
                        exchange_rate_date,
                        exchange_rate,
                        gl_natural_acc,
                        entered_curr,
                        entered_amt,
                        accounted_curr,
                        accounted_amt,
                        accounting_date,
                        ic_le,
                        source_trx_number,
                        ic_batch_number,
                        batch_id,
                        gl_legal_entity,
                        gl_oper_grp,
                        gl_acct,
                        gl_dept,
                        gl_site,
                        gl_ic,
                        gl_projects,
                        gl_fut_1,
                        gl_fut_2,
                        exchange_rate_type,
                        file_name,
                        record_type,
                        ic_trx_number,
                        id1,
                        id2,
                        id3,
                        id4,
                        id5,
                        id6,
                        accounting_period,
                        event_class
                    ) VALUES (
                        wsc_lsi_netting_entry_id_seq.NEXTVAL,
                        'Common-Step 2',
                        'LSI_LIABILITY_SWITCH',
                        'GL ENTRY FOR GL FLOW',
                        substr(rc2.ap_ccid, 1, instr(rc2.ap_ccid, '.', 1) - 1), --GR_LE, 
                        rc2.ap_ledger,--GR_LEDGER, 
                        'AHCS Cash Clearing',
                        to_char(rc2.ap_exchange_date, 'YYYY-MM-DD'), --GR_GL_POSTED_DATE, 
                        lv_ar_netting_rate_sc4_1,
                        'IC Clearing AP AR-IC Clearing AP AR',
                        rc2.invoice_currency_code_ap, --GR_CURRENCY_CODE, 
                        round(- 1 * rc2.entered_invoice_amount_ap, 4), --ROUND(-1 * GR_RUNNING_TOTAL_DR, 4), 
                        rc2.functional_currency_code_ap, --GR_CURRENCY_CODE, 
                        round(- 1 * rc2.accounted_invoice_amount_ap, 4), --ROUND(-1 * LV_AR_NETTING_RATE_SC4_1 * rc2.entered_invoice_amount_AP, 4), --ROUND(-1 * GR_RUNNING_TOTAL_DR, 4), 
                        to_char(rc2.ap_acc_date, 'YYYY-MM-DD'),
                        '0000',
                        rc2.journal_name_gr, --GP_GL_JOURNAL_ID, 
                        rc2.intercompany_batch_number_ap, --IC_BATCH_NUMBER, 
                        p_batch_id,
                        substr(rc2.ap_ccid, 1, instr(rc2.ap_ccid, '.', 1) - 1), --GR_LE, 
                        '4120',
                        '000000',
                        '0000',
                        '00000',
                        '0000',
                        '0000',
                        '0000',
                        '0000',
                        rc2.ap_exchange_rate_type, --GR_EXCHANGE_RATE_TYPE, 
                        lv_file_name,
                        'GL',
                        rc2.ic_trx_number, --GR_INTERCOMPANY_TRANSACTION_NUMBER, 
                        rc2.gr_batch_id,
                        rc2.gp_batch_id,
                        rc2.gr_journal_id,
                        rc2.gp_journal_id, --GP_GL_JOURNAL_ID, 
                        rc2.gr_journal_line_number,
                        rc2.gp_journal_line_number,
                        rc2.accounting_period,
                        'ORACLE_LSI'
                    );

                    SELECT
                        decode(rc2.ap_exchange_rate_type, 'User', 'Actual Rate', rc2.ap_exchange_rate_type),
                        decode(rc2.ar_exchange_rate_type, 'User', 'Actual Rate', rc2.ar_exchange_rate_type)
                    INTO
                        lv_ap_exchange_rate_type,
                        lv_ar_exchange_rate_type
                    FROM
                        dual;

                    logging_insert('Oracle LSI', p_batch_id, 1, 'Common step for all scenarios - end', '',
                                  sysdate);
              ----------------------------------------------------------------------------------
              /*********************************Scenario 1************************************/
              ----------------------------------------------------------------------------------
                    IF (
                        lv_ap_netting_le = lv_ar_netting_le
                        AND rc2.ap_final_netting_le = 'Yes'
                        AND rc2.ar_final_netting_le = 'Yes'
                        AND lv_ap_is_priority_bu <= 0
                        AND lv_ar_is_priority_bu <= 0
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC1', rc2.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc1(p_batch_id, rc2.ar_ccid, rc2.ar_ledger, rc2.functional_currency_code_ar, rc2.accounted_invoice_amount_ar,
                               rc2.gp_segment1, rc2.intercompany_transaction_type_ar, rc2.journal_name_gp, rc2.ap_ccid, rc2.ap_ledger,
                               rc2.functional_currency_code_ap, rc2.accounted_invoice_amount_ap, rc2.intercompany_transaction_type_ap,
                               rc2.journal_name_gr, rc2.netting_ar_le,
                               lv_net_ar_ledger_name, --rc2.NETTING_AR_LEDGER                ,
                                NULL, lv_net_ar_fun_currency_code, --rc2.NETTING_AR_FUN_CURR              ,
                                NULL, lv_net_ap_fun_currency_code, --rc2.NETTING_AP_FUN_CURR              ,
                               rc2.gr_segment1, rc2.netting_ap_le, lv_net_ap_ledger_name, --rc2.NETTING_AP_LEDGER                ,
                                lv_ap_exchange_rate_type, lv_ar_exchange_rate_type,
                               record_type, rc2.ic_trx_number, rc2.gr_batch_id, rc2.gp_batch_id, rc2.gr_journal_id,
                               rc2.gp_journal_id, rc2.gr_journal_line_number, rc2.gp_journal_line_number, rc2.accounting_period, rc2.
                               intercompany_batch_number_ap);

                        counter := counter + 1;     



  ----------------------------------------------------------------------------------
  /*********************Scenario 2 ******************************************/
  ----------------------------------------------------------------------------------  

                    ELSIF ( (
                        lv_ap_netting_le <> lv_ar_netting_le
                        AND rc2.ap_final_netting_le = 'Yes'
                        AND rc2.ar_final_netting_le = 'Yes'
                        AND rc2.ap_final_bu = 'No'
                        AND rc2.ar_final_bu = 'No'
                        AND rc2.final_bu_con = 'No'
                    ) ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC2', rc2.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc2(rc2.ar_ccid, p_batch_id, rc2.ar_ledger, rc2.functional_currency_code_ar, rc2.accounted_invoice_amount_ar,
                               rc2.gp_segment1, rc2.intercompany_transaction_type_ar, rc2.journal_name_gr, rc2.ap_ccid, rc2.ap_ledger,
                               rc2.functional_currency_code_ap, rc2.accounted_invoice_amount_ap, rc2.intercompany_transaction_type_ap,
                               rc2.gr_segment1, rc2.netting_ar_le,
                               lv_net_ar_ledger_name, --rc2.NETTING_AR_LEDGER                ,
                                NULL, lv_net_ar_fun_currency_code, --rc2.NETTING_AR_FUN_CURR              ,
                                rc2.netting_ap_le, lv_net_ap_ledger_name, --rc2.NETTING_AP_LEDGER                ,
                               NULL, lv_net_ap_fun_currency_code, --rc2.NETTING_AP_FUN_CURR              ,
                                lv_ap_exchange_rate_type, lv_ar_exchange_rate_type, record_type,
                               rc2.ic_trx_number, rc2.gr_batch_id, rc2.gp_batch_id, rc2.gr_journal_id, rc2.gp_journal_id,
                               rc2.gr_journal_line_number, rc2.gp_journal_line_number, rc2.accounting_period, rc2.intercompany_batch_number_ap);

                        counter := counter + 1;



  ----------------------------------------------------------------------------------
  /*********************Scenario 3 ******************************************/
  ----------------------------------------------------------------------------------  
      ---Manish
                    ELSIF (
                        rc2.ap_final_bu = 'Yes'
                        AND rc2.ar_final_bu = 'Yes'
                    ) OR ( rc2.final_bu_con = 'Yes' ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC3', rc2.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc3(rc2.ar_ccid, p_batch_id, rc2.ar_ledger, rc2.functional_currency_code_ar, rc2.accounted_invoice_amount_ar,
                               rc2.gp_segment1, rc2.intercompany_transaction_type_ar, rc2.journal_name_gr, rc2.ap_ccid, rc2.ap_ledger,
                               rc2.functional_currency_code_ap, rc2.accounted_invoice_amount_ap, rc2.intercompany_transaction_type_ap,
                               rc2.gr_segment1, rc2.netting_ar_le,
                               lv_net_ar_ledger_name, --rc2.NETTING_AR_LEDGER               ,
                                NULL, lv_net_ar_fun_currency_code, --rc2.NETTING_AR_FUN_CURR             ,
                                rc2.netting_ap_le, lv_net_ap_ledger_name,--rc2.NETTING_AP_LEDGER               ,
                               NULL, lv_net_ap_fun_currency_code, --rc2.NETTING_AP_FUN_CURR             ,
                                lv_ap_exchange_rate_type, lv_ar_exchange_rate_type, record_type,
                               rc2.ic_trx_number, rc2.gr_batch_id, rc2.gp_batch_id, rc2.gr_journal_id, rc2.gp_journal_id,
                               rc2.gr_journal_line_number, rc2.gp_journal_line_number, rc2.accounting_period, rc2.intercompany_batch_number_ap);

                        counter := counter + 1;


  ----------------------------------------------------------------------------------
  /*********************Scenario 4.1 ******************************************/
  ----------------------------------------------------------------------------------  

                    ELSIF (
                        lv_ar_is_priority_bu != 0
                        AND lv_ap_netting_le = substr(rc2.ar_ccid, 1, instr(rc2.ar_ccid, '.', 1) - 1)
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC4.1', rc2.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc4_1(rc2.ar_ccid, p_batch_id, rc2.ar_ledger, rc2.functional_currency_code_ar, rc2.accounted_invoice_amount_ar,
                                 rc2.gp_segment1, rc2.intercompany_transaction_type_ar, rc2.journal_name_gr, rc2.ap_ccid, rc2.ap_ledger,
                                 rc2.functional_currency_code_ap, rc2.accounted_invoice_amount_ap, rc2.intercompany_transaction_type_ap,
                                 rc2.gr_segment1, rc2.netting_ar_le,
                                 lv_net_ar_ledger_name, --rc2.NETTING_AR_LEDGER               ,
                                  NULL, lv_net_ar_fun_currency_code, --rc2.NETTING_AR_FUN_CURR             ,
                                  rc2.netting_ap_le, lv_net_ap_ledger_name, --rc2.NETTING_AP_LEDGER               ,
                                 NULL, lv_net_ap_fun_currency_code, --rc2.NETTING_AP_FUN_CURR             ,
                                  rc2.entered_invoice_amount_ap, lv_ap_exchange_rate_type, lv_ar_exchange_rate_type,
                                 record_type, rc2.ic_trx_number, rc2.gr_batch_id, rc2.gp_batch_id, rc2.gr_journal_id,
                                 rc2.gp_journal_id, rc2.gr_journal_line_number, rc2.gp_journal_line_number, rc2.accounting_period, rc2.
                                 intercompany_batch_number_ap);

                        counter := counter + 1;

              ---Scenario 4.1 - END ---
  ----------------------------------------------------------------------------------
  /*********************Scenario 4.2 ******************************************/
  ----------------------------------------------------------------------------------  

                    ELSIF (
                        lv_ap_is_priority_bu != 0
                        AND lv_ar_netting_le = substr(rc2.ap_ccid, 1, instr(rc2.ap_ccid, '.', 1) - 1)
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC4.2', rc2.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc4_2(rc2.ar_ccid, p_batch_id, rc2.ar_ledger, rc2.functional_currency_code_ar, rc2.accounted_invoice_amount_ar,
                                 rc2.gp_segment1, rc2.intercompany_transaction_type_ar, rc2.journal_name_gr, rc2.ap_ccid, rc2.ap_ledger,
                                 rc2.functional_currency_code_ap, rc2.accounted_invoice_amount_ap, rc2.intercompany_transaction_type_ap,
                                 rc2.gr_segment1, rc2.netting_ar_le,
                                 lv_net_ar_ledger_name, --rc2.NETTING_AR_LEDGER               ,
                                  NULL, lv_net_ar_fun_currency_code, --rc2.NETTING_AR_FUN_CURR             ,
                                  rc2.netting_ap_le, lv_net_ap_ledger_name, --rc2.NETTING_AP_LEDGER               ,
                                 NULL, lv_net_ap_fun_currency_code, --rc2.NETTING_AP_FUN_CURR             ,
                                  lv_ap_exchange_rate_type, lv_ar_exchange_rate_type, record_type,
                                 rc2.ic_trx_number, rc2.gr_batch_id, rc2.gp_batch_id, rc2.gr_journal_id, rc2.gp_journal_id,
                                 rc2.gr_journal_line_number, rc2.gp_journal_line_number, rc2.accounting_period, rc2.intercompany_batch_number_ap);

                        counter := counter + 1;

----------------------------------------------------------------------------------
  /*********************Scenario 5.1 ******************************************/
  ----------------------------------------------------------------------------------  
        /**** User Story DP-RTR-IC-149 Start *****/
        
                    ELSIF ( (
                        lv_ar_is_priority_bu > 0
                        AND lv_ap_netting_le != substr(rc2.ar_ccid, 1, instr(rc2.ar_ccid, '.', 1) - 1)
                        AND lv_ap_is_priority_bu <= 0
                        AND rc2.ap_final_netting_le = 'Yes'
                        AND ( getemea(rc2.ap_ledger) = 'Yes' OR getemea(rc2.ar_ledger) = 'Yes' )
                    ) OR (
                        lv_ar_is_priority_bu <> 0
                        AND lv_ap_netting_le != substr(rc2.ar_ccid, 1, instr(rc2.ar_ccid, '.', 1) - 1)
                        AND lv_ap_is_priority_bu = 0
                        AND getemea(rc2.ap_ledger) = 'No'
                        AND getemea(rc2.ar_ledger) = 'No'
                    ) ) THEN
                    
               /**** User Story DP-RTR-IC-149 End *****/     
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC5.1', rc2.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc5_1(p_batch_id, rc2.ar_ccid, rc2.ar_ledger, rc2.functional_currency_code_ar, rc2.accounted_invoice_amount_ar,
                                 rc2.intercompany_batch_number_ap, rc2.gp_segment1, rc2.intercompany_transaction_type_ar, rc2.journal_name_gr,
                                 rc2.journal_name_gp,
                                 rc2.ap_ccid, rc2.ap_ledger, rc2.functional_currency_code_ap, rc2.accounted_invoice_amount_ap, rc2.intercompany_transaction_type_ap,
                                 rc2.gr_segment1, rc2.netting_ar_le, lv_net_ar_ledger_name, --rc2.NETTING_AR_LEDGER               ,
                                  NULL, lv_net_ar_fun_currency_code, --rc2.NETTING_AR_FUN_CURR             ,
                                 rc2.netting_ap_le, lv_net_ap_ledger_name, --rc2.NETTING_AP_LEDGER               ,
                                  NULL, lv_net_ap_fun_currency_code, --rc2.NETTING_AP_FUN_CURR             ,
                                  lv_ap_exchange_rate_type,
                                 lv_ar_exchange_rate_type, record_type, rc2.ic_trx_number, rc2.gr_batch_id, rc2.gp_batch_id,
                                 rc2.gr_journal_id, rc2.gp_journal_id, rc2.gr_journal_line_number, rc2.gp_journal_line_number, rc2.accounting_period);

                        counter := counter + 1;

    ----------------------------------------------------------------------------------
  /*********************Scenario 5.2 ******************************************/
  ----------------------------------------------------------------------------------  
                 /**** User Story DP-RTR-IC-149 Start *****/    
                    ELSIF ( (
                        lv_ap_is_priority_bu > 0
                        AND lv_ar_netting_le != substr(rc2.ap_ccid, 1, instr(rc2.ap_ccid, '.', 1) - 1)
                        AND lv_ar_is_priority_bu <= 0
                        AND rc2.ar_final_netting_le = 'Yes'
                        AND ( getemea(rc2.ap_ledger) = 'Yes' OR getemea(rc2.ar_ledger) = 'Yes' )
                    ) OR (
                        lv_ap_is_priority_bu <> 0
                        AND lv_ar_netting_le != substr(rc2.ap_ccid, 1, instr(rc2.ap_ccid, '.', 1) - 1)
                        AND lv_ar_is_priority_bu = 0
                        AND getemea(rc2.ap_ledger) = 'No'
                        AND getemea(rc2.ar_ledger) = 'No'
                    ) ) THEN
                    
                   /**** User Story DP-RTR-IC-149 End *****/
                   
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC5.2', rc2.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc5_2(p_batch_id, rc2.ar_ccid, rc2.ar_ledger, rc2.functional_currency_code_ar, rc2.accounted_invoice_amount_ar,
                                 rc2.intercompany_batch_number_ap, rc2.gp_segment1, rc2.intercompany_transaction_type_ar, rc2.journal_name_gr,
                                 rc2.journal_name_gp,
                                 rc2.ap_ccid, rc2.ap_ledger, rc2.functional_currency_code_ap, rc2.accounted_invoice_amount_ap, rc2.intercompany_transaction_type_ap,
                                 rc2.gr_segment1, rc2.netting_ar_le, lv_net_ar_ledger_name, --rc2.NETTING_AR_LEDGER               ,
                                  NULL, lv_net_ar_fun_currency_code, --rc2.NETTING_AR_FUN_CURR             ,
                                 rc2.netting_ap_le, lv_net_ap_ledger_name, --rc2.NETTING_AP_LEDGER               ,
                                  NULL, lv_net_ap_fun_currency_code, --rc2.NETTING_AP_FUN_CURR             ,
                                  lv_ap_exchange_rate_type,
                                 lv_ar_exchange_rate_type, record_type, rc2.ic_trx_number, rc2.gr_batch_id, rc2.gp_batch_id,
                                 rc2.gr_journal_id, rc2.gp_journal_id, rc2.gr_journal_line_number, rc2.gp_journal_line_number, rc2.accounting_period);

                        counter := counter + 1;

----------------------------------------------------------------------------------
  /*********************Scenario 6A-1 ******************************************/
  ----------------------------------------------------------------------------------  

                    ELSIF (
                        lv_ar_netting_is_priority_bu <> 0
                        AND rc2.ap_final_netting_le = 'No'
                        AND getnettingnettingle(rc2.netting_ap_le) != getnettingnettingle(rc2.netting_ar_le)
                        AND substr(rc2.ar_ccid, 1, instr(rc2.ar_ccid, '.', 1) - 1) != rc2.netting_ar_le
                        AND rc2.ap_final_netting_le = 'No'
                        AND ( rc2.ar_final_bu != 'Yes' OR rc2.ap_final_bu != 'Yes'
                        AND rc2.final_bu_con = 'No' )
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC6A1', rc2.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc6a1(p_batch_id, rc2.ar_ccid, rc2.ar_ledger, rc2.functional_currency_code_ar, rc2.accounted_invoice_amount_ar,
                                 rc2.gp_segment1, rc2.intercompany_transaction_type_ar, rc2.journal_name_gp, rc2.ap_ccid, rc2.ap_ledger,
                                 rc2.functional_currency_code_ap, rc2.accounted_invoice_amount_ap, rc2.intercompany_transaction_type_ap,
                                 rc2.journal_name_gr, rc2.netting_ar_le,
                                 lv_net_ar_ledger_name, --rc2.NETTING_AR_LEDGER               ,
                                  NULL, lv_net_ar_fun_currency_code, --rc2.NETTING_AR_FUN_CURR             ,
                                  NULL, lv_net_ap_fun_currency_code, --rc2.NETTING_AP_FUN_CURR             ,
                                 rc2.gr_segment1, rc2.netting_ap_le, lv_net_ap_ledger_name, --rc2.NETTING_AP_LEDGER               ,
                                  lv_ap_exchange_rate_type, lv_ar_exchange_rate_type,
                                 record_type, rc2.ic_trx_number, rc2.gr_batch_id, rc2.gp_batch_id, rc2.gr_journal_id,
                                 rc2.gp_journal_id, rc2.gr_journal_line_number, rc2.gp_journal_line_number, rc2.accounting_period, rc2.
                                 intercompany_batch_number_ap);

                        counter := counter + 1;


----------------------------------------------------------------------------------
  /*********************Scenario 6A-2 ******************************************/
  ----------------------------------------------------------------------------------  
                    ELSIF (
                        lv_ap_netting_is_priority_bu <> 0
                        AND rc2.ar_final_netting_le = 'No'
                        AND getnettingnettingle(rc2.netting_ap_le) != getnettingnettingle(rc2.netting_ar_le)
                        AND substr(rc2.ap_ccid, 1, instr(rc2.ap_ccid, '.', 1) - 1) != rc2.netting_ap_le
                        AND rc2.ar_final_netting_le = 'No'
                        AND ( rc2.ar_final_bu != 'Yes' OR rc2.ap_final_bu != 'Yes' )
                        AND rc2.final_bu_con = 'No'
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC6A2', rc2.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc6a2(p_batch_id, rc2.ar_ccid, rc2.ar_ledger, rc2.functional_currency_code_ar, rc2.accounted_invoice_amount_ar,
                                 rc2.gp_segment1, rc2.intercompany_transaction_type_ar, rc2.journal_name_gp, rc2.ap_ccid, rc2.ap_ledger,
                                 rc2.functional_currency_code_ap, rc2.accounted_invoice_amount_ap, rc2.intercompany_transaction_type_ap,
                                 rc2.journal_name_gr, rc2.netting_ar_le,
                                 lv_net_ar_ledger_name, --rc2.NETTING_AR_LEDGER               ,
                                  NULL, lv_net_ar_fun_currency_code, --rc2.NETTING_AR_FUN_CURR             ,
                                  NULL, lv_net_ap_fun_currency_code, --rc2.NETTING_AP_FUN_CURR             ,
                                 rc2.gr_segment1, rc2.netting_ap_le, lv_net_ap_ledger_name, --rc2.NETTING_AP_LEDGER               ,
                                  lv_ap_exchange_rate_type, lv_ar_exchange_rate_type,
                                 record_type, rc2.ic_trx_number, rc2.gr_batch_id, rc2.gp_batch_id, rc2.gr_journal_id,
                                 rc2.gp_journal_id, rc2.gr_journal_line_number, rc2.gp_journal_line_number, rc2.accounting_period, rc2.
                                 intercompany_batch_number_ap);

                        counter := counter + 1;

  ----------------------------------------------------------------------------------
  /*********************Scenario 6B1 ******************************************/
  ----------------------------------------------------------------------------------  

                    ELSIF (
                        lv_ar_netting_is_priority_bu <> 0
                        AND rc2.ar_final_netting_le = 'Yes'
                        AND getnettingnettingle(rc2.netting_ap_le) = getnettingnettingle(rc2.netting_ar_le)
                        AND substr(rc2.ar_ccid, 1, instr(rc2.ar_ccid, '.', 1) - 1) != rc2.netting_ar_le
                        AND rc2.ap_final_netting_le = 'No'
                        AND ( rc2.ar_final_bu != 'Yes' OR rc2.ap_final_bu != 'Yes' )
                        AND rc2.final_bu_con = 'No'
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC6B1', rc2.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc6b1(p_batch_id, rc2.ar_ccid, rc2.ar_ledger, rc2.functional_currency_code_ar, rc2.accounted_invoice_amount_ar,
                                 rc2.gp_segment1, rc2.intercompany_transaction_type_ar, rc2.journal_name_gp, rc2.ap_ccid, rc2.ap_ledger,
                                 rc2.functional_currency_code_ap, rc2.accounted_invoice_amount_ap, rc2.intercompany_transaction_type_ap,
                                 rc2.journal_name_gr, rc2.netting_ar_le,
                                 lv_net_ar_ledger_name, --rc2.NETTING_AR_LEDGER               ,
                                  NULL, lv_net_ar_fun_currency_code, --rc2.NETTING_AR_FUN_CURR             ,
                                  NULL, lv_net_ap_fun_currency_code, --rc2.NETTING_AP_FUN_CURR             ,
                                 rc2.gr_segment1, rc2.netting_ap_le, lv_net_ap_ledger_name, --rc2.NETTING_AP_LEDGER               ,
                                  lv_ap_exchange_rate_type, lv_ar_exchange_rate_type,
                                 record_type, rc2.ic_trx_number, rc2.gr_batch_id, rc2.gp_batch_id, rc2.gr_journal_id,
                                 rc2.gp_journal_id, rc2.gr_journal_line_number, rc2.gp_journal_line_number, rc2.accounting_period, rc2.
                                 intercompany_batch_number_ap);

                        counter := counter + 1;

  ----------------------------------------------------------------------------------
  /*********************Scenario 6B2 ******************************************/
  ----------------------------------------------------------------------------------                                              

                    ELSIF (
                        lv_ap_netting_is_priority_bu <> 0
                        AND rc2.ap_final_netting_le = 'Yes'
                        AND getnettingnettingle(rc2.netting_ap_le) = getnettingnettingle(rc2.netting_ar_le)
                        AND substr(rc2.ap_ccid, 1, instr(rc2.ap_ccid, '.', 1) - 1) != rc2.netting_ap_le
                        AND rc2.ar_final_netting_le = 'No'
                        AND ( rc2.ar_final_bu != 'Yes' OR rc2.ap_final_bu != 'Yes' )
                        AND rc2.final_bu_con = 'No'
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC6B2', rc2.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc6b2(p_batch_id, rc2.ar_ccid, rc2.ar_ledger, rc2.functional_currency_code_ar, rc2.accounted_invoice_amount_ar,
                                 rc2.gp_segment1, rc2.intercompany_transaction_type_ar, rc2.journal_name_gp, rc2.ap_ccid, rc2.ap_ledger,
                                 rc2.functional_currency_code_ap, rc2.accounted_invoice_amount_ap, rc2.intercompany_transaction_type_ap,
                                 rc2.journal_name_gr, rc2.netting_ar_le,
                                 lv_net_ar_ledger_name, --rc2.NETTING_AR_LEDGER               ,
                                  NULL, lv_net_ar_fun_currency_code, --rc2.NETTING_AR_FUN_CURR             ,
                                  NULL, lv_net_ap_fun_currency_code, --rc2.NETTING_AP_FUN_CURR             ,
                                 rc2.gr_segment1, rc2.netting_ap_le, lv_net_ap_ledger_name, --rc2.NETTING_AP_LEDGER               ,
                                  lv_ap_exchange_rate_type, lv_ar_exchange_rate_type,
                                 record_type, rc2.ic_trx_number, rc2.gr_batch_id, rc2.gp_batch_id, rc2.gr_journal_id,
                                 rc2.gp_journal_id, rc2.gr_journal_line_number, rc2.gp_journal_line_number, rc2.accounting_period, rc2.
                                 intercompany_batch_number_ap);

                        counter := counter + 1;

  ----------------------------------------------------------------------------------
  /*********************Scenario 7A1 ******************************************/
  ----------------------------------------------------------------------------------  
                    ELSIF (
                        lv_ar_is_priority_bu > 0
                        AND rc2.ap_final_netting_le = 'No'
                        AND getnettingnettingle(rc2.netting_ap_le) = substr(rc2.ar_ccid, 1, instr(rc2.ar_ccid, '.', 1) - 1)
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC7A1', rc2.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc7a1(p_batch_id, rc2.ar_ccid, rc2.ar_ledger, rc2.functional_currency_code_ar, rc2.accounted_invoice_amount_ar,
                                 rc2.intercompany_batch_number_ap, rc2.gp_segment1, rc2.intercompany_transaction_type_ar, rc2.journal_name_gp,
                                 rc2.ap_ccid,
                                 rc2.ap_ledger, rc2.functional_currency_code_ap, rc2.accounted_invoice_amount_ap, rc2.intercompany_transaction_type_ap,
                                 rc2.journal_name_gr,
                                 rc2.netting_ar_le, lv_net_ar_ledger_name, --rc2.NETTING_AR_LEDGER               ,
                                  NULL, lv_net_ar_fun_currency_code, --rc2.NETTING_AR_FUN_CURR             ,
                                  NULL,
                                 lv_net_ap_fun_currency_code, --rc2.NETTING_AP_FUN_CURR             ,
                                  rc2.gr_segment1, rc2.netting_ap_le, lv_net_ap_ledger_name, --rc2.NETTING_AP_LEDGER               ,
                                  lv_ap_exchange_rate_type,
                                 lv_ar_exchange_rate_type, record_type, rc2.ic_trx_number, rc2.gr_batch_id, rc2.gp_batch_id,
                                 rc2.gr_journal_id, rc2.gp_journal_id, rc2.gr_journal_line_number, rc2.gp_journal_line_number, rc2.accounting_period);

                        counter := counter + 1;
  ----------------------------------------------------------------------------------
  /*********************Scenario 7A2 ******************************************/
  ----------------------------------------------------------------------------------  
                    ELSIF (
                        lv_ap_is_priority_bu > 0
                        AND rc2.ar_final_netting_le = 'No'
                        AND getnettingnettingle(rc2.netting_ar_le) = substr(rc2.ap_ccid, 1, instr(rc2.ap_ccid, '.', 1) - 1)
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC7A2', rc2.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc7a2(p_batch_id, rc2.ar_ccid, rc2.ar_ledger, rc2.functional_currency_code_ar, rc2.accounted_invoice_amount_ar,
                                 rc2.intercompany_batch_number_ap, rc2.gp_segment1, rc2.intercompany_transaction_type_ar, rc2.journal_name_gp,
                                 rc2.ap_ccid,
                                 rc2.ap_ledger, rc2.functional_currency_code_ap, rc2.accounted_invoice_amount_ap, rc2.intercompany_transaction_type_ap,
                                 rc2.journal_name_gr,
                                 rc2.netting_ar_le, lv_net_ar_ledger_name, --rc2.NETTING_AR_LEDGER               ,
                                  NULL, lv_net_ar_fun_currency_code, --rc2.NETTING_AR_FUN_CURR             ,
                                  NULL,
                                 lv_net_ap_fun_currency_code, --rc2.NETTING_AP_FUN_CURR             ,
                                  rc2.gr_segment1, rc2.netting_ap_le, lv_net_ap_ledger_name, --rc2.NETTING_AP_LEDGER               ,
                                  lv_ap_exchange_rate_type,
                                 lv_ar_exchange_rate_type, record_type, rc2.ic_trx_number, rc2.gr_batch_id, rc2.gp_batch_id,
                                 rc2.gr_journal_id, rc2.gp_journal_id, rc2.gr_journal_line_number, rc2.gp_journal_line_number, rc2.accounting_period);

                        counter := counter + 1;

  ----------------------------------------------------------------------------------
  /*********************Scenario 7B1 ******************************************/
  ----------------------------------------------------------------------------------  
                    ELSIF (
                        lv_ar_is_priority_bu > 0
                        AND rc2.ap_final_netting_le = 'No'
                        AND getnettingnettingle(rc2.netting_ap_le) != substr(rc2.ar_ccid, 1, instr(rc2.ar_ccid, '.', 1) - 1)
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC7B1', rc2.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc7b1(p_batch_id, rc2.ar_ccid, rc2.ar_ledger, rc2.functional_currency_code_ar, rc2.accounted_invoice_amount_ar,
                                 rc2.intercompany_batch_number_ap, rc2.gp_segment1, rc2.intercompany_transaction_type_ar, rc2.journal_name_gp,
                                 rc2.ap_ccid,
                                 rc2.ap_ledger, rc2.functional_currency_code_ap, rc2.accounted_invoice_amount_ap, rc2.intercompany_transaction_type_ap,
                                 rc2.journal_name_gr,
                                 rc2.netting_ar_le, lv_net_ar_ledger_name, --rc2.NETTING_AR_LEDGER                ,
                                  NULL, lv_net_ar_fun_currency_code, --rc2.NETTING_AR_FUN_CURR              ,
                                  NULL,
                                 lv_net_ap_fun_currency_code, --rc2.NETTING_AP_FUN_CURR              ,
                                  rc2.gr_segment1, rc2.netting_ap_le, lv_net_ap_ledger_name, --rc2.NETTING_AP_LEDGER                ,
                                  lv_ap_exchange_rate_type,
                                 lv_ar_exchange_rate_type, record_type, rc2.ic_trx_number, rc2.gr_batch_id, rc2.gp_batch_id,
                                 rc2.gr_journal_id, rc2.gp_journal_id, rc2.gr_journal_line_number, rc2.gp_journal_line_number, rc2.accounting_period);

                        counter := counter + 1;

----------------------------------------------------------------------------------
  /*********************Scenario 7B2 ******************************************/
  ----------------------------------------------------------------------------------                                            

                    ELSIF (
                        lv_ap_is_priority_bu > 0
                        AND rc2.ar_final_netting_le = 'No'
                        AND getnettingnettingle(rc2.netting_ar_le) != substr(rc2.ap_ccid, 1, instr(rc2.ap_ccid, '.', 1) - 1)
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC7B2', rc2.intercompany_batch_number_ap,
                                      sysdate);
                        logging_insert('Oracle LSI', p_batch_id, 1, record_type, rc2.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc7b2(p_batch_id, rc2.ar_ccid, rc2.ar_ledger, rc2.functional_currency_code_ar, rc2.accounted_invoice_amount_ar,
                                 rc2.intercompany_batch_number_ap, rc2.gp_segment1, rc2.intercompany_transaction_type_ar, rc2.journal_name_gp,
                                 rc2.ap_ccid,
                                 rc2.ap_ledger, rc2.functional_currency_code_ap, rc2.accounted_invoice_amount_ap, rc2.intercompany_transaction_type_ap,
                                 rc2.journal_name_gr,
                                 rc2.netting_ar_le, lv_net_ar_ledger_name, --rc2.NETTING_AR_LEDGER               ,
                                  NULL, lv_net_ar_fun_currency_code, --rc2.NETTING_AR_FUN_CURR             ,
                                  NULL,
                                 lv_net_ap_fun_currency_code, --rc2.NETTING_AP_FUN_CURR             ,
                                  rc2.gr_segment1, rc2.netting_ap_le, lv_net_ap_ledger_name, --rc2.NETTING_AP_LEDGER               ,
                                  lv_ap_exchange_rate_type,
                                 lv_ar_exchange_rate_type, record_type, rc2.ic_trx_number, rc2.gr_batch_id, rc2.gp_batch_id,
                                 rc2.gr_journal_id, rc2.gp_journal_id, rc2.gr_journal_line_number, rc2.gp_journal_line_number, rc2.accounting_period);

                        counter := counter + 1;

----------------------------------------------------------------------------------
  /*********************Scenario 8 ******************************************/
  ----------------------------------------------------------------------------------  

                    ELSIF (
                        rc2.ar_final_netting_le = 'No'
                        AND rc2.ap_final_netting_le = 'No'
                        AND ( getemea(rc2.ar_ledger) = 'Yes' OR getemea(rc2.ap_ledger) = 'Yes' )
                    ) THEN
                        logging_insert('Oracle LSI', p_batch_id, 1, 'SC8', rc2.intercompany_batch_number_ap,
                                      sysdate);
                        lsi_sc8(p_batch_id, rc2.ar_ccid, rc2.ar_ledger, rc2.functional_currency_code_ar, rc2.accounted_invoice_amount_ar,
                               rc2.intercompany_batch_number_ap, rc2.gp_segment1, rc2.intercompany_transaction_type_ar, rc2.journal_name_gp,
                               rc2.ap_ccid,
                               rc2.ap_ledger, rc2.functional_currency_code_ap, rc2.accounted_invoice_amount_ap, rc2.intercompany_transaction_type_ap,
                               rc2.journal_name_gr,
                               rc2.netting_ar_le, lv_net_ar_ledger_name, --rc2.NETTING_AR_LEDGER               ,
                                NULL, lv_net_ar_fun_currency_code, --rc2.NETTING_AR_FUN_CURR             ,
                                NULL,
                               lv_net_ap_fun_currency_code, --rc2.NETTING_AP_FUN_CURR             ,
                                rc2.gr_segment1, rc2.netting_ap_le, lv_net_ap_ledger_name, --rc2.NETTING_AP_LEDGER               ,
                                lv_ap_exchange_rate_type,
                               lv_ar_exchange_rate_type, record_type, rc2.ic_trx_number, rc2.gr_batch_id, rc2.gp_batch_id,
                               rc2.gr_journal_id, rc2.gp_journal_id, rc2.gr_journal_line_number, rc2.gp_journal_line_number, rc2.accounting_period);

                        counter := counter + 1;
                    END IF;

                    IF counter = 0 OR counter > 1 THEN
                        INSERT INTO wsc_ahcs_lsi_err_t (
                            file_name,
                            error_code,
                            error_msg,
                            created_date,
                            last_updated_by,
                            last_updated_date,
                            error_file_sent_flag,
                            created_by,
                            batch_id,
                            to_be_processed
                        ) VALUES (
                            lv_file_name,
                            'ERR_MULTI_OR_NO_SCN',
                            'Multiple or NO Scenario Applied for IC :' || rc2.intercompany_batch_number_ap,
                            sysdate,
                            'FININT',
                            sysdate,
                            'N',
                            'FININT',
                            p_batch_id,
                            'Y'
                        );

                        COMMIT;
                    END IF;

                END;

                COMMIT;
            END LOOP;

            BEGIN
                DELETE FROM wsc_ahcs_lsi_journal_match_t
                WHERE
                    batch_id = p_batch_id;

                COMMIT;
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;

            BEGIN
                SELECT
                    COUNT(DISTINCT intercompany_batch_number
                                   || '-'
                                   || intercompany_transaction_number)
                INTO lv_counter
                FROM
                    wsc_ahcs_lsi_journal_t
                WHERE
                        status = 'MATCHED'
                    AND batch_id = p_batch_id;

            EXCEPTION
                WHEN OTHERS THEN
                    lv_counter := 0;
            END;

            BEGIN
                SELECT
                    COUNT(DISTINCT ic_batch_number
                                   || '-'
                                   || ic_trx_number)
                INTO lv_final_counter
                FROM
                    wsc_ahcs_lsi_netting_entry_t
                WHERE
                    batch_id = p_batch_id;

            EXCEPTION
                WHEN OTHERS THEN
                    lv_final_counter := 0;
            END;

            IF lv_counter > 0 THEN
                UPDATE wsc_ahcs_lsi_control_t
                SET
                    netting_status =
                        CASE
                            WHEN lv_counter = lv_final_counter THEN
                                'SUCCESS'
                            WHEN lv_final_counter = 0          THEN
                                'NOT SUCCESS'
                            ELSE
                                'PARTIAL SUCCESS'
                        END,
                    last_updated_date = sysdate,
                    ahcs_eligible_lines = lv_counter,
                    ahcs_final_count = lv_final_counter
                WHERE
                    batch_id = p_batch_id;

                COMMIT;
                UPDATE wsc_ahcs_int_control_t
                SET
                    group_id = NULL,
                    status = 'TRANSFORM_SUCCESS'
                WHERE
                    batch_id = p_batch_id;

                COMMIT;
            ELSE
                UPDATE wsc_ahcs_lsi_control_t
                SET
                    netting_status = 'NOT SUCCESS',
                    last_updated_date = sysdate
                WHERE
                    batch_id = p_batch_id;

                COMMIT;
            END IF;

        END IF;

        UPDATE wsc_ahcs_lsi_netting_entry_t
        SET
            to_be_processed = 'Y'
        WHERE
                batch_id = p_batch_id
            AND to_be_processed IS NULL;

        COMMIT;
        UPDATE wsc_ahcs_lsi_netting_entry_headers_t
        SET
            to_be_processed = 'Y'
        WHERE
                batch_id = p_batch_id
            AND to_be_processed IS NULL;

        COMMIT;
        BEGIN
            SELECT
                COUNT(1)
            INTO lv_ap_unmatched
            FROM
                wsc_ahcs_lsi_journal_t
            WHERE
                status IS NULL;

        END;
        UPDATE wsc_ahcs_lsi_control_t
        SET
            ap_unmatch_count = lv_ap_unmatched
        WHERE
            batch_id = p_batch_id;

        COMMIT;
        wsc_lsi_db_to_ucm_process_p(p_batch_id);
    EXCEPTION
        WHEN OTHERS THEN
            lv_error := substr(dbms_utility.format_error_backtrace, 1, 200);
            wsc_ahcs_int_error_logging.error_logging(p_batch_id, 'EXT041'
                                                                 || '_'
                                                                 || 'LSI', 'Oracle LSI', 'Error in Netting Process-' || sqlerrm);

            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'DB_ERR_IN_NETTING',
                lv_error,
                sysdate,
                'FININT',
                sysdate,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;
    END wsc_lsi_netting_p;

    PROCEDURE wsc_lsi_db_to_ucm_process_p (
        p_batch_id NUMBER
    ) IS

        lv_error                VARCHAR2(200);
        lv_file_name            VARCHAR2(100);
        TYPE netting_entry_type IS
            TABLE OF wsc_ahcs_lsi_netting_entry_t%rowtype;
        lv_netting_entry_t_type netting_entry_type;

    --TRANSACTION_NUMBER,HEADER_ID,LEDGER,LE,ACCOUNTING_PERIOD,ACCOUNTING_DATE,EVENT_TYPE,Event_Class,Batch_ID,file_name,record_type
        CURSOR c1 (
            p_batch_id NUMBER
        ) IS
        SELECT
            *
        FROM
            wsc_ahcs_lsi_netting_entry_t
        WHERE
                batch_id = p_batch_id
            AND to_be_processed = 'Y'
        FOR UPDATE;

    BEGIN
        SELECT
            file_name
        INTO lv_file_name
        FROM
            wsc_ahcs_lsi_control_t
        WHERE
            batch_id = p_batch_id;

        INSERT INTO wsc_ahcs_lsi_netting_entry_headers_t (
            transaction_type,
            ledger_name,
            transaction_date,
            transaction_number,
            source_system,
            file_name,
            header_id,
            batch_id,
            event_type,
            accounting_date,
            accounting_period,
            event_class,
            le,
            to_be_processed,
            record_type
        )
            SELECT
                decode(record_type, 'AP-AR', 'INVOICE', 'GL'),
                ledger,
                accounting_date,
                'ORACLE_LSI' || wsc_ahcs_lsi_header_t_s1.NEXTVAL,
                'ORACLE_LSI',
                file_name,
                wsc_ahcs_lsi_header_t_s1.CURRVAL,
                batch_id,
                event_type,
                accounting_date,
                accounting_period,
                event_class,
                le,
                'Y',
                record_type
            FROM
                (
                    SELECT
                        ledger,
                        le,
                        accounting_period,
                        accounting_date,
                        event_type,
                        event_class,
                        batch_id,
                        file_name,
                        record_type
                    FROM
                        wsc_ahcs_lsi_netting_entry_t a
                    WHERE
                            to_be_processed = 'Y'
                        AND batch_id = p_batch_id
        /*** bug fix INC2679428 start***/
                        AND NOT EXISTS (
                            SELECT
                                1
                            FROM
                                wsc_ahcs_lsi_netting_entry_headers_t
                            WHERE
                                    ledger_name = a.ledger
                                AND le = a.le
                                AND accounting_period = a.accounting_period
                                AND event_type = a.event_type
                                AND event_class = a.event_class
                                AND batch_id = a.batch_id
                                AND file_name = a.file_name
                                AND record_type = a.record_type
                                AND to_be_processed = 'Y'
                        )
                /*** bug fix INC2679428 end***/
                    GROUP BY
                        ledger,
                        le,
                        accounting_period,
                        accounting_date,
                        event_type,
                        event_class,
                        batch_id,
                        file_name,
                        record_type
                );

        COMMIT;
        OPEN c1(p_batch_id);
        LOOP
            FETCH c1
            BULK COLLECT INTO lv_netting_entry_t_type LIMIT 400;
            EXIT WHEN lv_netting_entry_t_type.count = 0;
            FORALL i IN 1..lv_netting_entry_t_type.count
                UPDATE wsc_ahcs_lsi_netting_entry_t l
                SET
                    ( transaction_number,
                      header_id ) = (
                        SELECT
                            transaction_number,
                            header_id
                        FROM
                            wsc_ahcs_lsi_netting_entry_headers_t h
                        WHERE
                                h.ledger_name = lv_netting_entry_t_type(i).ledger
                            AND h.le = lv_netting_entry_t_type(i).le
                            AND h.accounting_period = lv_netting_entry_t_type(i).accounting_period
                            AND h.accounting_date = lv_netting_entry_t_type(i).accounting_date
                            AND h.event_type = lv_netting_entry_t_type(i).event_type
                            AND h.event_class = lv_netting_entry_t_type(i).event_class
                            AND h.batch_id = lv_netting_entry_t_type(i).batch_id
                            AND h.batch_id = p_batch_id
                            AND h.file_name = lv_netting_entry_t_type(i).file_name
                            AND h.record_type = lv_netting_entry_t_type(i).record_type
                            AND h.to_be_processed = 'Y'
                    ),
                    ic_trx_type = decode(record_type, 'AP-AR', 'IC Invoice', 'IC GL')
                WHERE
                        to_be_processed = 'Y'
                    AND ledger = lv_netting_entry_t_type(i).ledger
                    AND le = lv_netting_entry_t_type(i).le
                    AND accounting_period = lv_netting_entry_t_type(i).accounting_period
                    AND accounting_date = lv_netting_entry_t_type(i).accounting_date
                    AND event_type = lv_netting_entry_t_type(i).event_type
                    AND event_class = lv_netting_entry_t_type(i).event_class
                    AND batch_id = lv_netting_entry_t_type(i).batch_id
                    AND file_name = lv_netting_entry_t_type(i).file_name
                    AND record_type = lv_netting_entry_t_type(i).record_type;

        END LOOP;

        COMMIT;
        INSERT INTO wsc_ahcs_int_status_t (
            header_id,
            line_id,
            application,
            file_name,
            batch_id,
            status,
            accounting_status,
            cr_dr_indicator,
            currency,
            value,
            source_coa,
            target_coa,
            attribute2,
            created_by,
            created_date,
            last_updated_by,
            last_updated_date,
            attribute11,
            attribute3,
            ledger_name
        )
            SELECT
                net.header_id,
                net.lsi_netting_entry_id,
                'Oracle LSI',
                net.file_name,
                net.batch_id,
                decode(lct.status, 'MATCHED', 'TRANSFORM_SUCCESS', 'ERROR', 'TRANSFORM_FAILED',
                       'NEW', NULL, lct.status),
                decode(lct.status, 'MATCHED', NULL, 'NEW', NULL,
                       'ERROR', 'NULL', lct.status),
                decode(sign(net.accounted_amt), - 1, 'CR', 'DR'),
                net.accounted_curr,
                net.accounted_amt,
                net.gl_legal_entity
                || '.'
                || net.gl_oper_grp
                || '.'
                || net.gl_acct
                || '.'
                || net.gl_dept
                || '.'
                || net.gl_site
                || '.'
                || net.gl_ic
                || '.'
                || net.gl_projects
                || '.'
                || net.gl_fut_1
                || '.'
                || net.gl_fut_2,
                net.gl_legal_entity
                || '.'
                || net.gl_oper_grp
                || '.'
                || net.gl_acct
                || '.'
                || net.gl_dept
                || '.'
                || net.gl_site
                || '.'
                || net.gl_ic
                || '.'
                || net.gl_projects
                || '.'
                || net.gl_fut_1
                || '.'
                || net.gl_fut_2,
                'TRANSFORM_SUCCESS',
                'FININT',
                to_date(net.accounting_date, 'YYYY-MM-DD'),
                'FININT',
                to_date(net.accounting_date, 'YYYY-MM-DD'),
                to_date(net.accounting_date, 'YYYY-MM-DD'),
                net.transaction_number,
                net.ledger
            FROM
                wsc_ahcs_lsi_control_t       lct,
                wsc_ahcs_lsi_netting_entry_t net
            WHERE
                    lct.batch_id = net.batch_id
                AND lct.file_name = net.file_name
                AND lct.batch_id = p_batch_id
                AND lct.file_name = lv_file_name
                AND NOT EXISTS (
                    SELECT
                        1
                    FROM
                        wsc_ahcs_int_status_t
                    WHERE
                            line_id = net.lsi_netting_entry_id
                        AND batch_id = p_batch_id
                );	
           --- AND NET.;
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            wsc_ahcs_int_error_logging.error_logging(p_batch_id, 'EXT041'
                                                                 || '_'
                                                                 || 'LSI', 'Oracle LSI', 'Error in Transaction Number update for UCM-' ||
                                                                 sqlerrm);

            lv_error := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'DB_ERR_IN_UCM_CREATION',
                lv_error,
                sysdate,
                'FININT',
                sysdate,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;
    END;

    PROCEDURE wsc_ahcs_lsi_kickoff (
        p_record_type VARCHAR2,
        p_from_date   VARCHAR2,
        p_to_date     VARCHAR2
    ) IS

        x_url          VARCHAR2(1000);
        x_user_name    VARCHAR2(100);
        x_password     VARCHAR2(100);
        lv_record_type VARCHAR2(20);
        l_body         VARCHAR2(32767);
        l_clob         VARCHAR2(32767);
    BEGIN
        lv_record_type := p_record_type;
        BEGIN
            SELECT
                user_name,
                ( replace(password, CHR(38), CHR(38)
                                             || 'amp;') ) 
			   --, password  
                                             ,
                url
            INTO
                x_user_name,
                x_password,
                x_url
            FROM
                xx_imd_details
            WHERE
                ROWNUM = 1;

        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;

        IF ( lv_record_type = 'AP/AR' ) THEN
            BEGIN
                l_body := '{ "RECORD_TYPE":"'
                          || 'AP-AR'
                          || '","FROM_ACC_DATE":"'
                          || p_from_date
                          || '","TO_ACC_DATE":"'
                          || p_to_date
                          || '","SOURCE":"ADHOC" }';

                dbms_output.put_line(l_body);
                apex_web_service.g_request_headers.DELETE();
                apex_web_service.g_request_headers(1).name := 'Content-Type';
                apex_web_service.g_request_headers(1).value := 'application/json';
                l_clob := apex_web_service.make_rest_request(p_url => x_url || ':443/ic/api/integration/v1/flows/rest/WES_WSC_GBL_LSI_AP_AR_RPT_TO_DB_/1.0/lsi',
                p_http_method => 'POST', p_username => x_user_name, p_password => x_password, p_body => l_body);

                apex_json.parse(l_clob);
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
        ELSIF ( lv_record_type = 'Credit Memo' ) THEN
            BEGIN
                l_body := '{   "parameters" : [ {  "name":"IS_ADHOC",          "value":"TRUE"      }  ]}';
                dbms_output.put_line(l_body);
                apex_web_service.g_request_headers.DELETE();
                apex_web_service.g_request_headers(1).name := 'Content-Type';
                apex_web_service.g_request_headers(1).value := 'application/json';
                l_clob := apex_web_service.make_rest_request(p_url => x_url || ':443/ic/api/integration/v1/integrations/WESC_WSC_GBL_LSI_CRED_MEMO_SCH%7C01.00.0000/schedule/jobs',
                p_http_method => 'POST', p_username => x_user_name, p_password => x_password, p_body => l_body);

                apex_json.parse(l_clob);
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
        ELSE
            BEGIN
                l_body := '{ "FROM_ACC_DATE":"'
                          || p_from_date
                          || '","TO_ACC_DATE":"'
                          || p_to_date
                          || '","SOURCE":"ADHOC" }';
                dbms_output.put_line(l_body);
                apex_web_service.g_request_headers.DELETE();
                apex_web_service.g_request_headers(1).name := 'Content-Type';
                apex_web_service.g_request_headers(1).value := 'application/json';
                l_clob := apex_web_service.make_rest_request(p_url => x_url || ':443/ic/api/integration/v1/flows/rest/WES_WSC_GBL_LSI_JOU_RPT_TO_DB_IN/1.0/lsi',
                p_http_method => 'POST', p_username => x_user_name, p_password => x_password, p_body => l_body);

                apex_json.parse(l_clob);
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
        END IF;

    END;

    PROCEDURE wsc_ahcs_lsi_import_failed (
        p_batch_id NUMBER,
        imp_acc_id NUMBER
    ) AS
    BEGIN
        UPDATE wsc_ahcs_lsi_control_t
        SET
            import_acc_id = imp_acc_id,
            status = 'IMP_ACC_ERROR'
        WHERE
            batch_id = p_batch_id;

        UPDATE wsc_ahcs_int_control_t
        SET
            import_acc_id = imp_acc_id,
            status = 'IMP_ACC_ERROR'
        WHERE
            batch_id = p_batch_id;

        UPDATE wsc_ahcs_int_status_t
        SET
            accounting_status = 'IMP_ACC_ERROR'
        WHERE
            batch_id = p_batch_id;

        UPDATE wsc_ahcs_lsi_netting_entry_headers_t
        SET
            to_be_processed = 'Y'
        WHERE
            batch_id = p_batch_id;

        UPDATE wsc_ahcs_lsi_netting_entry_t
        SET
            to_be_processed = 'Y'
        WHERE
            batch_id = p_batch_id;

        COMMIT;
    END;

    PROCEDURE wsc_ahcs_async_lsi_reprocess_gl_p (
        p_batch_id NUMBER,
        p_acc_date TIMESTAMP
    ) AS
        err_msg  VARCHAR2(2000);
        err_code VARCHAR2(100);
    BEGIN
        dbms_scheduler.create_job(job_name => 'lsi_gl_repro'
                                              || p_batch_id
                                              || to_char(sysdate, 'ddmmyyhh24miss'), job_type => 'PLSQL_BLOCK', job_action => 'BEGIN
            WSC_LSI_PKG.wsc_ahcs_lsi_reprocess_gl_p('
                                                                                                                              || p_batch_id
                                                                                                                              || ','''
                                                                                                                              || p_acc_date
                                                                                                                              || ''');
       END;', enabled => true, auto_drop => true,
                                 comments => 'Async steps for LSI Reprocess GL');
    EXCEPTION
        WHEN OTHERS THEN
            wsc_ahcs_int_error_logging.error_logging(p_batch_id, 'EXT041'
                                                                 || '_'
                                                                 || 'LSI', 'Oracle LSI', 'Error in LSI Reprocess Async Job-' || sqlerrm);
    END;

    PROCEDURE wsc_ahcs_lsi_reprocess_gl_p (
        p_batch_id NUMBER,
        p_acc_date TIMESTAMP
    ) IS
        l_acc_date         DATE;
        lv_accounting_date TIMESTAMP;
        lv_error_msg       VARCHAR2(1000);
        lv_file_name       VARCHAR2(100);
    BEGIN
        SELECT
            file_name
        INTO lv_file_name
        FROM
            wsc_ahcs_lsi_control_t
        WHERE
            batch_id = p_batch_id;

        IF p_acc_date IS NOT NULL THEN

            l_acc_date := p_acc_date;
						
			UPDATE wsc_ahcs_lsi_control_t  -- Added this UPDATE statement on 09/08 as per INC2925591
            SET
                
				accounting_date = l_acc_date
            WHERE
                batch_id = p_batch_id;
			COMMIT;
        ELSE

            l_acc_date := NULL;
		END IF;

        MERGE INTO wsc_ahcs_lsi_journal_match_t a
        USING (
                  SELECT
                      gr.extract_name                                                                   gr_extract_name,
                      gp.extract_name                                                                   gp_extract_name,
                      nvl(l_acc_date, gp.gl_accounting_date)                                            gr_gl_acc_date,
                      gr.entered_currency_code                                                          gr_entered_currency_code,
                      gr.functional_currency_code                                                       gr_functional_currency_code,
                      gr.exchange_rate                                                                  gr_exchange_rate,
                      gr.exchange_rate_date                                                             gr_exchange_rate_date,
                      gr.journal_header_name                                                            gr_gl_journal_name,
                      gr.ledger_name                                                                    gr_ledger_name,
                      nvl(l_acc_date, gp.gl_accounting_date)                                            gr_acc_date,
                      ( nvl(gr.running_total_cr, 0) - nvl(gr.running_total_dr, 0) )                     gr_running_total_dr,
                      ( nvl(gr.running_total_accounted_cr, 0) - nvl(gr.running_total_accounted_dr, 0) ) gr_running_total_accounted_dr,
                      gr.exchange_rate_type                                                             gr_exchange_rate_type,
                      gr.segment1                                                                       gr_segment1,
                      gr.segment2                                                                       gr_segment2,
                      gr.segment3                                                                       gr_segment3,
                      gr.segment4                                                                       gr_segment4,
                      gr.segment5                                                                       gr_segment5,
                      gr.segment6                                                                       gr_segment6,
                      gr.segment7                                                                       gr_segment7,
                      gr.segment8                                                                       gr_segment8,
                      gr.segment9                                                                       gr_segment9,
                      gr.legal_entity_name                                                              gr_intercompany_legal_entity,
                      gr.provider_legal_entity                                                          gr_provider_legal_entity,
                      gr.intercompany_transaction_type                                                  gr_intercompany_transaction_type,
                      gr.intercompany_batch_number                                                      gr_intercompany_batch_number,
                      gr.intercompany_transaction_number                                                gr_intercompany_transaction_number,
                      gr.gl_batch_id                                                                    gr_gl_batch_id,
                      gr.gl_journal_id                                                                  gr_gl_journal_id,
                      gr.journal_line_number                                                            gr_journal_line_number,
                      gr.le                                                                             gr_le,
                      gr.journal_accounting_sequence                                                    gr_journal_accounting_sequence,
                      gp.journal_header_name                                                            gp_gl_journal_name,
                      gp.ledger_name                                                                    gp_ledger_name,
                      nvl(l_acc_date, gp.gl_accounting_date)                                            gp_acc_date,
                      gp.exchange_rate                                                                  gp_exchange_rate,
                      gp.exchange_rate_type                                                             gp_exchange_rate_type,
                      gp.exchange_rate_date                                                             gp_exchange_rate_date,
                      nvl(gp.running_total_dr, 0) - nvl(gp.running_total_cr, 0)                         gp_running_total_dr,
                      nvl(gp.running_total_accounted_dr, 0) - nvl(gp.running_total_accounted_cr, 0)     gp_running_total_accounted_dr,
                      gp.segment1                                                                       gp_segment1,
                      gp.segment2                                                                       gp_segment2,
                      gp.segment3                                                                       gp_segment3,
                      gp.segment4                                                                       gp_segment4,
                      gp.segment5                                                                       gp_segment5,
                      gp.segment6                                                                       gp_segment6,
                      gp.segment7                                                                       gp_segment7,
                      gp.segment8                                                                       gp_segment8,
                      gp.segment9                                                                       gp_segment9,
                      gp.legal_entity_name                                                              gp_legal_entity_name,
                      gp.provider_legal_entity                                                          gp_provider_legal_entity,
                      gp.intercompany_transaction_type                                                  gp_intercompany_transaction_type,
                      gp.intercompany_batch_number                                                      gp_intercompany_batch_number,
                      gp.entered_currency_code                                                          gp_entered_currency_code,
                      gp.functional_currency_code                                                       gp_functional_currency_code,
                      gp.intercompany_transaction_number                                                gp_intercompany_transaction_number,
                      gp.gl_batch_id                                                                    gp_gl_batch_id,
                      gp.gl_journal_id                                                                  gp_gl_journal_id,
                      gp.journal_line_number                                                            gp_journal_line_number,
                      gp.le                                                                             gp_le,
                      gp.journal_accounting_sequence                                                    gp_journal_accounting_sequence,
                      gr.accounting_period
                  FROM
                      wsc_ahcs_lsi_journal_t gp,
                      wsc_ahcs_lsi_journal_t gr
                  WHERE
                          1 = 1
                    ---AND NVL(GR.RUNNING_TOTAL_DR,0)=NVL(GP.RUNNING_TOTAL_DR,0)
                      AND gr.intercompany_batch_number = gp.intercompany_batch_number
                      AND gr.intercompany_transaction_number = gp.intercompany_transaction_number
                      AND gp.segment6 = gr.segment1
                      AND gp.segment1 = gr.segment6
                      AND gr.party_type_flag = 'R'
                      AND gp.party_type_flag = 'I'
                      AND gr.batch_id = gp.batch_id
                      AND gr.batch_id = p_batch_id
                      AND NOT EXISTS (
                          SELECT
                              1
                          FROM
                              wsc_ahcs_lsi_journal_match_t
                          WHERE
                                  gr_gl_batch_id = gr.gl_batch_id
                              AND gr_gl_journal_id = gr.gl_journal_id
                              AND gr_journal_line_number = gr.journal_line_number
                      )
                      AND NOT EXISTS (
                          SELECT
                              1
                          FROM
                              wsc_ahcs_lsi_journal_match_t
                          WHERE
                                  gp_gl_batch_id = gp.gl_batch_id
                              AND gp_gl_journal_id = gp.gl_journal_id
                              AND gp_journal_line_number = gp.journal_line_number
                      )
              )
        b ON ( a.gr_intercompany_batch_number = b.gr_intercompany_batch_number
               AND a.gp_ledger_name = b.gp_ledger_name
               AND a.gr_ledger_name = b.gr_ledger_name
               AND a.gp_intercompany_transaction_number = b.gp_intercompany_transaction_number )
        WHEN NOT MATCHED THEN
        INSERT (
            batch_id,
            gp_extract_name,
            gr_extract_name,
            gr_gl_accounting_date,
            gr_entered_currency_code,
            gr_functional_currency_code,
            gr_exchange_rate,
            gr_exchange_rate_type,
            gr_exchange_rate_date,
            gr_gl_journal_id,
            gr_gl_journal_name,
            gr_journal_line_number,
            gr_ledger_name,
            gr_running_total_dr,
            gr_running_total_accounted_dr,
            gr_segment1,
            gr_segment2,
            gr_segment3,
            gr_segment4,
            gr_segment5,
            gr_segment6,
            gr_segment7,
            gr_segment8,
            gr_segment9,
            gr_legal_entity_name,
            gr_intercompany_transaction_type,
            gr_intercompany_batch_number,
            gr_intercompany_transaction_number,
            gr_gl_batch_id,
            gr_le,
            gr_journal_accounting_sequence,
            gp_gl_accounting_date,
            gp_entered_currency_code,
            gp_functional_currency_code,
            gp_exchange_rate,
            gp_exchange_rate_type,
            gp_exchange_rate_date,
            gp_gl_journal_id,
            gp_gl_journal_name,
            gp_journal_line_number,
            gp_ledger_name,
            gp_running_total_dr,
            gp_running_total_accounted_dr,
            gp_segment1,
            gp_segment2,
            gp_segment3,
            gp_segment4,
            gp_segment5,
            gp_segment6,
            gp_segment7,
            gp_segment8,
            gp_segment9,
            gp_legal_entity_name,
            gp_intercompany_transaction_type,
            gp_intercompany_batch_number,
            gp_intercompany_transaction_number,
            gp_gl_batch_id,
            gp_le,
            gp_journal_accounting_sequence,
            accounting_period )
        VALUES
            ( p_batch_id,
              b.gp_extract_name,
              b.gr_extract_name,
              b.gr_gl_acc_date,
              b.gr_entered_currency_code,
              b.gr_functional_currency_code,
              b.gr_exchange_rate,
              b.gr_exchange_rate_type,
              b.gr_exchange_rate_date,
              b.gr_gl_journal_id,
              b.gr_gl_journal_name,
              b.gr_journal_line_number,
              b.gr_ledger_name,
              b.gr_running_total_dr,
              b.gr_running_total_accounted_dr,
              b.gr_segment1,
              b.gr_segment2,
              b.gr_segment3,
              b.gr_segment4,
              b.gr_segment5,
              b.gr_segment6,
              b.gr_segment7,
              b.gr_segment8,
              b.gr_segment9,
              b.gr_intercompany_legal_entity,
              b.gr_intercompany_transaction_type,
              b.gr_intercompany_batch_number,
              b.gr_intercompany_transaction_number,
              b.gr_gl_batch_id,
              b.gr_le,
              b.gr_journal_accounting_sequence,
              b.gp_acc_date,
              b.gp_entered_currency_code,
              b.gp_functional_currency_code,
              b.gp_exchange_rate,
              b.gp_exchange_rate_type,
              b.gp_exchange_rate_date,
              b.gp_gl_journal_id,
              b.gp_gl_journal_name,
              b.gp_journal_line_number,
              b.gp_ledger_name,
              b.gp_running_total_dr,
              b.gp_running_total_accounted_dr,
              b.gp_segment1,
              b.gp_segment2,
              b.gp_segment3,
              b.gp_segment4,
              b.gp_segment5,
              b.gp_segment6,
              b.gp_segment7,
              b.gp_segment8,
              b.gp_segment9,
              b.gp_legal_entity_name,
              b.gp_intercompany_transaction_type,
              b.gp_intercompany_batch_number,
              b.gp_intercompany_transaction_number,
              b.gp_gl_batch_id,
              b.gp_le,
              b.gp_journal_accounting_sequence,
            to_char(b.gr_gl_acc_date, 'MON-YYYY') );

        IF SQL%rowcount > 0 THEN
            BEGIN
                DELETE FROM wsc_ahcs_lsi_err_t
                WHERE
                    batch_id = p_batch_id;

                UPDATE wsc_ahcs_lsi_control_t
                SET
                    netting_status = 'IN PROGRESS'
                WHERE
                    batch_id = p_batch_id;

                COMMIT;
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;
			IF l_acc_date IS NOT NULL THEN   -- Added this UPDATE statement on 09/08 as per INC2925591
			UPDATE wsc_ahcs_lsi_journal_t a   
            SET
               
                exchange_rate_date = l_acc_date,
                gl_accounting_date = l_acc_date
            WHERE
                    batch_id = p_batch_id
            AND EXISTS (
                    SELECT
                        1
                    FROM
                        wsc_ahcs_lsi_journal_match_t
                    WHERE
                            batch_id = p_batch_id
                        AND a.gl_batch_id = gp_gl_batch_id
                        AND a.gl_journal_id = gp_gl_journal_id
                        AND a.journal_line_number = gp_journal_line_number
                    UNION ALL
                    SELECT
                        1
                    FROM
                        wsc_ahcs_lsi_journal_match_t
                    WHERE
                            batch_id = p_batch_id
                        AND a.gl_batch_id = gr_gl_batch_id
                        AND a.gl_journal_id = gr_gl_journal_id
                        AND a.journal_line_number = gr_journal_line_number
                );
				COMMIT;
			END IF;
			
            UPDATE wsc_ahcs_lsi_control_t
            SET
                to_be_reprocessed = 'Y',
                status = 'MATCHED'
				
            WHERE
                batch_id = p_batch_id;

            COMMIT;
            wsc_lsi_netting_p('GL', p_batch_id);
        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            lv_error_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'ERROR IN REPROCESSING',
                lv_error_msg,
                sysdate,
                'FININT',
                sysdate,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;
            wsc_ahcs_int_error_logging.error_logging(p_batch_id, 'EXT041'
                                                                 || '_'
                                                                 || 'LSI', 'Oracle LSI', 'Error in Journals Matching Process-' || sqlerrm);

    END wsc_ahcs_lsi_reprocess_gl_p;

    PROCEDURE wsc_ahcs_lsi_reprocess_p (
        p_batch_id NUMBER,
        p_acc_date TIMESTAMP
    ) IS

        lv_ap_count        NUMBER;
        lv_ar_count        NUMBER;
        lv_ap_ar_count     NUMBER;
        x_url              VARCHAR2(1000);
        x_user_name        VARCHAR2(100);
        x_password         VARCHAR2(100);
        l_body             VARCHAR2(32767);
        l_clob             VARCHAR2(32767);
        l_acc_date         TIMESTAMP;
        lv_accounting_date TIMESTAMP;
        lv_error_msg       VARCHAR2(200);
        lv_file_name       VARCHAR2(200);
    BEGIN


/*
BEGIN	
 MERGE INTO WSC_AHCS_LSI_AP_T a
 USING (SELECT Record_Type,
			   BU,
			   INVOICE_NUMBER,
			   EXCHANGE_RATE_TYPE,
			   ENTERED_INVOICE_AMOUNT,
			   BANK_ACC,
			   VENDOR_CUST_NAME, 
               VENDOR_CUST_SITE,
			   INVOICE_ID,
			   Invoice_Currency_Code
		FROM WSC_AHCS_LSI_AP_AR_TMP_T) b
ON ( a.invoice_id=b.invoice_id and a.BU=b.BU and a.batch_id=P_BATCH_ID)
WHEN MATCHED THEN
UPDATE SET	EXCHANGE_RATE_TYPE=b.EXCHANGE_RATE_TYPE,
		ENTERED_INVOICE_AMOUNT=b.ENTERED_INVOICE_AMOUNT,
		BANK_ACC=b.BANK_ACC,
		VENDOR_NAME=b.VENDOR_CUST_NAME,
		VENDOR_SITE=b.VENDOR_CUST_SITE,
		PAYMENT_CURRENCY=b.Invoice_Currency_Code;

Commit;

MERGE INTO WSC_AHCS_LSI_AR_T a
 USING (SELECT Record_Type,
			   BU,
			   INVOICE_NUMBER,
			   Account_Number,
			   Lockbox_Number,
			   Lockbox_id,
			   Bank_Origination_Number,
			   Invoice_Currency_Code,
			   ENTERED_INVOICE_AMOUNT,
			   VENDOR_CUST_NAME, 
               VENDOR_CUST_SITE,
			   INVOICE_ID
		FROM WSC_AHCS_LSI_AP_AR_TMP_T) b
ON ( a.invoice_id=b.invoice_id and a.BU=b.BU and a.batch_id=P_BATCH_ID)
WHEN MATCHED THEN
UPDATE SET	Account_Number=b.Account_Number,
		Lockbox_Number=b.Lockbox_Number,
		Lockbox_id=b.Lockbox_id,
		Bank_Origination_Number=b.Bank_Origination_Number,
		Invoice_Currency_Code=b.Invoice_Currency_Code,
		ENTERED_INVOICE_AMOUNT=b.ENTERED_INVOICE_AMOUNT,
		CUST_NAME=b.VENDOR_CUST_NAME,
		CUST_SITE=b.VENDOR_CUST_SITE;

Commit;		
END; */

        SELECT
            file_name
        INTO lv_file_name
        FROM
            wsc_ahcs_lsi_control_t
        WHERE
            batch_id = p_batch_id;

        SELECT
            COUNT(1)
        INTO lv_ap_count
        FROM
            wsc_ahcs_lsi_ap_t
        WHERE
                batch_id = p_batch_id
            AND ( status = 'ERROR'
                  OR status IS NULL );

        SELECT
            COUNT(1)
        INTO lv_ar_count
        FROM
            wsc_ahcs_lsi_ar_t
        WHERE
                batch_id = p_batch_id
            AND ( status = 'ERROR'
                  OR status IS NULL );

        SELECT
            COUNT(1)
        INTO lv_ap_ar_count
        FROM
            wsc_ahcs_lsi_err_t     a,
            wsc_ahcs_lsi_control_t b
        WHERE
                a.batch_id = b.batch_id
            AND b.record_type = 'AP-AR'
            AND a.batch_id = p_batch_id
            AND a.error_code = 'ERR_EXCH_NOT_ENABLED';

        IF p_acc_date IS NOT NULL THEN
--  BEGIN
--    SELECT CASE
--        WHEN trunc(CAST(P_ACC_DATE AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE))<= last_day(to_date(ACC_DATE.TAG,'YYYY/MM/DD'))  THEN
--           trunc(CAST(P_ACC_DATE AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE)) 
--        ELSE 
--            last_day(to_date(ACC_DATE.tag,'YYYY/MM/DD'))
--        END
--        INTO 
--        L_ACC_DATE
--        FROM WSC_AHCS_LSI_LOOKUP_T ACC_DATE 
--        where lookup_type='WSC_LSI_WORKDAY_LOOKUP'
--        AND trunc(CAST(P_ACC_DATE AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE))>=to_date(NVL(ACC_DATE.MEANING,trunc(CAST(P_ACC_DATE AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE))),'DD-MM-YYYY')
--                AND ((trunc(CAST(P_ACC_DATE AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE))<=to_date(ACC_DATE.DESCRIPTION,'DD-MM-YYYY') AND ACC_DATE.ATTRIBUTE1='Yes')
--                      OR (trunc(CAST(P_ACC_DATE AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE))<to_date(ACC_DATE.DESCRIPTION,'DD-MM-YYYY') AND ACC_DATE.ATTRIBUTE1='No'));
--
--
--  END;
            l_acc_date := p_acc_date;
            UPDATE wsc_ahcs_lsi_ap_t
            SET
                payment_date = l_acc_date,
                exchange_rate_date = l_acc_date,
                accounting_date = l_acc_date
            WHERE
                    batch_id = p_batch_id
                AND status = 'ERROR';

            COMMIT;
            UPDATE wsc_ahcs_lsi_ar_t
            SET
                accounting_date = l_acc_date,
                status = NULL
            WHERE
                    batch_id = p_batch_id
                AND status = 'ERROR';

            COMMIT;
            UPDATE wsc_ahcs_lsi_control_t
            SET
                status = 'MATCHED',
                to_be_reprocessed = 'Y',
                accounting_date = l_acc_date
            WHERE
                batch_id = p_batch_id;

            COMMIT;
        ELSE

/*  UPdate WSC_AHCS_LSI_AP_T 	
	SET PAYMENT_DATE=L_ACC_DATE,
	EXCHANGE_RATE_DATE=L_ACC_DATE,
	--ACCOUNTING_DATE=L_ACC_DATE
	WHERE BATCH_ID=P_BATCH_ID
	AND STATUS='ERROR';
	commit; */

            UPDATE wsc_ahcs_lsi_ar_t
            SET
                status = NULL
            WHERE
                    batch_id = p_batch_id
                AND status = 'ERROR';

            COMMIT;
            UPDATE wsc_ahcs_lsi_control_t
            SET
                status = 'MATCHED',
                to_be_reprocessed = 'Y'
	--ACCOUNTING_DATE=L_ACC_DATE
            WHERE
                batch_id = p_batch_id;

            COMMIT;

  /* BEGIN
    SELECT CASE
        WHEN trunc(CAST(LV_ACCOUNTING_DATE AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE))<= last_day(to_date(ACC_DATE.TAG,'YYYY/MM/DD'))  THEN
           trunc(CAST(LV_ACCOUNTING_DATE AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE)) 
        ELSE 
            last_day(to_date(ACC_DATE.tag,'YYYY/MM/DD'))
        END
        INTO 
        L_ACC_DATE
        FROM WSC_AHCS_LSI_LOOKUP_T ACC_DATE 
        where lookup_type='WSC_LSI_WORKDAY_LOOKUP'
        AND trunc(CAST(LV_ACCOUNTING_DATE AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE))>=to_date(NVL(ACC_DATE.MEANING,trunc(CAST(LV_ACCOUNTING_DATE AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE))),'DD-MM-YYYY')
                AND ((trunc(CAST(LV_ACCOUNTING_DATE AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE))<=to_date(ACC_DATE.DESCRIPTION,'DD-MM-YYYY') AND ACC_DATE.ATTRIBUTE1='Yes')
                      OR (trunc(CAST(LV_ACCOUNTING_DATE AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE))<to_date(ACC_DATE.DESCRIPTION,'DD-MM-YYYY') AND ACC_DATE.ATTRIBUTE1='No'));

  END; */

        END IF;

        BEGIN
            SELECT
                user_name,
                ( replace(password, CHR(38), CHR(38)
                                             || 'amp;') ),
                url
            INTO
                x_user_name,
                x_password,
                x_url
            FROM
                xx_imd_details
            WHERE
                ROWNUM = 1;

        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;

        IF lv_ap_count > 0 THEN
            UPDATE wsc_ahcs_lsi_control_t
            SET
                inv_pay_status = 'IN PROGRESS'
            WHERE
                batch_id = p_batch_id;

            COMMIT;
            BEGIN
                l_body := '{ "BATCH_ID":"'
                          || p_batch_id
                          || '","EXTRACT_NAME":"REPROCESS" }';
                dbms_output.put_line(l_body);
                apex_web_service.g_request_headers.DELETE();
                apex_web_service.g_request_headers(1).name := 'Content-Type';
                apex_web_service.g_request_headers(1).value := 'application/json';
                l_clob := apex_web_service.make_rest_request(p_url => x_url || ':443/ic/api/integration/v1/flows/rest/WES_WSC_GBL_LSI_CRE_AP_PAY_DAT_I/1.0/lsi',
                p_http_method => 'POST', p_username => x_user_name, p_password => x_password, p_body => l_body);

                apex_json.parse(l_clob);
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;

        END IF;

        IF lv_ar_count > 0 THEN
            UPDATE wsc_ahcs_lsi_control_t
            SET
                receipt_status = 'IN PROGRESS'
            WHERE
                batch_id = p_batch_id;

            COMMIT;
            BEGIN
                DELETE FROM wsc_lsi_receipt_fbdi_t
                WHERE
                    batch_id = p_batch_id;

                COMMIT;
                DELETE FROM wsc_ahcs_lsi_err_t
                WHERE
                        batch_id = p_batch_id
                    AND error_code = 'NO FBDI CREATED';

                COMMIT;
            END;

            wsc_lsi_pkg.wsc_lsi_receipt_fbdi_p(p_batch_id);
            BEGIN
                l_body := '{ "BATCH_ID":"'
                          || p_batch_id
                          || '","EXTRACT_NAME":"REPROCESS" }';
                dbms_output.put_line(l_body);   
--'{ "RECORD_TYPE" : "AP-AR", "BATCH_ID" : P_BATCH_ID, "FROM_ACC_DATE" : " " , "SOURCE" : "ABC", "P_ACC_DATE" : LV_ACC_DATE }'
                apex_web_service.g_request_headers.DELETE();
                apex_web_service.g_request_headers(1).name := 'Content-Type';
                apex_web_service.g_request_headers(1).value := 'application/json';
                l_clob := apex_web_service.make_rest_request(p_url => x_url || ':443/ic/api/integration/v1/flows/rest/WESC_WSC_GBL_LSI_CREA_AR_RECE_SU/1.0/lsi',
                p_http_method => 'POST', p_username => x_user_name, p_password => x_password, p_body => l_body);

                apex_json.parse(l_clob);
            EXCEPTION
                WHEN OTHERS THEN
                    NULL;
            END;

        END IF;

        IF lv_ap_ar_count > 0 THEN
            UPDATE wsc_ahcs_lsi_control_t
            SET
                netting_status = 'IN PROGRESS'
            WHERE
                batch_id = p_batch_id;

            DELETE FROM wsc_ahcs_lsi_err_t
            WHERE
                    batch_id = p_batch_id
                AND error_code = 'ERR_EXCH_NOT_ENABLED';

            COMMIT;

       -- WSC_LSI_NETTING_P('AP-AR',P_BATCH_ID);

            dbms_scheduler.create_job(job_name => 'lsi_apar_repro'
                                                  || p_batch_id
                                                  || to_char(sysdate, 'ddmmyyhh24miss'), job_type => 'PLSQL_BLOCK', job_action => 'BEGIN
            WSC_LSI_PKG.WSC_LSI_NETTING_P(''AP-AR'','
                                                                                                                                || p_batch_id
                                                                                                                                || ');
       END;', enabled => true, auto_drop => true,
                                     comments => 'Async steps for LSI Reprocess APAR');

        END IF;

    EXCEPTION
        WHEN OTHERS THEN
            lv_error_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'ERROR IN REPROCESSING',
                lv_error_msg,
                sysdate,
                'FININT',
                sysdate,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;
            wsc_ahcs_int_error_logging.error_logging(p_batch_id, 'EXT041'
                                                                 || '_'
                                                                 || 'LSI', 'Oracle LSI', 'Error in Journals Matching Process-' || sqlerrm);

    END;

    PROCEDURE wsc_ahcs_lsi_reprocess_cm_p (
        p_batch_id NUMBER,
        p_acc_date TIMESTAMP
    ) IS

        x_url        VARCHAR2(1000);
        x_user_name  VARCHAR2(100);
        x_password   VARCHAR2(100);
        l_body       VARCHAR2(32767);
        l_clob       VARCHAR2(32767);
        l_acc_date   TIMESTAMP;
        lv_error_msg VARCHAR2(200);
        lv_file_name VARCHAR2(200);
    BEGIN
        SELECT
            file_name
        INTO lv_file_name
        FROM
            wsc_ahcs_lsi_control_t
        WHERE
            batch_id = p_batch_id;

        IF p_acc_date IS NOT NULL THEN
--  BEGIN
--    SELECT CASE
--        WHEN trunc(CAST(P_ACC_DATE AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE))<= last_day(to_date(ACC_DATE.TAG,'YYYY/MM/DD'))  THEN
--           trunc(CAST(P_ACC_DATE AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE)) 
--        ELSE 
--            last_day(to_date(ACC_DATE.tag,'YYYY/MM/DD'))
--        END
--        INTO 
--        L_ACC_DATE
--        FROM WSC_AHCS_LSI_LOOKUP_T ACC_DATE 
--        where lookup_type='WSC_LSI_WORKDAY_LOOKUP'
--        AND trunc(CAST(P_ACC_DATE AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE))>=to_date(NVL(ACC_DATE.MEANING,trunc(CAST(P_ACC_DATE AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE))),'DD-MM-YYYY')
--                AND ((trunc(CAST(P_ACC_DATE AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE))<=to_date(ACC_DATE.DESCRIPTION,'DD-MM-YYYY') AND ACC_DATE.ATTRIBUTE1='Yes')
--                      OR (trunc(CAST(P_ACC_DATE AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE))<to_date(ACC_DATE.DESCRIPTION,'DD-MM-YYYY') AND ACC_DATE.ATTRIBUTE1='No'));
--
--
--  END;
            l_acc_date := p_acc_date;
            UPDATE wsc_ahcs_lsi_invoice_for_cm_h_t
            SET
                accounting_date = to_char(l_acc_date, 'YYYY/MM/DD')
            WHERE
                    batch_id = p_batch_id
                AND inv_creation_status = 'REJECTED';

            COMMIT;
            UPDATE wsc_ahcs_lsi_control_t
            SET
                status = 'MATCHED',
                to_be_reprocessed = 'Y',
                accounting_date = l_acc_date
            WHERE
                batch_id = p_batch_id;

            COMMIT;
        ELSE

 /* SELECT ACCOUNTING_DATE
  INTO L_ACC_DATE
  FROM WSC_AHCS_LSI_CONTROL_T
  WHERE BATCH_ID=P_BATCH_ID; */

 /* UPdate WSC_AHCS_LSI_INVOICE_FOR_CM_H_T 	
	SET ACCOUNTING_DATE=to_char(L_ACC_DATE,'YYYY/MM/DD')
	WHERE BATCH_ID=P_BATCH_ID
	AND INV_CREATION_STATUS='REJECTED';
	commit; */

            UPDATE wsc_ahcs_lsi_control_t
            SET
                status = 'MATCHED',
                to_be_reprocessed = 'Y'
--	ACCOUNTING_DATE=L_ACC_DATE
            WHERE
                batch_id = p_batch_id;

        END IF;

        BEGIN
            SELECT
                user_name,
                ( replace(password, CHR(38), CHR(38)
                                             || 'amp;') ),
                url
            INTO
                x_user_name,
                x_password,
                x_url
            FROM
                xx_imd_details
            WHERE
                ROWNUM = 1;

        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;

        UPDATE wsc_ahcs_lsi_control_t
        SET
            inv_create_status = 'IN PROGRESS'
        WHERE
            batch_id = p_batch_id;

        COMMIT;
        BEGIN
            l_body := '{ "BATCH_ID":"'
                      || p_batch_id
                      || '","EXTRACT_NAME":"REPROCESS" }';
            dbms_output.put_line(l_body);
            apex_web_service.g_request_headers.DELETE();
            apex_web_service.g_request_headers(1).name := 'Content-Type';
            apex_web_service.g_request_headers(1).value := 'application/json';
            l_clob := apex_web_service.make_rest_request(p_url => x_url || ':443/ic/api/integration/v1/flows/rest/WESC_WSC_GBL_LSI_CRED_MEMO_INVO_/1.0/lsi',
            p_http_method => 'POST', p_username => x_user_name, p_password => x_password, p_body => l_body);

            apex_json.parse(l_clob);
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;

    EXCEPTION
        WHEN OTHERS THEN
            lv_error_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                lv_file_name,
                'ERROR IN REPROCESSING',
                lv_error_msg,
                sysdate,
                'FININT',
                sysdate,
                'N',
                'FININT',
                p_batch_id,
                'Y'
            );

            COMMIT;
            wsc_ahcs_int_error_logging.error_logging(p_batch_id, 'EXT041'
                                                                 || '_'
                                                                 || 'LSI', 'Oracle LSI', 'Error in Journals Matching Process-' || sqlerrm);

    END;

    PROCEDURE wsc_ahcs_lsi_kickoff_reprocess (
        p_batch_id  NUMBER,
        lv_acc_date DATE
    ) AS

        x_url       VARCHAR2(1000);
        x_user_name VARCHAR2(100);
        x_password  VARCHAR2(100);
        l_body      VARCHAR2(32767);
        l_clob      VARCHAR2(32767);
    BEGIN
        BEGIN
            SELECT
                user_name,
                ( replace(password, CHR(38), CHR(38)
                                             || 'amp;') ),
                url
            INTO
                x_user_name,
                x_password,
                x_url
            FROM
                xx_imd_details
            WHERE
                ROWNUM = 1;

        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;

        l_body := '{ "RECORD_TYPE" : "AP-AR", "BATCH_ID":"'
                  || p_batch_id
                  || '", "FROM_ACC_DATE" : "null" , "SOURCE" : "ABC", "P_ACC_DATE" :"'
                  || lv_acc_date
                  || '" }';
--	l_body := '{ "BATCH_ID":"'|| P_BATCH_ID ||'","EXTRACT_NAME":"ABC" }';   
        dbms_output.put_line(l_body);
        apex_web_service.g_request_headers.DELETE();
        apex_web_service.g_request_headers(1).name := 'Content-Type';
        apex_web_service.g_request_headers(1).value := 'application/json';
        l_clob := apex_web_service.make_rest_request(p_url => x_url || ':443/ic/api/integration/v1/flows/rest/WESC_WSC_GBL_LSI_AP_AR_REPR/1.0/lsi',
        p_http_method => 'POST', p_username => x_user_name, p_password => x_password, p_body => l_body);

        apex_json.parse(l_clob);
    EXCEPTION
        WHEN OTHERS THEN
            NULL;
    END;
    --Harman
    PROCEDURE wsc_ahcs_lsi_credit_memo_invoices (
        p_acc_date  TIMESTAMP,
        p_file_name VARCHAR2
    ) AS

        CURSOR cm_list (
            p_batch_id NUMBER
        ) IS
        SELECT
            apar_m.*,
            le.legal_entity_id,
            le.legal_entity_name,
            le.ledger_id,
            le.ledger_name,
            lookup.description
        FROM
            wsc_ahcs_lsi_ap_ar_match_t apar_m,
            wsc_gl_legal_entities_t    le,
            wsc_ahcs_lsi_lookup_t      lookup
        WHERE
            apar_m.status IS NULL
            AND apar_m.ap_entered_invoice_amount < 0
            AND le.flex_segment_value = apar_m.ap_intercompany_legal_entity
            AND lookup.lookup_type = 'WSC_LSI_BANK_DETAILS'
            AND lookup.attribute1 = le.flex_segment_value
            AND batch_id = p_batch_id;

        l_acc_date        DATE;
        lv_invoice_id     VARCHAR2(100);
        lv_batch_id       NUMBER;
        lv_match_count    VARCHAR2(100);
        l_file_name       VARCHAR2(100);
        l_extract         VARCHAR2(200);
        lv_cm_run_id      NUMBER;
        lv_match_count1   NUMBER;
        lv_ar_unmatch_cnt NUMBER := 0;
        lv_ap_unmatch_cnt NUMBER := 0;
        lv_error_msg      VARCHAR2(200);
    BEGIN
        -- getting nextval batch_id
        SELECT
            wsc_lsi_apar_batch_p
        INTO lv_batch_id
        FROM
            dual;


        -- Getting LSI RUN DATE
        SELECT
            CASE
                WHEN trunc(CAST(nvl(p_acc_date, systimestamp) AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE)) <= last_day(
                to_date(acc_date.tag, 'YYYY/MM/DD')) THEN
                    trunc(CAST(nvl(p_acc_date, systimestamp) AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE))
                ELSE
                    last_day(to_date(acc_date.tag, 'YYYY/MM/DD'))
            END
        INTO l_acc_date
        FROM
            wsc_ahcs_lsi_lookup_t acc_date
        WHERE
                lookup_type = 'WSC_LSI_WORKDAY_LOOKUP'
            AND trunc(CAST(nvl(p_acc_date, systimestamp) AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE)) >= to_date(nvl(
            acc_date.meaning, trunc(CAST(nvl(p_acc_date, systimestamp) AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE))),
            'DD-MM-YYYY')
            AND ( ( trunc(CAST(nvl(p_acc_date, systimestamp) AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE)) <= to_date(
            acc_date.description, 'DD-MM-YYYY')
                    AND acc_date.attribute1 = 'Yes' )
                  OR ( trunc(CAST(nvl(p_acc_date, systimestamp) AT TIME ZONE 'America/Chicago' AS TIMESTAMP WITH TIME ZONE)) < to_date(
                  acc_date.description, 'DD-MM-YYYY')
                       AND acc_date.attribute1 = 'No' ) );

        -- getting match record from AP_AR table and merging them to AP_AR_MATCH table
        MERGE INTO wsc_ahcs_lsi_ap_ar_match_t a
        USING (
                  SELECT
                      ap.extract_name                  extract_name_ap,
                      ap.invoice_date                  ap_invoice_date,
                      ap.invoice_currency_code         ap_invoice_currency_code,
                      ap.bu                            ap_bu,
                      ap.bu_id                         ap_bu_id,
                      lt.attribute2                    ap_bank_acc,
                      ap.vendor_cust_name              ap_vendor_cust_name,
                      ap.vendor_cust_site              ap_vendor_cust_site,
                      ap.exchange_rate                 ap_exchange_rate,
                      ap.exchange_rate_date            ap_exchange_rate_date,
                      ap.invoice_number                ap_invoice_number,
                      ap.ledger_name                   ap_ledger_name,
                      ap.accounting_class              ap_accounting_class,
                      l_acc_date                       ap_accounting_date,
                      ap.entered_invoice_amount        ap_entered_invoice_amount,
                      ap.accounted_invoice_amount      ap_accounted_invoice_amount,
                      ap.exchange_rate_type            ap_exchange_rate_type,
                      ap.gl_code_combination           ap_gl_code_combination,
                      ap.intercompany_legal_entity     ap_intercompany_legal_entity,
                      ap.intercompany_transaction_type ap_intercompany_transaction_type,
                      ap.intercompany_batch_number     ap_intercompany_batch_number,
                      ap.functional_currency_code      ap_functional_currency_code,
                      ap.netting_ledger                ap_netting_ledger,
                      ap.netting_fun_curr              ap_netting_fun_curr,
                      ap.ic_trx_number                 ap_ic_trx_number,
                      ap.invoice_id                    ap_invoice_id,
                      ar.extract_name                  extract_name_ar,
                      ar.bu                            ar_bu,
                      ar.bu_id                         ar_bu_id,
                      ar.invoice_number                ar_invoice_number,
                      ar.ledger_name                   ar_ledger_name,
                      ar.accounting_class              ar_accounting_class,
                      ar.invoice_date                  ar_invoice_date,
                      l_acc_date                       ar_accounting_date,
                      ar.exchange_rate                 ar_exchange_rate,
                      ar.exchange_rate_type            ar_exchange_rate_type,
                      ar.exchange_rate_date            ar_exchange_rate_date,
                      ar.entered_invoice_amount        ar_entered_invoice_amount,
                      ar.accounted_invoice_amount      ar_accounted_invoice_amount,
                      ar.gl_code_combination           ar_gl_code_combination,
                      ar.intercompany_legal_entity     ar_intercompany_legal_entity,
                      ar.intercompany_transaction_type ar_intercompany_transaction_type,
                      ar.intercompany_batch_number     ar_intercompany_batch_number,
                      ar.vendor_cust_name              ar_vendor_cust_name,
                      ar.vendor_cust_site              ar_vendor_cust_site,
                      ar.account_number                ar_account_number,
                      ar.lockbox_number                ar_lockbox_number,
                      ar.lockbox_id                    ar_lockbox_id,
                      ar.bank_origination_number       ar_bank_origination_number,
                      ar.invoice_currency_code         ar_invoice_currency_code,
                      ar.functional_currency_code      ar_functional_currency_code,
                      ar.ic_trx_number                 ar_ic_trx_number,
                      ar.invoice_id                    ar_invoice_id,
                      ap.accounting_period,
                      lt.description,
                      lt.tag,
                      lt.ledger_name                   pay_method
                  FROM
                      wsc_ahcs_lsi_ap_ar_t  ap,
                      wsc_ahcs_lsi_ap_ar_t  ar,
                      wsc_ahcs_lsi_lookup_t lt
                  WHERE
                          1 = 1 --AP.INVOICE_NUMBER=AR.INVOICE_NUMBER
                      AND ap.record_type = 'AP'
                      AND ar.record_type = 'AR'
                      AND ap.accounting_class = 'LIABILITY'
                      AND ar.accounting_class = 'RECEIVABLE'
                      AND ap.entered_invoice_amount = ar.entered_invoice_amount
                      AND ap.entered_invoice_amount < 0
                      AND ar.status IS NULL
                      AND ap.status IS NULL
                      AND ar.intercompany_batch_number = ap.intercompany_batch_number
                      AND ar.ic_trx_number = ap.ic_trx_number
                      AND ap.check_id IS NULL
                      AND ar.payment_number IS NULL
                      AND substr(ap.gl_code_combination, 1, 4) = substr(ar.gl_code_combination, 29, 4)
                      AND substr(ar.gl_code_combination, 1, 4) = substr(ap.gl_code_combination, 29, 4)
                      AND NOT EXISTS (
                          SELECT
                              1
                          FROM
                              wsc_ahcs_lsi_ap_t
                          WHERE
                                  1 = 1 --INVOICE_NUMBER=AP.INVOICE_NUMBER
                              AND ic_trx_number = ap.ic_trx_number
                              AND bu = ap.bu
                              AND intercompany_batch_number = ap.intercompany_batch_number
                      )
                      AND NOT EXISTS (
                          SELECT
                              1
                          FROM
                              wsc_ahcs_lsi_ar_t
                          WHERE
                                  1 = 1 --INVOICE_NUMBER=AR.INVOICE_NUMBER
                              AND ic_trx_number = ar.ic_trx_number
                              AND bu = ar.bu
                              AND intercompany_batch_number = ar.intercompany_batch_number
                      )
                      AND lt.lookup_type = 'WSC_LSI_BANK_DETAILS'
                      AND lt.attribute1 = ap.intercompany_legal_entity
              )
        b ON ( a.ar_intercompany_batch_number = b.ar_intercompany_batch_number
               AND a.ap_intercompany_batch_number = b.ap_intercompany_batch_number
               AND a.ap_bu = b.ap_bu
               AND a.ar_bu = b.ar_bu
               AND substr(a.ap_gl_code_combination, 1, 4) = substr(b.ar_gl_code_combination, 29, 4)
               AND a.ar_ic_trx_number = b.ar_ic_trx_number
               AND a.ap_ic_trx_number = b.ap_ic_trx_number )
        WHEN NOT MATCHED THEN
        INSERT (
            batch_id,
            extract_name_ap,
            extract_name_ar,
            ap_payment_date,
            ap_payment_type,
            ap_payment_desc,
            ap_payment_currency,
            ap_bu,
            ap_bu_id,
            ap_vendor_name,
            ap_vendor_site,
            ap_bank_acc,
            ap_payment_method,
            ap_payment_process_profile,
            ap_payment_document,
            ap_exchange_rate,
            ap_exchange_rate_type,
            ap_exchange_rate_date,
            ap_invoice_number,
            ap_ledger_name,
            ap_accounting_class,
            ap_invoice_date,
            ap_accounting_date,
            ap_entered_invoice_amount,
            ap_accounted_invoice_amount,
            ap_gl_code_combination,
            ap_intercompany_legal_entity,
            ap_intercompany_transaction_type,
            ap_intercompany_batch_number,
            ap_discount_taken,
            ap_installment_number,
            ap_functional_currency_code,
            ap_netting_ledger,
            ap_netting_fun_curr,
            ap_ic_trx_number,
            ap_invoice_id,
            ar_bu,
            ar_bu_id,
            ar_invoice_number,
            ar_ledger_name,
            ar_accounting_class,
            ar_invoice_date,
            ar_accounting_date,
            ar_exchange_rate,
            ar_exchange_rate_type,
            ar_exchange_rate_date,
            ar_entered_invoice_amount,
            ar_accounted_invoice_amount,
            ar_gl_code_combination,
            ar_intercompany_legal_entity,
            ar_intercompany_transaction_type,
            ar_intercompany_batch_number,
            ar_cust_name,
            ar_cust_site,
            ar_account_number,
            ar_lockbox_number,
            ar_lockbox_id,
            ar_bank_origination_number,
            ar_invoice_currency_code,
            ar_functional_currency_code,
            ar_ic_trx_number,
            ar_invoice_id,
            accounting_period )
        VALUES
            ( lv_batch_id,
              b.extract_name_ap,
              b.extract_name_ar,
              b.ap_invoice_date,
            'Manual',
            'Manual_Payment',
              b.ap_invoice_currency_code,
              b.ap_bu,
              b.ap_bu_id,
              b.ap_vendor_cust_name,
              b.ap_vendor_cust_site,
              b.ap_bank_acc,
              b.description, --'LSI',
              b.tag, --'WSC Payment Process',
              b.pay_method, --'IC CHECK'
              b.ap_exchange_rate,
              b.ap_exchange_rate_type,
              b.ap_exchange_rate_date,
              b.ap_invoice_number,
              b.ap_ledger_name,
              b.ap_accounting_class,
              b.ap_invoice_date,
              b.ap_accounting_date,
              b.ap_entered_invoice_amount,
              b.ap_accounted_invoice_amount,
              b.ap_gl_code_combination,
              b.ap_intercompany_legal_entity,
              b.ap_intercompany_transaction_type,
              b.ap_intercompany_batch_number,
            0,
            1,
              b.ap_functional_currency_code,
              b.ap_netting_ledger,
              b.ap_netting_fun_curr,
              b.ap_ic_trx_number,
              b.ap_invoice_id,
              b.ar_bu,
              b.ar_bu_id,
              b.ar_invoice_number,
              b.ar_ledger_name,
              b.ar_accounting_class,
              b.ar_invoice_date,
              b.ar_accounting_date,
              b.ar_exchange_rate,
              b.ar_exchange_rate_type,
              b.ar_exchange_rate_date,
              b.ar_entered_invoice_amount,
              b.ar_accounted_invoice_amount,
              b.ar_gl_code_combination,
              b.ar_intercompany_legal_entity,
              b.ar_intercompany_transaction_type,
              b.ar_intercompany_batch_number,
              b.ar_vendor_cust_name,
              b.ar_vendor_cust_site,
              b.ar_account_number,
              b.ar_lockbox_number,
              b.ar_lockbox_id,
              b.ar_bank_origination_number,
              b.ar_invoice_currency_code,
              b.ar_functional_currency_code,
              b.ar_ic_trx_number,
              b.ar_invoice_id,
              b.accounting_period );

        --updating LSI control table & AP_AR_MATCH with required info
        dbms_output.put_line('Matched inserted' || SQL%rowcount);
        lv_match_count1 := SQL%rowcount;
        IF SQL%rowcount > 0 THEN
            l_file_name := 'ORACLELSI_CM_' || to_char(sysdate, 'DDMMYYYYHH24MISS');
            UPDATE wsc_ahcs_lsi_ap_ar_t a
            SET
                file_name = l_file_name,
                batch_id = lv_batch_id,
                status = 'MATCHED',
                accounting_date = l_acc_date
            WHERE
                EXISTS (
                    SELECT
                        1
                    FROM
                        wsc_ahcs_lsi_ap_ar_match_t
                    WHERE
                            ap_intercompany_batch_number = a.intercompany_batch_number
                        AND ( ap_ic_trx_number = a.ic_trx_number
                              OR ar_ic_trx_number = a.ic_trx_number )
                        AND batch_id = lv_batch_id
                )
                AND batch_id IS NULL;

            COMMIT;
            lv_cm_run_id := wsc_lsi_ahcs_credit_memo_inv_run_s.nextval;
          -- LV_MATCH_COUNT := SQL%ROWCOUNT;

            BEGIN
                SELECT
                    LISTAGG(f_name, ',') WITHIN GROUP(
                    ORDER BY
                        f_name
                    )
                INTO l_extract
                FROM
                    (
                        SELECT UNIQUE
                            ( extract_name_ap ) f_name
                        FROM
                            wsc_ahcs_lsi_ap_ar_match_t
                        WHERE
                            batch_id = lv_batch_id
                        UNION
                        SELECT UNIQUE
                            ( extract_name_ar ) f_name
                        FROM
                            wsc_ahcs_lsi_ap_ar_match_t
                        WHERE
                            batch_id = lv_batch_id
                    );

            EXCEPTION
                WHEN OTHERS THEN
                    l_extract := NULL;
            END;

            BEGIN
                SELECT
                    COUNT(1)
                INTO lv_ar_unmatch_cnt
                FROM
                    wsc_ahcs_lsi_ap_ar_t
                WHERE
                        record_type = 'AR'
                    AND status IS NULL;

                SELECT
                    COUNT(1)
                INTO lv_ap_unmatch_cnt
                FROM
                    wsc_ahcs_lsi_ap_ar_t
                WHERE
                        record_type = 'AP'
                    AND status IS NULL;

            EXCEPTION
                WHEN OTHERS THEN
                    lv_ar_unmatch_cnt := 0;
                    lv_ap_unmatch_cnt := 0;
            END;

            UPDATE wsc_ahcs_lsi_control_t
            SET
                batch_id = lv_batch_id,
                status = 'MATCHED',
              --TO_BE_PROCESSED='Y',
                last_updated_date = sysdate,
                all_extracts = l_extract,
                file_name = l_file_name,
                accounting_date = l_acc_date,
                ar_unmatch_count = lv_ar_unmatch_cnt,
                ap_unmatch_count = lv_ap_unmatch_cnt,
                matched_count = lv_match_count1
                                || '/'
                                || lv_match_count1
            WHERE
                extract_name = p_file_name;

            COMMIT;
            UPDATE wsc_ahcs_lsi_ap_ar_t a
            SET
                extract_name = (
                    SELECT
                        extract_name
                    FROM
                        wsc_ahcs_lsi_control_t
                    WHERE
                            batch_id = a.batch_id
                        AND batch_id = lv_batch_id
                )
            WHERE
                batch_id = lv_batch_id;

            COMMIT;
            INSERT INTO wsc_ahcs_int_control_t (
                batch_id,
                source_application,
                target_application,
                file_name,
                status,
                source_system,
                target_system,
                created_by,
                created_date,
                last_updated_by,
                last_updated_date
            ) VALUES (
                lv_batch_id,
                'Oracle LSI',
                'Oracle AHCS',
                l_file_name,
                'TRANSFORM SUCCESS',
                'Oracle LSI',
                'Oracle ERP Cloud',
                'FININT',
                sysdate,
                'FININT',
                sysdate
            );

            COMMIT;
            UPDATE wsc_ahcs_lsi_ap_ar_match_t
            SET
                file_name = l_file_name
            WHERE
                batch_id = lv_batch_id;

            COMMIT; 

        --performing for each logic on Credit memo data
            FOR i IN cm_list(lv_batch_id) LOOP
        --CREATING INVOICE NUMBER
                SELECT
                    lv_cm_run_id || to_char(systimestamp, 'hh24missff')
                INTO lv_invoice_id
                FROM
                    dual;



        --- Inserting into wsc_ahcs_lsi_ap_ar_t (inversing Enteered amount, LSI run date into acc_date and invoice_num = invoice_num||LSI
                INSERT INTO wsc_ahcs_lsi_ap_ar_t (
                    record_type,
                    bu,
                    invoice_number,
                    ledger_name,
                    accounting_class,
                    invoice_date,
                    accounting_date,
                    exchange_rate,
                    exchange_rate_type,
                    exchange_rate_date,
                    entered_invoice_amount,
                    accounted_invoice_amount,
                    gl_code_combination,
                    intercompany_legal_entity,
                    intercompany_transaction_type,
                    intercompany_batch_number,
                    vendor_cust_name,
                    vendor_cust_site,
                    account_number,
                    lockbox_number,
                    bank_origination_number,
                    invoice_currency_code,
                    functional_currency_code,
                    check_id,
                    payment_number,
                    bank_acc,
                    batch_id,
                    netting_ledger,
                    netting_fun_curr,
                    ic_trx_number,
                    invoice_id,
                    bu_id,
                    lockbox_id,
                    file_name,
                    accounting_period,
                    extract_name,
                    invoice_status,
                    invoice_status_desc,
                    status
                ) VALUES (
                    'AP',
                    i.ap_bu,
                    i.ap_invoice_number || 'LSI',
                    i.ap_ledger_name,
                    i.ap_accounting_class,
                    i.ap_invoice_date,
                    l_acc_date,
                    i.ap_exchange_rate,
                    i.ap_exchange_rate_type,
                    i.ap_exchange_rate_date,
                    - 1 * i.ap_entered_invoice_amount,
                    - 1 * i.ap_accounted_invoice_amount,
                    i.ap_gl_code_combination,
                    i.ap_intercompany_legal_entity,
                    i.ap_intercompany_transaction_type,
                    i.ap_intercompany_batch_number,
                    i.ap_vendor_name,
                    i.ap_vendor_site,
                    i.ar_account_number,
                    i.ar_lockbox_number,
                    i.ar_bank_origination_number,
                    i.ar_invoice_currency_code,
                    i.ap_functional_currency_code,
                    NULL,
                    i.ap_payment_num,
                    i.ap_bank_acc,
                    i.batch_id,
                    i.ap_netting_ledger,
                    i.ap_netting_fun_curr,
                    i.ap_ic_trx_number,
                    lv_invoice_id, --/**bug fix INC2679428**/                i.AP_INVOICE_ID,
                    i.ap_bu_id,
                    i.ar_lockbox_id,
                    i.file_name,
                    i.accounting_period,
                    i.extract_name_ap,
                    'NEW',
                    'Invoice for Credit Memo',
                    'MATCHED'
                );

                COMMIT;

            --INSERTING INTO FBDI TABLES OF INVOICES FOR CREADIT MEMO
                INSERT INTO wsc_ahcs_lsi_invoice_for_cm_h_t (
                    invoice_id,
                    business_unit,
                    source,
                    invoice_num,
                    invoice_amount,
                    invoice_date,
                    sup_name,
                    sup_site,
                    invoice_currencya,
                    payment_currency,
                    description,
                    invoice_type,
                    legal_entity,
                    payment_terms,
                    terms_date,
                    accounting_date,
                    payment_method,
                    conv_rate_type,
                    conv_date,
                    liability_combination,
                    batch_id,
                    legal_entity_id,
                    ledger_id,
                    ledger_name,
                    bu_id,
                    intercompany_batch_number,
                    ic_trx_number
                ) VALUES (
                    lv_invoice_id,
                    i.ap_bu,
                    'LSI',
                    i.ap_invoice_number || 'LSI',
                    - 1 * i.ap_entered_invoice_amount,
                    to_char(i.ap_invoice_date, 'yyyy/mm/dd'),
                    i.ap_vendor_name,
                    i.ap_vendor_site,
                    i.ap_payment_currency,
                    i.ap_payment_currency,
                    i.ap_intercompany_batch_number
                    || ','
                    || i.ap_ic_trx_number, --'LSI INV CC MEMO : '||i.AP_INVOICE_NUMBER,
                    'STANDARD',
                    i.legal_entity_name,
                    'Net 30',
                    to_char(i.ap_invoice_date, 'yyyy/mm/dd'),
                    to_char(l_acc_date, 'yyyy/mm/dd'),
                    replace(i.description, ' ', '_'),
                    i.ap_exchange_rate_type,
                    to_char(i.ap_exchange_rate_date, 'yyyy/mm/dd'),
                    i.ap_gl_code_combination,
                    i.batch_id,
                    i.legal_entity_id,
                    i.ledger_id,
                    i.ledger_name,
                    i.ap_bu_id,
                    i.ap_intercompany_batch_number,
                    i.ap_ic_trx_number
                );

                INSERT INTO wsc_ahcs_lsi_invoice_for_cm_l_t (
                    invoice_id,
                    line_num,
                    line_type,
                    amount,
                    distribution_combination,
                    accounting_date,
                    batch_id
                ) VALUES (
                    lv_invoice_id,
                    '1',
                    'ITEM',
                    i.ap_entered_invoice_amount * - 1,
                    regexp_substr(i.ap_gl_code_combination, '[^.]+', 1, 1)
                    || '.4120.111384.0000.00000.0000.0000.0000.0000',
                    to_char(l_acc_date, 'yyyy/mm/dd'),
                    i.batch_id
                );

                COMMIT;
            END LOOP;

        ELSE
            UPDATE wsc_ahcs_lsi_control_t
            SET
                status = 'NOT MATCHED'
            WHERE
                extract_name = p_file_name;

            COMMIT;
        END IF;

        DELETE FROM wsc_ahcs_lsi_ap_ar_match_t
        WHERE
            batch_id = lv_batch_id;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            UPDATE wsc_ahcs_lsi_control_t
            SET
                status = 'NOT MATCHED',
                to_be_processed = 'N',
                last_updated_date = sysdate
            WHERE
                extract_name = p_file_name;

            COMMIT;
            lv_error_msg := substr(sqlerrm, 1, 200);
            INSERT INTO wsc_ahcs_lsi_err_t (
                file_name,
                error_code,
                error_msg,
                created_date,
                last_updated_by,
                last_updated_date,
                error_file_sent_flag,
                created_by,
                batch_id,
                to_be_processed
            ) VALUES (
                p_file_name,
                'AR Records not merged in WSC_AHCS_LSI_AR_T',
                lv_error_msg
                || ':- AR Records not populated for batch id'
                || lv_batch_id,
                sysdate,
                'FININT',
                sysdate,
                'N',
                'FININT',
                lv_batch_id,
                'Y'
            );

            COMMIT;
    END;

    PROCEDURE wsc_ahcs_lsi_process_after_invoice_callback (
        p_req_id    NUMBER,
        p_submit_id NUMBER
    ) AS

        CURSOR success_status_records (
            p_submit_id NUMBER
        ) IS
        SELECT
            *
        FROM
            wsc_lsi_credit_memo_invoice_t
        WHERE
                load_request_id = p_submit_id
            AND status = 'PROCESSED';
--MANISH
        CURSOR credit_memo_pay (
            p_batch_id NUMBER
        ) IS
        SELECT
            wsc_ap_payment_lsi_seq.NEXTVAL paynum,
            payment_currency,
            bu,
            bank_acc,
            vendor_name,
            vendor_site,
            exchange_rate_type,
            batch_id
        FROM
            (
                SELECT
                    ap.payment_currency,
                    ap.bu,
                    ap.bank_acc,
                    ap.vendor_name,
                    ap.vendor_site,
                    ap.exchange_rate_type,
                    ap.batch_id
                FROM
                    wsc_ahcs_lsi_ap_t ap
                WHERE
                    ( ap.status IS NULL
                      OR ap.status = 'ERROR' )
                    AND batch_id = p_batch_id
                    AND NOT EXISTS (
                        SELECT
                            1
                        FROM
                            wsc_ahcs_lsi_ap_t
                        WHERE
                                intercompany_batch_number = ap.intercompany_batch_number
                            AND ic_trx_number = ap.ic_trx_number
                            AND payment_num IS NOT NULL
                    )
                GROUP BY
                    ap.payment_currency,
                    ap.bu,
                    ap.bank_acc,
                    ap.vendor_name,
                    ap.vendor_site,
                    ap.exchange_rate_type,
                    ap.batch_id
            );

        lv_batch_id      NUMBER;
        l_acc_date       DATE;
        lv_count_new_inv NUMBER;
        lv_count_pro_inv NUMBER;
        lv_count_all_inv NUMBER;
        lv_error_msg     VARCHAR2(250);
    BEGIN
        SELECT DISTINCT
            ( batch_id )
        INTO lv_batch_id
        FROM
            wsc_ahcs_lsi_ap_ar_t
        WHERE
            invoice_fbdi_submit_id = p_submit_id;

        SELECT
            accounting_date
        INTO l_acc_date
        FROM
            wsc_ahcs_lsi_control_t
        WHERE
            batch_id = lv_batch_id;

        FOR i IN success_status_records(p_submit_id) LOOP
            dbms_output.put_line(i.invoice_num);
            --inserting 2 records in ap_t (original & inverse) 
            INSERT INTO wsc_ahcs_lsi_ap_t (
                bu,
                vendor_name,
                vendor_site,
                bank_acc,
                exchange_rate,
                exchange_rate_type,
                exchange_rate_date,
                invoice_number,
                ledger_name,
                accounting_class,
                invoice_date,
                accounting_date,
                entered_invoice_amount,
                accounted_invoice_amount,
                gl_code_combination,
                intercompany_legal_entity,
                intercompany_transaction_type,
                intercompany_batch_number,
                functional_currency_code,
                netting_ledger,
                netting_fun_curr,
                ic_trx_number,
                invoice_id,
                check_id,
                batch_id,
                status,
                file_name,
                accounting_period,
                to_be_processed,
                payment_type,
                payment_currency,
                payment_date,
                payment_desc,
                payment_method,
                payment_process_profile,
                payment_document,
                discount_taken,
                installment_number
            )
                SELECT
                    bu,
                    vendor_cust_name,
                    vendor_cust_site,
                    bank_acc,
                    exchange_rate,
                    /**** User Story DP-RTR-IC-159 Start ****/
                    nvl2(exchange_rate_type, 'Actual Rate', exchange_rate_type),
                    /**** User Story DP-RTR-IC-159 End *****/
                    exchange_rate_date,
                    replace(invoice_number, 'LSI'),
                    a.ledger_name,
                    accounting_class,
                    invoice_date,
                    accounting_date,
                    - 1 * entered_invoice_amount,
                    - 1 * accounted_invoice_amount,
                    gl_code_combination,
                    intercompany_legal_entity,
                    intercompany_transaction_type,
                    intercompany_batch_number,
                    functional_currency_code,
                    netting_ledger,
                    netting_fun_curr,
                    ic_trx_number,
                    i.invoice_id,
                    check_id,
                    lv_batch_id,
                    NULL,
                    file_name,
                    accounting_period,
                    'Y',
                    'Manual',
                    invoice_currency_code,
                    l_acc_date,
                    'BU :'
                    || bu
                    || ', PAAS Batch_ID :'
                    || lv_batch_id,
                    lookup.description,
                    lookup.tag,
                    lookup.ledger_name, --Read as Payment Method 
                    0,
                    1
                FROM
                    wsc_ahcs_lsi_ap_ar_t  a,
                    wsc_ahcs_lsi_lookup_t lookup
                WHERE
                        invoice_number = i.invoice_num
                    AND vendor_cust_name = i.vendor_name
                    AND vendor_cust_site = i.vendor_site_code
                    AND invoice_fbdi_submit_id = p_submit_id
                    AND record_type = 'AP'
                    AND batch_id = lv_batch_id
                    AND lookup.lookup_type = 'WSC_LSI_BANK_DETAILS'
                    AND lookup.attribute1 = intercompany_legal_entity;

            dbms_output.put_line('INSERTING 2ND LINE');
            INSERT INTO wsc_ahcs_lsi_ap_t (
                bu,
                vendor_name,
                vendor_site,
                bank_acc,
                exchange_rate,
                exchange_rate_type,
                exchange_rate_date,
                invoice_number,
                ledger_name,
                accounting_class,
                invoice_date,
                accounting_date,
                entered_invoice_amount,
                accounted_invoice_amount,
                gl_code_combination,
                intercompany_legal_entity,
                intercompany_transaction_type,
                intercompany_batch_number,
                functional_currency_code,
                netting_ledger,
                netting_fun_curr,
                ic_trx_number,
                invoice_id,
                check_id,
                batch_id,
                status,
                file_name,
                accounting_period,
                to_be_processed,
                payment_type,
                payment_currency,
                payment_date,
                payment_desc,
                payment_method,
                payment_process_profile,
                payment_document,
                discount_taken,
                installment_number
            )
                SELECT
                    bu,
                    vendor_cust_name,
                    vendor_cust_site,
                    bank_acc,
                    exchange_rate,
                    /**** User Story DP-RTR-IC-159 Start ****/
                    nvl2(exchange_rate_type, 'Actual Rate', exchange_rate_type),
                    /**** User Story DP-RTR-IC-159 End *****/
                    exchange_rate_date,
                    invoice_number,
                    a.ledger_name,
                    accounting_class,
                    invoice_date,
                    accounting_date,
                    entered_invoice_amount,
                    accounted_invoice_amount,
                    gl_code_combination,
                    intercompany_legal_entity,
                    intercompany_transaction_type,
                    intercompany_batch_number,
                    functional_currency_code,
                    netting_ledger,
                    netting_fun_curr,
                    ic_trx_number,
                    i.invoice_id,
                    check_id,
                    batch_id,
                    NULL,
                    file_name,
                    accounting_period,
                    'Y',
                    'Manual',
                    invoice_currency_code,
                    l_acc_date,
                    'BU :'
                    || bu
                    || ', PAAS Batch_ID :'
                    || lv_batch_id,
                    lookup.description,
                    lookup.tag,
                    lookup.ledger_name,
                    0,
                    1
                FROM
                    wsc_ahcs_lsi_ap_ar_t  a,
                    wsc_ahcs_lsi_lookup_t lookup
                WHERE
                        invoice_number = i.invoice_num
                    AND vendor_cust_name = i.vendor_name
                    AND vendor_cust_site = i.vendor_site_code
                    AND invoice_fbdi_submit_id = p_submit_id
                    AND record_type = 'AP'
                    AND batch_id = lv_batch_id
                    AND lookup.lookup_type = 'WSC_LSI_BANK_DETAILS'
                    AND lookup.attribute1 = intercompany_legal_entity;

            COMMIT;
            dbms_output.put_line('UPDATING STATUS');
				-- updating status as success in ap_ar_t for the records as success
            UPDATE wsc_ahcs_lsi_ap_ar_t
            SET
                invoice_status = 'PROCESSED',
                invoice_status_desc = 'PROCESSED'
            WHERE
                    invoice_number = i.invoice_num
                AND vendor_cust_name = i.vendor_name
                AND vendor_cust_site = i.vendor_site_code
                AND bu = i.operating_unit
                AND invoice_fbdi_submit_id = p_submit_id
                AND record_type = 'AP'
                AND batch_id = lv_batch_id;

            COMMIT;
            dbms_output.put_line('UPDATED STATUS');
        END LOOP;

        BEGIN
            DELETE FROM wsc_lsi_credit_memo_invoice_t
            WHERE
                load_request_id = p_submit_id;

            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                NULL;
        END;
		--update status as failed for all other with same FBDI_PROCESS_ID 
        UPDATE wsc_ahcs_lsi_ap_ar_t
        SET
            invoice_status = 'REJECTED',
            invoice_status_desc = 'REJECTED'
        WHERE
                invoice_status = 'NEW'
            AND invoice_fbdi_submit_id = p_submit_id
            AND record_type = 'AP'
            AND batch_id = lv_batch_id;

        COMMIT;
        MERGE INTO wsc_ahcs_lsi_invoice_for_cm_h_t h
        USING (
                  SELECT
                      invoice_status,
                      invoice_number,
                      vendor_cust_name,
                      vendor_cust_site,
                      bu,
                      batch_id
                  FROM
                      wsc_ahcs_lsi_ap_ar_t
                  WHERE
                      invoice_status IN ( 'REJECTED', 'PROCESSED' )
                      AND invoice_fbdi_submit_id = p_submit_id
                      AND batch_id = lv_batch_id
                      AND record_type = 'AP'
              )
        a ON ( a.invoice_number = h.invoice_num
               AND a.vendor_cust_name = h.sup_name
               AND a.vendor_cust_site = h.sup_site
               AND a.bu = h.business_unit
               AND a.batch_id = h.batch_id )
        WHEN MATCHED THEN UPDATE
        SET inv_creation_status = a.invoice_status;

        COMMIT;   

		-- update payment_num in ap_t on group by
        FOR r_credit_memo_pay IN credit_memo_pay(lv_batch_id) LOOP
            UPDATE wsc_ahcs_lsi_ap_t a
            SET
                payment_num = r_credit_memo_pay.paynum
            WHERE
                    a.payment_currency = r_credit_memo_pay.payment_currency
                AND a.bu = r_credit_memo_pay.bu
                AND a.bank_acc = r_credit_memo_pay.bank_acc
                AND a.vendor_name = r_credit_memo_pay.vendor_name
                AND a.vendor_site = r_credit_memo_pay.vendor_site
                AND nvl(a.exchange_rate_type, 1) = nvl(r_credit_memo_pay.exchange_rate_type, 1)
                AND ( a.status IS NULL
                      OR a.status = 'ERROR' )
                AND a.batch_id = r_credit_memo_pay.batch_id
                AND a.batch_id = lv_batch_id;

        END LOOP;

        COMMIT;

		--merge ar_t // confirm with manish
        MERGE INTO wsc_ahcs_lsi_ap_ar_t a
        USING (
                  SELECT
                      payment_num,
                      invoice_number,
                      bu,
                      file_name,
                      vendor_name,
                      vendor_site,
                      accounting_period,
                      intercompany_batch_number,
                      ic_trx_number
                  FROM
                      wsc_ahcs_lsi_ap_t
                  WHERE
                      ( status IS NULL
                        OR status = 'ERROR' )
                      AND batch_id = lv_batch_id
              )
        b ON ( a.invoice_number = b.invoice_number
               AND a.bu = b.bu
               AND a.vendor_cust_name = b.vendor_name
               AND a.vendor_cust_site = b.vendor_site
               AND a.record_type = 'AP'
               AND a.intercompany_batch_number = b.intercompany_batch_number
               AND a.ic_trx_number = b.ic_trx_number )
        WHEN MATCHED THEN UPDATE
        SET a.payment_number = b.payment_num,
            a.accounting_period = b.accounting_period,
            a.file_name = b.file_name;

        BEGIN
            MERGE INTO wsc_ahcs_lsi_ar_t a
            USING (
                      SELECT
                          ar.bu,
                          ar.file_name,
                          ar.bu_id,
                          replace(ar.invoice_number, 'LSI') invoice_number,
                          ar.ledger_name,
                          ar.accounting_class,
                          ar.invoice_date,
                          l_acc_date                        accounting_date,  ----L_ACC_DATE 
                          ar.exchange_rate,
                          ar.exchange_rate_type,
                          ar.exchange_rate_date,
                          ar.entered_invoice_amount,
                          ar.accounted_invoice_amount,
                          ar.gl_code_combination,
                          ar.intercompany_legal_entity,
                          ar.intercompany_transaction_type,
                          ar.intercompany_batch_number,
                          ar.vendor_cust_name,
                          ar.vendor_cust_site,
                          ar.account_number,
                          ar.lockbox_number,
                          ar.lockbox_id,
                          ar.bank_origination_number,
                          ar.invoice_currency_code,
                          ar.functional_currency_code,
                          ar.ic_trx_number,
                          ar.invoice_id,
                          ar.payment_number,
                          to_char(l_acc_date, 'MON-YYYY')   accounting_period
                      FROM
                          wsc_ahcs_lsi_ap_ar_t ar
                      WHERE
                              1 = 1
                          AND batch_id = lv_batch_id
                          AND ar.status = 'MATCHED'
                          AND ar.record_type = 'AR'
                          AND EXISTS (
                              SELECT
                                  1
                              FROM
                                  wsc_ahcs_lsi_ap_ar_t
                              WHERE
                                      intercompany_batch_number = ar.intercompany_batch_number
                                  AND ic_trx_number = ar.ic_trx_number
                                  AND invoice_number LIKE '%LSI'
                                  AND invoice_status IN ( 'PROCESSED' )
                          )
                          AND NOT EXISTS (
                              SELECT
                                  1
                              FROM
                                  wsc_ahcs_lsi_ar_t
                              WHERE
                                      intercompany_batch_number = ar.intercompany_batch_number
                                  AND ic_trx_number = ar.ic_trx_number
                          )
                          AND EXISTS (
                              SELECT
                                  1
                              FROM
                                  wsc_ahcs_lsi_ap_t
                              WHERE
                                      intercompany_batch_number = ar.intercompany_batch_number
                                  AND ic_trx_number = ar.ic_trx_number
                          )
                  )
            b ON ( a.intercompany_batch_number = b.intercompany_batch_number
                   AND a.ic_trx_number = b.ic_trx_number
                   AND a.bu = b.bu
                   AND a.cust_name = b.vendor_cust_name
                   AND a.cust_site = b.vendor_cust_site )
            WHEN NOT MATCHED THEN
            INSERT (
                batch_id,
                file_name,
                bu,
                bu_id,
                invoice_number,
                ledger_name,
                accounting_class,
                invoice_date,
                accounting_date,
                exchange_rate,
                exchange_rate_type,
                exchange_rate_date,
                entered_invoice_amount,
                accounted_invoice_amount,
                gl_code_combination,
                intercompany_legal_entity,
                intercompany_transaction_type,
                intercompany_batch_number,
                cust_name,
                cust_site,
                account_number,
                lockbox_number,
                lockbox_id,
                bank_origination_number,
                invoice_currency_code,
                functional_currency_code,
                ic_trx_number,
                invoice_id,
                ap_payment_num,
                accounting_period,
                to_be_reprocessed )
            VALUES
                ( lv_batch_id,
                  b.file_name,
                  b.bu,
                  b.bu_id,
                  b.invoice_number,
                  b.ledger_name,
                  b.accounting_class,
                  b.invoice_date,
                  l_acc_date,
                  b.exchange_rate,
                  b.exchange_rate_type,
                  b.exchange_rate_date,
                  b.entered_invoice_amount,
                  b.accounted_invoice_amount,
                  b.gl_code_combination,
                  b.intercompany_legal_entity,
                  b.intercompany_transaction_type,
                  b.intercompany_batch_number,
                  b.vendor_cust_name,
                  b.vendor_cust_site,
                  b.account_number,
                  b.lockbox_number,
                  b.lockbox_id,
                  b.bank_origination_number,
                  b.invoice_currency_code,
                  b.functional_currency_code,
                  b.ic_trx_number,
                  b.invoice_id,
                  b.payment_number,
                  b.accounting_period,
                'N' );

            COMMIT;

					/*		   MERGE INTO WSC_AHCS_LSI_AR_T  a
						 USING ( SELECT  AR.BU,
							AR.FILE_NAME,
														   AR.BU_ID,
							AR.INVOICE_NUMBER, 
							AR.LEDGER_NAME, 
							AR.ACCOUNTING_CLASS, 
							AR.INVOICE_DATE, 
							L_ACC_DATE ACCOUNTING_DATE,  ----L_ACC_DATE 
							AR.EXCHANGE_RATE, 
							AR.EXCHANGE_RATE_TYPE, 
							AR.EXCHANGE_RATE_DATE, 
							AR.ENTERED_INVOICE_AMOUNT, 
							AR.ACCOUNTED_INVOICE_AMOUNT, 
							AR.GL_CODE_COMBINATION, 
							AR.INTERCOMPANY_LEGAL_ENTITY, 
							AR.INTERCOMPANY_TRANSACTION_TYPE, 
							AR.INTERCOMPANY_BATCH_NUMBER, 
							AR.VENDOR_CUST_NAME, 
							AR.VENDOR_CUST_SITE, 
							AR.ACCOUNT_NUMBER, 
							AR.LOCKBOX_NUMBER,
																	  AR.LOCKBOX_ID,     
							AR.BANK_ORIGINATION_NUMBER, 
							AR.INVOICE_CURRENCY_CODE, 
							AR.FUNCTIONAL_CURRENCY_CODE,
																	  AR.IC_TRX_NUMBER,
																	  AR.INVOICE_ID,
							to_char(L_ACC_DATE,'MON-YYYY') ACCOUNTING_PERIOD
							FROM WSC_AHCS_LSI_AP_AR_T AR
							WHERE 1=1
							AND AR.RECORD_TYPE='AR'
							AND batch_id=LV_BATCH_ID
							AND AR.ENTERED_INVOICE_AMOUNT<0
							AND (AR.STATUS IS NULL or AR.STATUS='ERROR')
							AND NOT EXISTS (Select 1 FROM WSC_AHCS_LSI_AR_T
											WHERE INTERCOMPANY_BATCH_NUMBER=AR.INTERCOMPANY_BATCH_NUMBER
											AND IC_TRX_NUMBER=AR.IC_TRX_NUMBER)
							AND EXISTS (Select 1 FROM WSC_AHCS_LSI_AP_T
											WHERE INTERCOMPANY_BATCH_NUMBER=AR.INTERCOMPANY_BATCH_NUMBER
											AND IC_TRX_NUMBER=AR.IC_TRX_NUMBER)) b
						ON (a.INVOICE_NUMBER = b.INVOICE_NUMBER AND a.BU=b.BU AND a.CUST_NAME=b.VENDOR_CUST_NAME AND a.CUST_SITE=b.VENDOR_CUST_SITE)
						WHEN NOT MATCHED THEN
							INSERT (BATCH_ID,
									FILE_NAME,
									BU,
																								  BU_ID,
									INVOICE_NUMBER, 
									LEDGER_NAME, 
									ACCOUNTING_CLASS, 
									INVOICE_DATE, 
									ACCOUNTING_DATE, 
									EXCHANGE_RATE, 
									EXCHANGE_RATE_TYPE, 
									EXCHANGE_RATE_DATE, 
									ENTERED_INVOICE_AMOUNT, 
									ACCOUNTED_INVOICE_AMOUNT, 
									GL_CODE_COMBINATION, 
									INTERCOMPANY_LEGAL_ENTITY, 
									INTERCOMPANY_TRANSACTION_TYPE, 
									INTERCOMPANY_BATCH_NUMBER, 
									CUST_NAME, 
									CUST_SITE, 
									ACCOUNT_NUMBER, 
									LOCKBOX_NUMBER, 
																								  LOCKBOX_ID,
									BANK_ORIGINATION_NUMBER, 
									INVOICE_CURRENCY_CODE, 
									FUNCTIONAL_CURRENCY_CODE,
																								  IC_TRX_NUMBER,
																								  INVOICE_ID,
									ACCOUNTING_PERIOD,
									TO_BE_REPROCESSED) 
							VALUES (LV_BATCH_ID,
									b.FILE_NAME, 
									b.BU, 
									b.BU_ID,
									b.INVOICE_NUMBER, 
									b.LEDGER_NAME, 
									b.ACCOUNTING_CLASS, 
									b.INVOICE_DATE, 
									L_ACC_DATE,
									b.EXCHANGE_RATE, 
									b.EXCHANGE_RATE_TYPE, 
									b.EXCHANGE_RATE_DATE, 
									b.ENTERED_INVOICE_AMOUNT, 
									b.ACCOUNTED_INVOICE_AMOUNT, 
									b.GL_CODE_COMBINATION, 
									b.INTERCOMPANY_LEGAL_ENTITY, 
									b.INTERCOMPANY_TRANSACTION_TYPE, 
									b.INTERCOMPANY_BATCH_NUMBER, 
									b.VENDOR_CUST_NAME, 
									b.VENDOR_CUST_SITE, 
									b.ACCOUNT_NUMBER, 
									b.LOCKBOX_NUMBER, 
									b.LOCKBOX_ID,
									b.BANK_ORIGINATION_NUMBER, 
									b.INVOICE_CURRENCY_CODE, 
									b.FUNCTIONAL_CURRENCY_CODE,
									b.IC_TRX_NUMBER,
									b.INVOICE_ID,
									b.ACCOUNTING_PERIOD,
									'N');    */
            COMMIT;
            wsc_async_lsi_fbdi_process_p(lv_batch_id);
            SELECT
                COUNT(
                    CASE
                        WHEN invoice_status = 'NEW' THEN
                            1
                    END
                ),
                COUNT(
                    CASE
                        WHEN invoice_status = 'PROCESSED' THEN
                            1
                    END
                ),
                COUNT(
                    CASE
                        WHEN invoice_number LIKE '%LSI' THEN
                            1
                    END
                )
            INTO
                lv_count_new_inv,
                lv_count_pro_inv,
                lv_count_all_inv
            FROM
                wsc_ahcs_lsi_ap_ar_t
            WHERE
                batch_id = lv_batch_id;

            IF lv_count_new_inv = 0 THEN
                UPDATE wsc_ahcs_lsi_control_t
                SET 
					--TO_BE_PROCESSED='Y',
                    to_be_processed = (
                        CASE
                            WHEN lv_count_pro_inv > 0 THEN
                                'Y'
                        END
                    ),
                    inv_create_count = lv_count_pro_inv,
                    inv_create_status = (
                        CASE
                            WHEN lv_count_all_inv = lv_count_pro_inv THEN
                                'SUCCESS'
                            WHEN lv_count_pro_inv = 0                THEN
                                'ERROR'
                            WHEN lv_count_all_inv > lv_count_pro_inv THEN
                                'WARNING'
                        END
                    )
                WHERE
                    batch_id = lv_batch_id;

                COMMIT;
            END IF;

        EXCEPTION
            WHEN OTHERS THEN
                lv_error_msg := substr(sqlerrm, 1, 200);
                INSERT INTO wsc_ahcs_lsi_err_t (
                    file_name,
                    error_code,
                    error_msg,
                    created_date,
                    last_updated_by,
                    last_updated_date,
                    error_file_sent_flag,
                    created_by,
                    batch_id,
                    to_be_processed
                ) VALUES (
                    NULL, --P_FILE_NAME ,
                    'AR Records not merged in WSC_AHCS_LSI_AR_T',
                    lv_error_msg
                    || ':- AR Records not populated for batch id'
                    || lv_batch_id,
                    sysdate,
                    'FININT',
                    sysdate,
                    'N',
                    'FININT',
                    lv_batch_id,
                    'Y'
                );

                COMMIT;
                wsc_ahcs_int_error_logging.error_logging(lv_batch_id, 'EXT041'
                                                                      || '_'
                                                                      || 'LSI', 'Oracle LSI', 'Error in AP-AR Matching Process-' || sqlerrm);

        END;

    END;

    PROCEDURE wsc_ahcs_lsi_dump_status2credit_memo_t_p (
        cm_inv_status_dump wsc_lsi_credit_memo_invoice_type_table
    ) AS
    BEGIN
        FORALL i IN 1..cm_inv_status_dump.count
            INSERT INTO wsc_lsi_credit_memo_invoice_t (
                invoice_id,
                invoice_num,
                vendor_name,
                vendor_site_code,
                operating_unit,
                status,
                legal_entity_name,
                load_request_id
            ) VALUES (
                cm_inv_status_dump(i).invoice_id,
                cm_inv_status_dump(i).invoice_num,
                cm_inv_status_dump(i).vendor_name,
                cm_inv_status_dump(i).vendor_site_code,
                cm_inv_status_dump(i).operating_unit,
                cm_inv_status_dump(i).status,
                cm_inv_status_dump(i).legal_entity_name,
                cm_inv_status_dump(i).load_request_id
            );

        COMMIT;
    END;

    PROCEDURE wsc_ahcs_lsi_dump_cm_validate_t_p (
        cm_val_status_dump wsc_ahcs_lsi_cm_val_t_type_table
    ) AS
        lv_count_new_val NUMBER;
        lv_count_pro_val NUMBER;
        lv_count_all_val NUMBER;
        lv_batch_id      VARCHAR2(100);
    BEGIN
        FOR i IN 1..cm_val_status_dump.count LOOP
            INSERT INTO wsc_ahcs_lsi_cm_validate_t (
                invoice_num,
                vendor_name,
                vendor_site_code,
                bu,
                approval_status,
                request_id
            ) VALUES (
                cm_val_status_dump(i).invoice_num,
                cm_val_status_dump(i).vendor_name,
                cm_val_status_dump(i).vendor_site_code,
                cm_val_status_dump(i).bu,
                cm_val_status_dump(i).approval_status,
                cm_val_status_dump(i).request_id
            );

            COMMIT;
            UPDATE wsc_ahcs_lsi_ap_ar_t
            SET
                invoice_validation_status = cm_val_status_dump(i).approval_status
            WHERE
                    invoice_number = cm_val_status_dump(i).invoice_num
                AND vendor_cust_name = cm_val_status_dump(i).vendor_name
                AND vendor_cust_site = cm_val_status_dump(i).vendor_site_code
                AND bu = cm_val_status_dump(i).bu
                AND invoice_fbdi_submit_id = cm_val_status_dump(i).request_id;

            COMMIT;
        END LOOP;

        SELECT DISTINCT
            batch_id
        INTO lv_batch_id
        FROM
            wsc_ahcs_lsi_ap_ar_t
        WHERE
            invoice_fbdi_submit_id = cm_val_status_dump(1).request_id;

        SELECT
            COUNT(
                CASE
                    WHEN invoice_validation_status IS NULL
                         AND invoice_number LIKE '%LSI' THEN
                        1
                END
            ),
            COUNT(
                CASE
                    WHEN invoice_validation_status = 'APPROVED' THEN
                        1
                END
            ),
            COUNT(
                CASE
                    WHEN invoice_number LIKE '%LSI' THEN
                        1
                END
            )
        INTO
            lv_count_new_val,
            lv_count_pro_val,
            lv_count_all_val
        FROM
            wsc_ahcs_lsi_ap_ar_t
        WHERE
            batch_id = lv_batch_id;

        IF lv_count_new_val = 0 THEN
            UPDATE wsc_ahcs_lsi_control_t
            SET
                inv_validation_count = lv_count_pro_val,
                inv_validation_status = (
                    CASE
                        WHEN lv_count_all_val = lv_count_pro_val THEN
                            'SUCCESS'
                        WHEN lv_count_pro_val = 0                THEN
                            'ERROR'
                        WHEN lv_count_all_val > lv_count_pro_val THEN
                            'WARNING'
                    END
                )
            WHERE
                batch_id = lv_batch_id;

            COMMIT;

            	--delete from wsc_ahcs_lsi_ap_ar_match_t where batch_id = lv_batch_id;

        END IF;

    END;

    PROCEDURE wsc_ahcs_lsin_grp_id_upd_p (
        in_grp_id IN NUMBER
    ) AS

        lv_grp_id        NUMBER := in_grp_id;
        err_msg          VARCHAR2(4000);
        CURSOR lsin_grp_data_fetch_cur (
            p_grp_id NUMBER
        ) IS
        SELECT DISTINCT
            c.batch_id           batch_id,
            c.file_name          file_name,
            a.ledger_name        ledger_name,
            c.source_application source_application,
            a.source_system      source_system,
            c.status             status
        FROM
            wsc_ahcs_int_control_t               c,
            wsc_ahcs_lsi_control_t               lsic,
            wsc_ahcs_lsi_netting_entry_headers_t a
        WHERE
                a.batch_id = c.batch_id
            AND a.ledger_name IS NOT NULL
            --AND c.status = 'TRANSFORM_SUCCESS'
            AND c.group_id = p_grp_id
            AND c.batch_id = lsic.batch_id
            AND 1 = CASE
                WHEN lsic.record_type = 'AP-AR'
                     AND lsic.inv_pay_status IN ( 'SUCCESS', 'WARNING' )
                     AND lsic.receipt_status IN ( 'SUCCESS', 'WARNING' )
                     AND lsic.netting_status IN ( 'SUCCESS', 'PARTIAL SUCCESS' )
                     AND ( lsic.to_be_processed = 'Y'
                           OR lsic.to_be_reprocessed = 'Y' ) THEN
                    1
                WHEN lsic.record_type = 'GL'
                     AND lsic.netting_status IN ( 'SUCCESS', 'PARTIAL SUCCESS' )
                     AND ( lsic.to_be_processed = 'Y'
                           OR lsic.to_be_reprocessed = 'Y' ) THEN
                    1
                ELSE
                    0
                    END
            AND EXISTS (
                SELECT
                    1
                FROM
                    wsc_ahcs_int_status_t s
                WHERE
                        s.batch_id = a.batch_id
                    AND s.header_id = a.header_id
                    AND s.attribute2 = 'TRANSFORM_SUCCESS'
                    AND ( s.accounting_status = 'IMP_ACC_ERROR'
                          OR s.accounting_status IS NULL )
            );

        TYPE lsin_grp_type IS
            TABLE OF lsin_grp_data_fetch_cur%rowtype;
        lv_lsin_grp_type lsin_grp_type;
    BEGIN
-- Updating Group Id for MF AP Files in control table----

        UPDATE wsc_ahcs_int_control_t a
        SET
            group_id = lv_grp_id
        WHERE
                source_application = 'Oracle LSI'
           -- AND status = 'TRANSFORM_SUCCESS'
            AND group_id IS NULL
            AND EXISTS (
                SELECT
                    1
                FROM
                    wsc_ahcs_lsi_control_t               lsic,
                    wsc_ahcs_lsi_netting_entry_headers_t b,
                    wsc_ahcs_int_status_t                s
                WHERE
                        lsic.batch_id = a.batch_id
                    AND lsic.batch_id = b.batch_id
                    AND b.ledger_name IS NOT NULL
                    AND s.batch_id = b.batch_id
                    AND s.header_id = b.header_id
                    AND s.attribute2 = 'TRANSFORM_SUCCESS'
                    AND ( s.accounting_status = 'IMP_ACC_ERROR'
                          OR s.accounting_status IS NULL )
                    AND 1 = CASE
                        WHEN lsic.record_type = 'AP-AR'
                             AND inv_pay_status IN ( 'SUCCESS', 'WARNING' )
                             AND receipt_status IN ( 'SUCCESS', 'WARNING' )
                             AND netting_status IN ( 'SUCCESS', 'PARTIAL SUCCESS' )
                             AND ( lsic.to_be_processed = 'Y'
                                   OR lsic.to_be_reprocessed = 'Y' ) THEN
                            1
                        WHEN lsic.record_type = 'GL'
                             AND netting_status IN ( 'SUCCESS', 'PARTIAL SUCCESS' )
                             AND ( lsic.to_be_processed = 'Y'
                                   OR lsic.to_be_reprocessed = 'Y' ) THEN
                            1
                        ELSE
                            0
                            END
            );

        COMMIT;
        OPEN lsin_grp_data_fetch_cur(lv_grp_id);
        LOOP
            FETCH lsin_grp_data_fetch_cur
            BULK COLLECT INTO lv_lsin_grp_type LIMIT 50;
            EXIT WHEN lv_lsin_grp_type.count = 0;
            FORALL i IN 1..lv_lsin_grp_type.count
                INSERT INTO wsc_ahcs_int_control_line_t (
                    batch_id,
                    file_name,
                    group_id,
                    ledger_name,
                    source_system,
                    interface_id,
                    status,
                    created_by,
                    creation_date,
                    last_updated_by,
                    last_update_date
                ) VALUES (
                    lv_lsin_grp_type(i).batch_id,
                    lv_lsin_grp_type(i).file_name,
                    lv_grp_id,
                    lv_lsin_grp_type(i).ledger_name,
                    lv_lsin_grp_type(i).source_application,
                    lv_lsin_grp_type(i).source_system,
                    lv_lsin_grp_type(i).status,
                    'FIN_INT',
                    sysdate,
                    'FIN_INT',
                    sysdate
                );

        END LOOP;

        COMMIT;
        UPDATE wsc_ahcs_int_status_t
        SET
            group_id = lv_grp_id
        WHERE
            batch_id IN (
                SELECT DISTINCT
                    batch_id
                FROM
                    wsc_ahcs_int_control_line_t
                WHERE
                    group_id = lv_grp_id
            )
            AND attribute2 = 'TRANSFORM_SUCCESS'
            AND ( accounting_status = 'IMP_ACC_ERROR'
                  OR accounting_status IS NULL );

        COMMIT;
        UPDATE wsc_ahcs_lsi_control_t a
        SET
            to_be_processed = 'N',
            to_be_reprocessed = 'N'
        WHERE
            EXISTS (
                SELECT
                    1
                FROM
                    wsc_ahcs_int_control_t
                WHERE
                        batch_id = a.batch_id
                    AND group_id = lv_grp_id
            );

        COMMIT;
    END wsc_ahcs_lsin_grp_id_upd_p;

    PROCEDURE wsc_ahcs_lsi_ctrl_line_tbl_led_num_upd (
        p_group_id       IN VARCHAR2,
        p_ledger_grp_num IN VARCHAR2
    ) AS
    BEGIN
        IF ( p_ledger_grp_num = 999 ) THEN
            dbms_output.put_line(p_ledger_grp_num || 'inside IF');
            UPDATE wsc_ahcs_int_control_line_t status
            SET
                status.ledger_grp_num = 999,
                last_update_date = sysdate
            WHERE
                    status.group_id = p_group_id
                AND NOT EXISTS (
                    SELECT
                        1
                    FROM
                        wsc_ahcs_int_mf_ledger_t ml
                    WHERE
                            999 = p_ledger_grp_num
                        AND ml.sub_ledger = 'Oracle LSI'
                        AND ml.ledger_name = status.ledger_name
                );

            COMMIT;
        ELSE
            dbms_output.put_line(p_ledger_grp_num || ' inside  else ');
            UPDATE wsc_ahcs_int_control_line_t status
            SET
                status.ledger_grp_num = p_ledger_grp_num,
                last_update_date = sysdate
            WHERE
                    status.group_id = p_group_id
                AND ( ledger_name IN (
                    SELECT
                        ledger_name
                    FROM
                        wsc_ahcs_int_mf_ledger_t ml
                    WHERE
                            ml.ledger_grp_num = p_ledger_grp_num
                        AND ml.sub_ledger = 'Oracle LSI'
                        AND ml.ledger_name = status.ledger_name
                ) );

            COMMIT;
        END IF;
    END wsc_ahcs_lsi_ctrl_line_tbl_led_num_upd;

    PROCEDURE wsc_ahcs_lsi_ctrl_line_ucm_id_upd (
        p_ucmdoc_id      IN VARCHAR2,
        p_group_id       IN VARCHAR2,
        p_ledger_grp_num IN VARCHAR2
    ) AS
    BEGIN
        IF ( p_ledger_grp_num = 999 ) THEN
            dbms_output.put_line(p_ledger_grp_num || 'inside IF');
            UPDATE wsc_ahcs_int_control_line_t status
            SET
                status.ucm_id = p_ucmdoc_id,
                status.status = 'UCM_UPLOADED',
                last_update_date = sysdate
            WHERE
                    status.group_id = p_group_id
                AND NOT EXISTS (
                    SELECT
                        1
                    FROM
                        wsc_ahcs_int_mf_ledger_t ml
                    WHERE
                            999 = p_ledger_grp_num
                        AND ml.sub_ledger = 'Oracle LSI'
                        AND ml.ledger_name = status.ledger_name
                );

            COMMIT;
        ELSE
            dbms_output.put_line(p_ledger_grp_num || ' inside  else ');
            UPDATE wsc_ahcs_int_control_line_t status
            SET
                status.ucm_id = p_ucmdoc_id,
                status.status = 'UCM_UPLOADED',
                last_update_date = sysdate
            WHERE
                    status.group_id = p_group_id
                AND ( ledger_name IN (
                    SELECT
                        ledger_name
                    FROM
                        wsc_ahcs_int_mf_ledger_t ml
                    WHERE
                            ml.ledger_grp_num = p_ledger_grp_num
                        AND ml.sub_ledger = 'Oracle LSI'
                        AND ml.ledger_name = status.ledger_name
                ) );

            COMMIT;
        END IF;
    END wsc_ahcs_lsi_ctrl_line_ucm_id_upd;

    PROCEDURE wsc_ahcs_lsi_update_imp_status (
        p_group_id NUMBER
    ) IS
        lv_total_count   NUMBER := 0;
        lv_success_count NUMBER := 0;
        lv_error_count   NUMBER := 0;
    BEGIN
        SELECT
            COUNT(*),
            COUNT(
                CASE
                    WHEN status = 'IMP_ACC_SUCCESS' THEN
                        1
                    ELSE
                        NULL
                END
            ),
            COUNT(
                CASE
                    WHEN status = 'IMP_ACC_ERROR' THEN
                        1
                    ELSE
                        NULL
                END
            )
        INTO
            lv_total_count,
            lv_success_count,
            lv_error_count
        FROM
            wsc_ahcs_int_control_line_t
        WHERE
            group_id = p_group_id;

        UPDATE wsc_ahcs_lsi_control_t a
        SET
            status =
                CASE
                    WHEN lv_total_count = lv_success_count THEN
                        'IMP_ACC_SUCCESS'
                    WHEN lv_total_count = lv_error_count   THEN
                        'IMP_ACC_ERROR'
                    ELSE
                        'IN PROGRESS'
                END
        WHERE
            EXISTS (
                SELECT
                    1
                FROM
                    wsc_ahcs_int_control_t
                WHERE
                        batch_id = a.batch_id
                    AND group_id = p_group_id
            );

        COMMIT;
    END wsc_ahcs_lsi_update_imp_status;

END WSC_LSI_PKG;
/